-- MySQL Script generated by MySQL Workbench
-- Mon Dec  3 19:06:47 2018
-- Model: GrandChef Model    Version: 2.0.0.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema GrandChef
-- -----------------------------------------------------
-- Armazena todas as informações do sistema GrandChef, exceto configurações de janelas, conexão e lembrete de sessão
DROP SCHEMA IF EXISTS `GrandChef` ;

-- -----------------------------------------------------
-- Schema GrandChef
--
-- Armazena todas as informações do sistema GrandChef, exceto configurações de janelas, conexão e lembrete de sessão
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `GrandChef` DEFAULT CHARACTER SET utf8 ;
USE `GrandChef` ;

-- -----------------------------------------------------
-- Table `Setores`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Setores` ;

CREATE TABLE IF NOT EXISTS `Setores` (
  `ID` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador do setor[G:o]',
  `SetorID` INT NULL DEFAULT NULL COMMENT 'Informa o setor que abrange esse subsetor[G:o][N:Setor superior]',
  `Nome` VARCHAR(50) NOT NULL COMMENT 'Nome do setor, único em todo o sistema[N:Nome][G:o][S]',
  `Descricao` VARCHAR(70) NULL DEFAULT NULL COMMENT 'Descreve a utilização do setor[N:Descrição][G:a]',
  PRIMARY KEY (`ID`),
  UNIQUE INDEX `Nome_UNIQUE` (`Nome` ASC),
  INDEX `FK_Setores_SetorID_idx` (`SetorID` ASC),
  CONSTRAINT `FK_Setores_SetorID`
    FOREIGN KEY (`SetorID`)
    REFERENCES `Setores` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB
COMMENT = 'Setor de impressão e de estoque[N:Setor|Setores][G:o][L:Estoque][K:MZ\\Environment|MZ\\Environment\\][H:SyncModel]';


-- -----------------------------------------------------
-- Table `Mesas`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Mesas` ;

CREATE TABLE IF NOT EXISTS `Mesas` (
  `ID` INT NOT NULL AUTO_INCREMENT COMMENT 'Número da mesa[N:Número][G:o]',
  `SetorID` INT NULL DEFAULT NULL COMMENT 'Setor em que a mesa está localizada[G:o][N:Setor]',
  `Numero` INT NOT NULL COMMENT 'Número da mesa[G:o][N:Número]',
  `Nome` VARCHAR(50) NOT NULL COMMENT 'Nome da mesa[N:Nome][G:o][S]',
  `Ativa` ENUM('Y', 'N') NOT NULL DEFAULT 'Y' COMMENT 'Informa se a mesa está disponível para lançamento de pedidos[N:Ativa][G:a]',
  PRIMARY KEY (`ID`),
  UNIQUE INDEX `Nome_UNIQUE` (`Nome` ASC),
  INDEX `FK_Mesas_Setores_SetorID_idx` (`SetorID` ASC),
  UNIQUE INDEX `Numero_UNIQUE` (`Numero` ASC),
  CONSTRAINT `FK_Mesas_Setores_SetorID`
    FOREIGN KEY (`SetorID`)
    REFERENCES `Setores` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB
COMMENT = 'Mesas para lançamento de pedidos[N:Mesa|Mesas][G:a][L:CadastroMesas][K:MZ\\Environment|MZ\\Environment\\][H:SyncModel]';


-- -----------------------------------------------------
-- Table `Sessoes`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Sessoes` ;

CREATE TABLE IF NOT EXISTS `Sessoes` (
  `ID` INT NOT NULL AUTO_INCREMENT COMMENT 'Código da sessão[G:o]',
  `DataInicio` DATETIME NOT NULL COMMENT 'Data de início da sessão[N:Data de início][G:a]',
  `DataTermino` DATETIME NULL DEFAULT NULL COMMENT 'Data de fechamento da sessão[N:Data de termíno][G:a]',
  `Aberta` ENUM('Y', 'N') NOT NULL COMMENT 'Informa se a sessão está aberta[N:Aberta][G:a]',
  PRIMARY KEY (`ID`),
  INDEX `IDX_Sessoes_Aberta` (`Aberta` ASC))
ENGINE = InnoDB
COMMENT = 'Sessão de trabalho do dia, permite que vários caixas sejam abertos utilizando uma mesma sessão[N:Sessão|Sessões][G:a][L:AbrirCaixa][K:MZ\\Session|MZ\\Session\\][H:SyncModel]';


-- -----------------------------------------------------
-- Table `Bancos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Bancos` ;

CREATE TABLE IF NOT EXISTS `Bancos` (
  `ID` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador do banco[G:o]',
  `Numero` VARCHAR(40) NOT NULL COMMENT 'Número do banco[N:Número][G:o]',
  `RazaoSocial` VARCHAR(200) NOT NULL COMMENT 'Razão social do banco[N:Razão social][G:a][S]',
  `AgenciaMascara` VARCHAR(45) NULL DEFAULT NULL COMMENT 'Mascara para formatação do número da agência[N:Máscara da agência][G:a]',
  `ContaMascara` VARCHAR(45) NULL DEFAULT NULL COMMENT 'Máscara para formatação do número da conta[N:Máscara da conta][G:a]',
  PRIMARY KEY (`ID`),
  UNIQUE INDEX `RazaoSocial_UNIQUE` (`RazaoSocial` ASC),
  UNIQUE INDEX `Numero_UNIQUE` (`Numero` ASC))
ENGINE = InnoDB
COMMENT = 'Bancos disponíveis no país[N:Banco|Bancos][G:o][L:CadastroBancos][K:MZ\\Wallet|MZ\\Wallet\\][H:SyncModel]';


-- -----------------------------------------------------
-- Table `Carteiras`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Carteiras` ;

CREATE TABLE IF NOT EXISTS `Carteiras` (
  `ID` INT NOT NULL AUTO_INCREMENT COMMENT 'Código local da carteira[G:o]',
  `Tipo` ENUM('Bancaria', 'Financeira', 'Credito', 'Local') NOT NULL COMMENT 'Tipo de carteira, \'Bancaria\' para conta bancária, \'Financeira\' para carteira financeira da empresa ou de sites de pagamentos, \'Credito\' para cartão de crédito e \'Local\' para caixas e cofres locais[N:Tipo][G:o][S:S][E:Bancária|Financeira|Crédito|Local]',
  `CarteiraID` INT NULL DEFAULT NULL COMMENT 'Informa a carteira superior, exemplo: Banco e cartões como subcarteira[G:a][N:Carteira superior]',
  `BancoID` INT NULL DEFAULT NULL COMMENT 'Código local do banco quando a carteira for bancária[N:Banco][G:o][S:S]',
  `Descricao` VARCHAR(100) NOT NULL COMMENT 'Descrição da carteira, nome dado a carteira cadastrada[N:Descrição][G:a][S]',
  `Conta` VARCHAR(100) NULL DEFAULT NULL COMMENT 'Número da conta bancária ou usuário da conta de acesso da carteira[N:Conta][G:a]',
  `Agencia` VARCHAR(200) NULL DEFAULT NULL COMMENT 'Número da agência da conta bancária ou site da carteira financeira[N:Agência][G:a]',
  `Transacao` DECIMAL(19,4) NOT NULL DEFAULT 0 COMMENT 'Valor cobrado pela operadora de pagamento para cada transação[N:Transação][G:a][F:0]',
  `Limite` DECIMAL(19,4) NULL DEFAULT NULL COMMENT 'Limite de crédito[G:o][N:Limite de crédito]',
  `Token` VARCHAR(250) NULL DEFAULT NULL COMMENT 'Token para integração de pagamentos[G:o][N:Token]',
  `Ambiente` ENUM('Teste', 'Producao') NULL DEFAULT NULL COMMENT 'Ambiente de execução da API usando o token[G:o][N:Ambiente][E:Teste|Produção]',
  `LogoURL` VARCHAR(100) NULL DEFAULT NULL COMMENT 'Logo do gateway de pagamento[N:Logo][G:o][I:256x256|carteira|carteira.png]',
  `Cor` VARCHAR(20) NULL DEFAULT NULL COMMENT 'Cor predominante da marca da instituição[G:a][N:Cor]',
  `Ativa` ENUM('Y', 'N') NOT NULL DEFAULT 'Y' COMMENT 'Informa se a carteira ou conta bancária está ativa[N:Ativa][G:a]',
  PRIMARY KEY (`ID`),
  INDEX `FK_Carteiras_Bancos_BancoID_idx` (`BancoID` ASC),
  INDEX `FK_Carteiras_Carteiras_CarteiraID_idx` (`CarteiraID` ASC),
  CONSTRAINT `FK_Carteiras_Bancos_BancoID`
    FOREIGN KEY (`BancoID`)
    REFERENCES `Bancos` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Carteiras_Carteiras_CarteiraID`
    FOREIGN KEY (`CarteiraID`)
    REFERENCES `Carteiras` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB
COMMENT = 'Informa uma conta bancária ou uma carteira financeira[N:Carteira|Carteiras][G:a][L:CadastroCarteiras][K:MZ\\Wallet|MZ\\Wallet\\][H:SyncModel]';


-- -----------------------------------------------------
-- Table `Caixas`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Caixas` ;

CREATE TABLE IF NOT EXISTS `Caixas` (
  `ID` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador do caixa[G:o]',
  `CarteiraID` INT NOT NULL COMMENT 'Informa a carteira que representa esse caixa[G:a][N:Carteira]',
  `Descricao` VARCHAR(50) NOT NULL COMMENT 'Descrição do caixa[N:Descrição][G:a][S]',
  `Serie` INT NOT NULL DEFAULT 1 COMMENT 'Série do caixa[N:Série][G:a]',
  `NumeroInicial` INT NOT NULL DEFAULT 1 COMMENT 'Número inicial na geração da nota, será usado quando maior que o último número utilizado[N:Número inicial][G:o]',
  `Ativo` ENUM('Y', 'N') NOT NULL DEFAULT 'Y' COMMENT 'Informa se o caixa está ativo[N:Ativo][G:o]',
  PRIMARY KEY (`ID`),
  UNIQUE INDEX `Descricao_UNIQUE` (`Descricao` ASC),
  INDEX `FK_Caixas_Carteiras_CarteiraID_idx` (`CarteiraID` ASC),
  CONSTRAINT `FK_Caixas_Carteiras_CarteiraID`
    FOREIGN KEY (`CarteiraID`)
    REFERENCES `Carteiras` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB
COMMENT = 'Caixas de movimentação financeira[N:Caixa|Caixas][G:o][L:CadastroCaixas][K:MZ\\Session|MZ\\Session\\][H:SyncModel]';


-- -----------------------------------------------------
-- Table `Integracoes`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Integracoes` ;

CREATE TABLE IF NOT EXISTS `Integracoes` (
  `ID` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador da integração[N:ID][G:o]',
  `Nome` VARCHAR(45) NOT NULL COMMENT 'Nome do módulo de integração[G:o][N:Nome]',
  `AcessoURL` VARCHAR(100) NOT NULL COMMENT 'Nome da URL de acesso[N:URL][G:a]',
  `Descricao` VARCHAR(200) NULL DEFAULT NULL COMMENT 'Descrição do módulo integrador[G:a][N:Descrição]',
  `IconeURL` VARCHAR(200) NULL DEFAULT NULL COMMENT 'Nome do ícone do módulo integrador[G:o][N:Ícone][I:128x128|integracao|integracao.png]',
  `Ativo` ENUM('Y', 'N') NOT NULL DEFAULT 'N' COMMENT 'Informa de o módulo de integração está habilitado[G:o][N:Habilitado]',
  `Token` VARCHAR(200) NULL DEFAULT NULL COMMENT 'Token de acesso à API de sincronização[N:Token][G:o]',
  `Secret` VARCHAR(200) NULL DEFAULT NULL COMMENT 'Chave secreta para acesso à API[G:a][N:Chave secreta]',
  `DataAtualizacao` DATETIME NOT NULL COMMENT 'Data de atualização dos dados do módulo de integração[G:a][N:Data de atualização]',
  PRIMARY KEY (`ID`),
  UNIQUE INDEX `Nome_UNIQUE` (`Nome` ASC),
  UNIQUE INDEX `AcessoURL_UNIQUE` (`AcessoURL` ASC))
ENGINE = InnoDB
COMMENT = 'Informa quais integrações estão disponíveis[N:Integração|Integrações][G:a][L:AlterarConfiguracoes][K:MZ\\System|MZ\\System\\][H:SyncModel]';


-- -----------------------------------------------------
-- Table `Formas_Pagto`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Formas_Pagto` ;

CREATE TABLE IF NOT EXISTS `Formas_Pagto` (
  `ID` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador da forma de pagamento[G:o]',
  `Tipo` ENUM('Dinheiro', 'Credito', 'Debito', 'Vale', 'Cheque', 'Crediario', 'Saldo') NOT NULL COMMENT 'Tipo de pagamento[N:Tipo][G:o][E:Dinheiro|Cartão de credito|Cartão de débito|Vale|Cheque|Crediário|Saldo][S:S]',
  `IntegracaoID` INT NULL DEFAULT NULL COMMENT 'Informa se essa forma de pagamento estará disponível apenas nessa integração[G:a][N:Integração]',
  `CarteiraID` INT NOT NULL COMMENT 'Carteira que será usada para entrada de valores no caixa[N:Carteira de entrada][G:a]',
  `Descricao` VARCHAR(50) NOT NULL COMMENT 'Descrição da forma de pagamento[N:Descrição][G:a][S]',
  `MinParcelas` INT NULL DEFAULT NULL COMMENT 'Quantidade mínima de parcelas[N:Minimo de parcelas][G:a]',
  `MaxParcelas` INT NULL DEFAULT NULL COMMENT 'Quantidade máxima de parcelas[N:Máximo de parcelas][G:o]',
  `ParcelasSemJuros` INT NULL DEFAULT NULL COMMENT 'Quantidade de parcelas em que não será cobrado juros[N:Parcelas sem juros][G:a]',
  `Juros` DOUBLE NULL DEFAULT NULL COMMENT 'Juros cobrado ao cliente no parcelamento[N:Juros][G:o]',
  `Ativa` ENUM('Y', 'N') NOT NULL DEFAULT 'Y' COMMENT 'Informa se a forma de pagamento está ativa[N:Ativa][G:a]',
  PRIMARY KEY (`ID`),
  UNIQUE INDEX `Descricao_UNIQUE` (`Descricao` ASC),
  INDEX `FK_Formas_Pagto_Carteiras_CarteiraID_idx` (`CarteiraID` ASC),
  INDEX `FK_Formas_Pagto_Integracoes_IntegracaoID_idx` (`IntegracaoID` ASC),
  CONSTRAINT `FK_Formas_Pagto_Carteiras_CarteiraID`
    FOREIGN KEY (`CarteiraID`)
    REFERENCES `Carteiras` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Formas_Pagto_Integracoes_IntegracaoID`
    FOREIGN KEY (`IntegracaoID`)
    REFERENCES `Integracoes` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB
COMMENT = 'Formas de pagamento disponíveis para pedido e contas[N:Forma de pagamento|Formas de pagamento][G:a][L:CadastroFormasPagto][K:MZ\\Payment|MZ\\Payment\\][H:SyncModel]';


-- -----------------------------------------------------
-- Table `Cartoes`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Cartoes` ;

CREATE TABLE IF NOT EXISTS `Cartoes` (
  `ID` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador do cartão[G:o]',
  `FormaPagtoID` INT NOT NULL COMMENT 'Forma de pagamento associada à esse cartão ou vale[G:a][N:Forma de pagamento]',
  `CarteiraID` INT NULL DEFAULT NULL COMMENT 'Carteira de entrada de valores no caixa[N:Carteira de entrada][G:a]',
  `Bandeira` VARCHAR(50) NOT NULL COMMENT 'Nome da bandeira do cartão[N:Bandeira][G:a][S]',
  `Taxa` DOUBLE NOT NULL DEFAULT 0 COMMENT 'Taxa em porcentagem cobrado sobre o total do pagamento, valores de 0 a 100[N:Taxa][G:a]',
  `DiasRepasse` INT UNSIGNED NOT NULL DEFAULT 30 COMMENT 'Quantidade de dias para repasse do valor[N:Dias para repasse][G:o]',
  `TaxaAntecipacao` DOUBLE NOT NULL DEFAULT 0 COMMENT 'Taxa em porcentagem para antecipação de recebimento de parcelas[N:Taxa de antecipação][G:a]',
  `ImagemURL` VARCHAR(100) NULL DEFAULT NULL COMMENT 'Imagem do cartão[N:Imagem][G:a][I:256x256|cartao|cartao.png]',
  `Ativo` ENUM('Y', 'N') NOT NULL DEFAULT 'Y' COMMENT 'Informa se o cartão está ativo[N:Ativo][G:o]',
  PRIMARY KEY (`ID`),
  UNIQUE INDEX `FormaPagtoID_Bandeira_UNIQUE` (`FormaPagtoID` ASC, `Bandeira` ASC),
  INDEX `FK_Cartoes_Carteiras_CarteiraID_idx` (`CarteiraID` ASC),
  INDEX `FK_Cartoes_Formas_Pagto_FormaPagtoID_idx` (`FormaPagtoID` ASC),
  CONSTRAINT `FK_Cartoes_Carteiras_CarteiraID`
    FOREIGN KEY (`CarteiraID`)
    REFERENCES `Carteiras` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Cartoes_Formas_Pagto_FormaPagtoID`
    FOREIGN KEY (`FormaPagtoID`)
    REFERENCES `Formas_Pagto` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB
COMMENT = 'Cartões utilizados na forma de pagamento em cartão[N:Cartão|Cartões][G:o][L:CadastroCartoes][K:MZ\\Payment|MZ\\Payment\\][H:SyncModel]';


-- -----------------------------------------------------
-- Table `Funcoes`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Funcoes` ;

CREATE TABLE IF NOT EXISTS `Funcoes` (
  `ID` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador da função[G:o]',
  `Descricao` VARCHAR(45) NOT NULL COMMENT 'Descreve o nome da função[N:Descrição][G:a][S]',
  `Remuneracao` DECIMAL(19,4) NOT NULL COMMENT 'Remuneracao pelas atividades exercidas, não está incluso comissões[N:Remuneração][G:a]',
  PRIMARY KEY (`ID`),
  UNIQUE INDEX `Descricao_UNIQUE` (`Descricao` ASC))
ENGINE = InnoDB
COMMENT = 'Função ou atribuição de tarefas à um prestador[N:Função|Funções][G:a][L:AlterarConfiguracoes][K:MZ\\Provider|MZ\\Provider\\][H:SyncModel]';


-- -----------------------------------------------------
-- Table `Clientes`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Clientes` ;

CREATE TABLE IF NOT EXISTS `Clientes` (
  `ID` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador do cliente[G:o]',
  `Tipo` ENUM('Fisica', 'Juridica') NOT NULL DEFAULT 'Fisica' COMMENT 'Informa o tipo de pessoa, que pode ser física ou jurídica[N:Tipo][G:o][E:Física|Jurídica][S:S]',
  `EmpresaID` INT NULL DEFAULT NULL COMMENT 'Informa se esse cliente faz parte da empresa informada[N:Empresa][G:o][S:S]',
  `Login` VARCHAR(50) NULL COMMENT 'Nome de usuário utilizado para entrar no sistema, aplicativo ou site[N:Login][G:o]',
  `Senha` VARCHAR(255) NULL DEFAULT NULL COMMENT 'Senha embaralhada do cliente[N:Senha][G:a][P]',
  `Nome` VARCHAR(100) NOT NULL COMMENT 'Primeiro nome da pessoa física ou nome fantasia da empresa[N:Nome][G:o][S]',
  `Sobrenome` VARCHAR(100) NULL DEFAULT NULL COMMENT 'Restante do nome da pessoa física ou Razão social da empresa[N:Sobrenome][G:o]',
  `Genero` ENUM('Masculino', 'Feminino') NULL DEFAULT 'Masculino' COMMENT 'Informa o gênero do cliente do tipo pessoa física[N:Gênero][G:o][S:S][R]',
  `CPF` VARCHAR(20) NULL DEFAULT NULL COMMENT 'Cadastro de Pessoa Física(CPF) ou Cadastro Nacional de Pessoa Jurídica(CNPJ)[M:999.999.999-99][N:CPF][G:o]',
  `RG` VARCHAR(20) NULL DEFAULT NULL COMMENT 'Registro Geral(RG) ou Inscrição Estadual (IE)[N:Registro Geral][G:o]',
  `IM` VARCHAR(20) NULL DEFAULT NULL COMMENT 'Inscrição municipal da empresa[N:Inscrição municipal][G:a]',
  `Email` VARCHAR(100) NULL DEFAULT NULL COMMENT 'E-mail do cliente ou da empresa[N:E-mail][G:o]',
  `DataAniversario` DATE NULL DEFAULT NULL COMMENT 'Data de aniversário sem o ano ou data de fundação[N:Data de aniversário][G:a] ',
  `Slogan` VARCHAR(100) NULL DEFAULT NULL COMMENT 'Slogan ou detalhes do cliente[N:Observação][G:a]',
  `Status` ENUM('Ativo', 'Inativo', 'Bloqueado') NOT NULL DEFAULT 'Ativo' COMMENT 'Informa o estado da conta do cliente[G:o][N:Status]',
  `Secreto` VARCHAR(40) NULL DEFAULT NULL COMMENT 'Código secreto para recuperar a conta do cliente[N:Código de recuperação][G:o][D]',
  `Salt` VARCHAR(100) NULL DEFAULT NULL COMMENT 'Se informado, significa que a senha é segura[G:o][N:Código de segurança][D]',
  `LimiteCompra` DECIMAL(19,4) NULL DEFAULT NULL COMMENT 'Limite de compra utilizando a forma de pagamento Conta[N:Limite de compra][G:o]',
  `InstagramURL` VARCHAR(200) NULL DEFAULT NULL COMMENT 'URL para acessar a página do Instagram do cliente[N:Instagram][G:o]',
  `FacebookURL` VARCHAR(200) NULL DEFAULT NULL COMMENT 'URL para acessar a página do Facebook do cliente[N:Facebook][G:o]',
  `TwitterURL` VARCHAR(200) NULL DEFAULT NULL COMMENT 'URL para acessar a página do Twitter do cliente[N:Twitter][G:o]',
  `LinkedInURL` VARCHAR(200) NULL DEFAULT NULL COMMENT 'URL para acessar a página do LinkedIn do cliente[N:LinkedIn][G:o]',
  `ImagemURL` VARCHAR(100) NULL DEFAULT NULL COMMENT 'Foto do cliente ou logo da empresa[I:256x256|cliente|cliente.png][N:Foto][G:a]',
  `Linguagem` VARCHAR(20) NULL DEFAULT NULL COMMENT 'Código da linguagem utilizada pelo cliente para visualizar o aplicativo e o site, Ex: pt-BR[N:Linguagem][G:a]',
  `DataAtualizacao` DATETIME NOT NULL COMMENT 'Data de atualização das informações do cliente[N:Data de atualização][G:a][D]',
  `DataCadastro` DATETIME NOT NULL COMMENT 'Data de cadastro do cliente[N:Data de cadastro][G:a][D]',
  PRIMARY KEY (`ID`),
  UNIQUE INDEX `Email_UNIQUE` (`Email` ASC),
  INDEX `Nome_INDEX` (`Nome` ASC),
  UNIQUE INDEX `CPF_UNIQUE` (`CPF` ASC),
  UNIQUE INDEX `Login_UNIQUE` (`Login` ASC),
  UNIQUE INDEX `Secreto_UNIQUE` (`Secreto` ASC),
  INDEX `FK_Clientes_Clientes_AcionistaID_idx` (`EmpresaID` ASC),
  CONSTRAINT `FK_Clientes_Clientes_AcionistaID`
    FOREIGN KEY (`EmpresaID`)
    REFERENCES `Clientes` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB
COMMENT = 'Informações de cliente físico ou jurídico. Clientes, empresas, funcionários, fornecedores e parceiros são cadastrados aqui[N:Cliente|Clientes][G:o][L:CadastroClientes][K:MZ\\Account|MZ\\Account\\][H:SyncModel]';


-- -----------------------------------------------------
-- Table `Prestadores`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Prestadores` ;

CREATE TABLE IF NOT EXISTS `Prestadores` (
  `ID` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador do prestador[G:o]',
  `Codigo` INT NOT NULL COMMENT 'Código do prestador[N:Código][G:o]',
  `FuncaoID` INT NOT NULL COMMENT 'Função do prestada na empresa[N:Função][G:a][S:S]',
  `ClienteID` INT NOT NULL COMMENT 'Cliente que representa esse prestador, único no cadastro de prestadores[N:Cliente][G:o][S]',
  `PrestadorID` INT NULL DEFAULT NULL COMMENT 'Informa a empresa que gerencia os colaboradores, nulo para a empresa do próprio estabelecimento[G:o][N:Prestador]',
  `Vinculo` ENUM('Funcionario', 'Prestador', 'Autonomo') NOT NULL DEFAULT 'Funcionario' COMMENT 'Vínculo empregatício com a empresa, funcionário e autônomo são pessoas físicas, prestador é pessoa jurídica[G:o][N:Vínculo][E:Funcionário|Prestador|Autônomo]',
  `CodigoBarras` VARCHAR(13) NULL DEFAULT NULL COMMENT 'Código de barras utilizado pelo prestador para autorizar uma operação no sistema[N:Código de barras][G:o]',
  `Porcentagem` DOUBLE NOT NULL DEFAULT 0 COMMENT 'Porcentagem cobrada pelo funcionário ou autônomo ao cliente, Ex.: Comissão de 10% [N:Comissão][G:a]',
  `Pontuacao` INT NOT NULL DEFAULT 0 COMMENT 'Define a distribuição da porcentagem pela parcela de pontos[N:Pontuação][G:a]',
  `Ativo` ENUM('Y', 'N') NOT NULL DEFAULT 'Y' COMMENT 'Informa se o prestador está ativo na empresa[N:Ativo][G:o]',
  `Remuneracao` DECIMAL(19,4) NOT NULL DEFAULT 0 COMMENT 'Remuneracao pelas atividades exercidas, não está incluso comissões[N:Remuneração][G:a]',
  `DataTermino` DATETIME NULL DEFAULT NULL COMMENT 'Data de término de contrato, informado apenas quando ativo for não[N:Data de término de contrato][G:a][D]',
  `DataCadastro` DATETIME NOT NULL COMMENT 'Data em que o prestador de serviços foi cadastrado no sistema[N:Data de cadastro][G:a][D]',
  PRIMARY KEY (`ID`),
  INDEX `FK_Prestadores_Funcoes_FuncaoID_idx` (`FuncaoID` ASC),
  UNIQUE INDEX `ClienteID_UNIQUE` (`ClienteID` ASC),
  UNIQUE INDEX `CodigoBarras_UNIQUE` (`CodigoBarras` ASC),
  INDEX `FK_Prestadores_Prestadores_PrestadorID_idx` (`PrestadorID` ASC),
  UNIQUE INDEX `Codigo_UNIQUE` (`Codigo` ASC),
  CONSTRAINT `FK_Prestadores_Funcoes_FuncaoID`
    FOREIGN KEY (`FuncaoID`)
    REFERENCES `Funcoes` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Prestadores_Clientes_ClienteID`
    FOREIGN KEY (`ClienteID`)
    REFERENCES `Clientes` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Prestadores_Prestadores_PrestadorID`
    FOREIGN KEY (`PrestadorID`)
    REFERENCES `Prestadores` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB
COMMENT = 'Prestador de serviço que realiza alguma tarefa na empresa[N:Prestador|Prestadores][G:o][L:CadastroPrestadores][K:MZ\\Provider|MZ\\Provider\\][H:SyncModel]';


-- -----------------------------------------------------
-- Table `Moedas`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Moedas` ;

CREATE TABLE IF NOT EXISTS `Moedas` (
  `ID` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador da moeda[G:o]',
  `Nome` VARCHAR(45) NOT NULL COMMENT 'Nome da moeda[N:Nome][G:o][S]',
  `Simbolo` VARCHAR(10) NOT NULL COMMENT 'Símbolo da moeda, Ex.: R$, $[N:Símbolo][G:o]',
  `Codigo` VARCHAR(45) NOT NULL COMMENT 'Código internacional da moeda, Ex.: USD, BRL[N:Código][G:o]',
  `Divisao` INT NOT NULL COMMENT 'Informa o número fracionário para determinar a quantidade de casas decimais, Ex: 100 para 0,00. 10 para 0,0[N:Divisão][G:a]',
  `Fracao` VARCHAR(45) NULL DEFAULT NULL COMMENT 'Informa o nome da fração, Ex.: Centavo[N:Nome da fração][G:o]',
  `Formato` VARCHAR(45) NOT NULL COMMENT 'Formado de exibição do valor, Ex: $ %s, para $ 3,00[N:Formato][G:o]',
  `Conversao` DOUBLE NULL DEFAULT NULL COMMENT 'Multiplicador para conversão para a moeda principal[G:a][N:Conversão]',
  `DataAtualizacao` DATETIME NULL DEFAULT NULL COMMENT 'Data da última atualização do fator de conversão[G:a][N:Data de atualização]',
  `Ativa` ENUM('Y', 'N') NOT NULL DEFAULT 'N' COMMENT 'Informa se a moeda é recebida pela empresa, a moeda do país mesmo desativada sempre é aceita[G:a][N:Ativa]',
  PRIMARY KEY (`ID`))
ENGINE = InnoDB
COMMENT = 'Moedas financeiras de um país[N:Moeda|Moedas][G:a][L:CadastroMoedas][K:MZ\\Wallet|MZ\\Wallet\\][H:SyncModel]';


-- -----------------------------------------------------
-- Table `Paises`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Paises` ;

CREATE TABLE IF NOT EXISTS `Paises` (
  `ID` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador do país[G:o]',
  `Nome` VARCHAR(100) NOT NULL COMMENT 'Nome do país[N:Nome][G:o][S]',
  `Sigla` VARCHAR(10) NOT NULL COMMENT 'Abreviação do nome do país[N:Sigla][G:a]',
  `Codigo` VARCHAR(10) NOT NULL COMMENT 'Código do país com 2 letras[G:o][N:Código]',
  `MoedaID` INT NOT NULL COMMENT 'Informa a moeda principal do país[N:Moeda][G:a]',
  `Idioma` VARCHAR(10) NOT NULL COMMENT 'Idioma nativo do país[N:Código do idioma][G:o]',
  `Prefixo` VARCHAR(45) NULL DEFAULT NULL COMMENT 'Prefixo de telefone para ligações internacionais[G:o][N:Prefixo]',
  `Entradas` TEXT NULL DEFAULT NULL COMMENT 'Frases, nomes de campos e máscaras específicas do país[N:Entrada][G:a]',
  `Unitario` ENUM('Y', 'N') NOT NULL DEFAULT 'N' COMMENT 'Informa se o país tem apenas um estado federativo[N:Unitário][G:o][F:\'N\']',
  PRIMARY KEY (`ID`),
  UNIQUE INDEX `Nome_UNIQUE` (`Nome` ASC),
  INDEX `FK_Paises_Moedas_MoedaID_idx` (`MoedaID` ASC),
  UNIQUE INDEX `Sigla_UNIQUE` (`Sigla` ASC),
  UNIQUE INDEX `Codigo_UNIQUE` (`Codigo` ASC),
  CONSTRAINT `FK_Paises_Moedas_MoedaID`
    FOREIGN KEY (`MoedaID`)
    REFERENCES `Moedas` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB
COMMENT = 'Informações de um páis com sua moeda e língua nativa[N:País|Paises][G:o][L:CadastroPaises][K:MZ\\Location|MZ\\Location\\][H:SyncModel]';


-- -----------------------------------------------------
-- Table `Estados`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Estados` ;

CREATE TABLE IF NOT EXISTS `Estados` (
  `ID` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador do estado[G:o]',
  `PaisID` INT NOT NULL COMMENT 'País a qual esse estado pertence[N:País][G:o][S:S]',
  `Nome` VARCHAR(64) NOT NULL COMMENT 'Nome do estado[N:Nome][G:o][S]',
  `UF` VARCHAR(48) NOT NULL COMMENT 'Sigla do estado[N:UF]',
  PRIMARY KEY (`ID`),
  UNIQUE INDEX `PaisID_Nome_UNIQUE` (`PaisID` ASC, `Nome` ASC),
  UNIQUE INDEX `PaisID_UF_UNIQUE` (`PaisID` ASC, `UF` ASC),
  CONSTRAINT `FK_Estados_Paises_PaisID`
    FOREIGN KEY (`PaisID`)
    REFERENCES `Paises` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB
COMMENT = 'Estado federativo de um país[N:Estado|Estados][G:o][L:CadastroEstados][K:MZ\\Location|MZ\\Location\\][H:SyncModel]';


-- -----------------------------------------------------
-- Table `Cidades`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Cidades` ;

CREATE TABLE IF NOT EXISTS `Cidades` (
  `ID` INT NOT NULL AUTO_INCREMENT COMMENT 'Código que identifica a cidade[G:o]',
  `EstadoID` INT NOT NULL COMMENT 'Informa a qual estado a cidade pertence[N:Estado][G:o]',
  `Nome` VARCHAR(100) NOT NULL COMMENT 'Nome da cidade, é único para cada estado[S][N:Nome][G:o]',
  `CEP` VARCHAR(8) NULL DEFAULT NULL COMMENT 'Código dos correios para identificação da cidade[M:99999-999][G:o][N:CEP]',
  PRIMARY KEY (`ID`),
  INDEX `FK_Cidades_Estados_EstadoID_idx` (`EstadoID` ASC),
  UNIQUE INDEX `EstadoID_Nome_UNIQUE` (`EstadoID` ASC, `Nome` ASC),
  UNIQUE INDEX `CEP_UNIQUE` (`CEP` ASC),
  CONSTRAINT `FK_Cidades_Estados_EstadoID`
    FOREIGN KEY (`EstadoID`)
    REFERENCES `Estados` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB
COMMENT = 'Cidade de um estado, contém bairros[N:Cidade|Cidades][G:a][L:CadastroCidades][K:MZ\\Location|MZ\\Location\\][H:SyncModel]';


-- -----------------------------------------------------
-- Table `Bairros`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Bairros` ;

CREATE TABLE IF NOT EXISTS `Bairros` (
  `ID` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador do bairro[G:o]',
  `CidadeID` INT NOT NULL COMMENT 'Cidade a qual o bairro pertence[N:Cidade][G:a][S:S]',
  `Nome` VARCHAR(100) NOT NULL COMMENT 'Nome do bairro[N:Nome][G:o][S]',
  `ValorEntrega` DECIMAL(19,4) NOT NULL COMMENT 'Valor cobrado para entregar um pedido nesse bairro[N:Valor da entrega][G:o]',
  `Disponivel` ENUM('Y', 'N') NOT NULL DEFAULT 'Y' COMMENT 'Informa se o bairro está disponível para entrega de pedidos[N:Disponível][G:o][F:\'Y\']',
  `Mapeado` ENUM('Y', 'N') NOT NULL DEFAULT 'N' COMMENT 'Informa se o bairro está mapeado por zonas e se é obrigatório selecionar uma zona',
  `TempoEntrega` INT NULL DEFAULT NULL COMMENT 'Tempo médio de entrega para esse bairro[N:Tempo de entrega][G:o]',
  PRIMARY KEY (`ID`),
  UNIQUE INDEX `CidadeID_Nome_UNIQUE` (`CidadeID` ASC, `Nome` ASC),
  INDEX `FK_Bairros_Cidades_CidadeID_idx` (`CidadeID` ASC),
  CONSTRAINT `FK_Bairros_Cidades_CidadeID`
    FOREIGN KEY (`CidadeID`)
    REFERENCES `Cidades` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB
COMMENT = 'Bairro de uma cidade[N:Bairro|Bairros][G:o][L:CadastroBairros][K:MZ\\Location|MZ\\Location\\][H:SyncModel]';


-- -----------------------------------------------------
-- Table `Zonas`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Zonas` ;

CREATE TABLE IF NOT EXISTS `Zonas` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `BairroID` INT NOT NULL,
  `Nome` VARCHAR(45) NOT NULL,
  `AdicionalEntrega` DECIMAL(19,4) NOT NULL,
  `Disponivel` ENUM('Y', 'N') NOT NULL DEFAULT 'Y' COMMENT 'Informa se a zona está disponível para entrega de pedidos[N:Disponível][G:o]',
  `Area` TEXT NULL,
  `TempoEntrega` INT NULL DEFAULT NULL COMMENT 'Tempo médio de entrega para essa zona, sobrescreve o tempo de entrega para o bairro[N:Tempo de entrega][G:o]',
  PRIMARY KEY (`ID`),
  INDEX `FK_Zonas_Bairros_BairroID_idx` (`BairroID` ASC),
  UNIQUE INDEX `BairroID_Nome_UNIQUE` (`BairroID` ASC, `Nome` ASC),
  CONSTRAINT `FK_Zonas_Bairros_BairroID`
    FOREIGN KEY (`BairroID`)
    REFERENCES `Bairros` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB
COMMENT = 'Zonas de um bairro[N:Zona|Zonas][G:a][L:CadastroBairros][K:MZ\\Location|MZ\\Location\\][H:SyncModel]';


-- -----------------------------------------------------
-- Table `Localizacoes`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Localizacoes` ;

CREATE TABLE IF NOT EXISTS `Localizacoes` (
  `ID` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador do endereço[G:o]',
  `ClienteID` INT NOT NULL COMMENT 'Cliente a qual esse endereço pertence[N:Cliente][G:o][S:S]',
  `BairroID` INT NOT NULL COMMENT 'Bairro do endereço[N:Bairro][G:o][S:S]',
  `ZonaID` INT NULL DEFAULT NULL COMMENT 'Informa a zona do bairro',
  `CEP` VARCHAR(8) NULL DEFAULT NULL COMMENT 'Código dos correios para identificar um logradouro[M:99999-999][N:CEP][G:o]',
  `Logradouro` VARCHAR(100) NOT NULL COMMENT 'Nome da rua ou avenida[N:Logradouro][G:o][S]',
  `Numero` VARCHAR(20) NOT NULL COMMENT 'Número da casa ou do condomínio[N:Número][G:o]',
  `Tipo` ENUM('Casa', 'Apartamento', 'Condominio') NOT NULL DEFAULT 'Casa' COMMENT 'Tipo de endereço Casa ou Apartamento[N:Tipo][G:o][F:self::TIPO_CASA][E:Casa|Apartamento|Condomínio]',
  `Complemento` VARCHAR(100) NULL DEFAULT NULL COMMENT 'Complemento do endereço, Ex.: Loteamento Sul[N:Complemento][G:o]',
  `Condominio` VARCHAR(100) NULL DEFAULT NULL COMMENT 'Nome do condomínio[N:Condomínio][G:o]',
  `Bloco` VARCHAR(20) NULL DEFAULT NULL COMMENT 'Número do bloco quando for apartamento[N:Bloco][G:o]',
  `Apartamento` VARCHAR(20) NULL DEFAULT NULL COMMENT 'Número do apartamento[N:Apartamento][G:o]',
  `Referencia` VARCHAR(200) NULL DEFAULT NULL COMMENT 'Ponto de referência para chegar ao local[N:Referência][G:a]',
  `Latitude` DOUBLE NULL DEFAULT NULL COMMENT 'Ponto latitudinal para localização em um mapa[N:Latitude][G:a]',
  `Longitude` DOUBLE NULL DEFAULT NULL COMMENT 'Ponto longitudinal para localização em um mapa[N:Longitude][G:a]',
  `Apelido` VARCHAR(45) NULL DEFAULT NULL COMMENT 'Ex.: Minha Casa, Casa da Amiga[N:Apelido][G:o]',
  `Mostrar` ENUM('Y', 'N') NOT NULL DEFAULT 'Y' COMMENT 'Permite esconder ou exibir um endereço do cliente[N:Mostrar][G:o][F:\'Y\']',
  PRIMARY KEY (`ID`),
  INDEX `FK_Localizacoes_Clientes_ClienteID_ID_idx` (`ClienteID` ASC),
  UNIQUE INDEX `UK_Localizacoes_ClienteID_Apelido` (`ClienteID` ASC, `Apelido` ASC),
  INDEX `FK_Localizacoes_Bairros_idx` (`BairroID` ASC),
  INDEX `FK_Localizacoes_Zonas_ZonaID_idx` (`ZonaID` ASC),
  CONSTRAINT `FK_Localizacoes_Clientes_ClienteID`
    FOREIGN KEY (`ClienteID`)
    REFERENCES `Clientes` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Localizacoes_Bairros`
    FOREIGN KEY (`BairroID`)
    REFERENCES `Bairros` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Localizacoes_Zonas_ZonaID`
    FOREIGN KEY (`ZonaID`)
    REFERENCES `Zonas` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB
COMMENT = 'Endereço detalhado de um cliente[N:Localização|Localizações][G:a][L:CadastroClientes][K:MZ\\Location|MZ\\Location\\][H:SyncModel]';


-- -----------------------------------------------------
-- Table `Comandas`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Comandas` ;

CREATE TABLE IF NOT EXISTS `Comandas` (
  `ID` INT NOT NULL AUTO_INCREMENT COMMENT 'Número da comanda[N:Número][G:o]',
  `Numero` INT NOT NULL COMMENT 'Número da comanda[G:o][N:Número]',
  `Nome` VARCHAR(50) NOT NULL COMMENT 'Nome da comanda[N:Nome][G:o][S]',
  `Ativa` ENUM('Y', 'N') NOT NULL DEFAULT 'Y' COMMENT 'Informa se a comanda está diponível para ser usada nas vendas[N:Ativa][G:a]',
  PRIMARY KEY (`ID`),
  UNIQUE INDEX `Nome_UNIQUE` (`Nome` ASC),
  UNIQUE INDEX `Numero_UNIQUE` (`Numero` ASC))
ENGINE = InnoDB
COMMENT = 'Comanda individual, permite lançar pedidos em cartões de consumo[N:Comanda|Comandas][G:a][L:CadastroComandas][K:MZ\\Sale|MZ\\Sale\\][H:SyncModel]';


-- -----------------------------------------------------
-- Table `Viagens`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Viagens` ;

CREATE TABLE IF NOT EXISTS `Viagens` (
  `ID` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador da viagem[G:o]',
  `ResponsavelID` INT NOT NULL COMMENT 'Responsável pela entrega ou compra[N:Responsável][G:o][S:S]',
  `Latitude` DOUBLE NULL DEFAULT NULL COMMENT 'Ponto latitudinal para localização do responsável em tempo real[N:Latitude][G:a]',
  `Longitude` DOUBLE NULL DEFAULT NULL COMMENT 'Ponto longitudinal para localização do responsável em tempo real[N:Longitude][G:a]',
  `Quilometragem` DOUBLE NULL DEFAULT NULL COMMENT 'Quilometragem no veículo antes de iniciar a viagem[G:a][N:Quilometragem]',
  `Distancia` DOUBLE NULL DEFAULT NULL COMMENT 'Distância percorrida até chegar de volta ao ponto de partida[G:a][N:Distância]',
  `DataAtualizacao` DATETIME NULL DEFAULT NULL COMMENT 'Data de atualização da localização do responsável[G:a][N:Data de atualização]',
  `DataChegada` DATETIME NULL DEFAULT NULL COMMENT 'Data de chegada no estabelecimento[G:a][N:Data de chegada]',
  `DataSaida` DATETIME NOT NULL COMMENT 'Data e hora que o responsável saiu para entregar o pedido ou fazer as compras[N:Data de saida][G:a]',
  PRIMARY KEY (`ID`),
  INDEX `FK_Entregas_Prestadores_ResponsavelID_idx` (`ResponsavelID` ASC),
  CONSTRAINT `FK_Entregas_Prestadores_ResponsavelID`
    FOREIGN KEY (`ResponsavelID`)
    REFERENCES `Prestadores` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB
COMMENT = 'Registro de viagem de uma entrega ou compra de insumos[N:Viagem|Viagens][G:a][L:Pagamento][K:MZ\\Location|MZ\\Location\\][H:SyncModel]';


-- -----------------------------------------------------
-- Table `Pedidos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Pedidos` ;

CREATE TABLE IF NOT EXISTS `Pedidos` (
  `ID` INT NOT NULL AUTO_INCREMENT COMMENT 'Código do pedido[N:Código][G:o]',
  `PedidoID` INT NULL DEFAULT NULL COMMENT 'Informa o pedido da mesa / comanda principal quando as mesas / comandas forem agrupadas[G:o][N:Pedido principal]',
  `MesaID` INT NULL DEFAULT NULL COMMENT 'Identificador da mesa, único quando o pedido não está fechado[N:Mesa][G:a][S:S]',
  `ComandaID` INT NULL DEFAULT NULL COMMENT 'Identificador da comanda, único quando o pedido não está fechado[N:Comanda][G:a][S:S]',
  `SessaoID` INT NULL DEFAULT NULL COMMENT 'Identificador da sessão de vendas[N:Sessão][G:a][S:S]',
  `PrestadorID` INT NULL DEFAULT NULL COMMENT 'Prestador que criou esse pedido[N:Prestador][G:o][S:S]',
  `ClienteID` INT NULL DEFAULT NULL COMMENT 'Identificador do cliente do pedido[N:Cliente][G:o][S:S]',
  `LocalizacaoID` INT NULL DEFAULT NULL COMMENT 'Endereço de entrega do pedido, se não informado na venda entrega, o pedido será para viagem[N:Localização][G:a][S:S]',
  `EntregaID` INT NULL COMMENT 'Informa em qual entrega esse pedido foi despachado[G:a][N:Entrega]',
  `Tipo` ENUM('Mesa', 'Comanda', 'Avulso', 'Entrega') NOT NULL DEFAULT 'Mesa' COMMENT 'Tipo de venda[N:Tipo][G:o][E:Mesa|Comanda|Balcão|Entrega][S:S]',
  `Estado` ENUM('Finalizado', 'Ativo', 'Agendado', 'Entrega', 'Fechado') NOT NULL DEFAULT 'Ativo' COMMENT 'Estado do pedido, Agendado: O pedido deve ser processado na data de agendamento. Ativo: O pedido deve ser processado. Fechado: O cliente pediu a conta e está pronto para pagar. Entrega: O pedido saiu para entrega. Finalizado: O pedido foi pago e concluído[N:Estado][G:o]',
  `Servicos` DECIMAL(19,4) NOT NULL DEFAULT 0 COMMENT 'Valor total dos serviços desse pedido[G:o][N:Total dos serviços][F:0]',
  `Produtos` DECIMAL(19,4) NOT NULL DEFAULT 0 COMMENT 'Valor total dos produtos do pedido sem a comissão[G:o][N:Total dos produtos][F:0]',
  `Comissao` DECIMAL(19,4) NOT NULL DEFAULT 0 COMMENT 'Valor total da comissão desse pedido[G:o][N:Total da comissão][F:0]',
  `Subtotal` DECIMAL(19,4) NOT NULL DEFAULT 0 COMMENT 'Subtotal do pedido sem os descontos[G:o][N:Subtotal][F:0]',
  `Descontos` DECIMAL(19,4) NOT NULL DEFAULT 0 COMMENT 'Total de descontos realizado nesse pedido[G:o][N:Descontos][F:0]',
  `Total` DECIMAL(19,4) NOT NULL DEFAULT 0 COMMENT 'Total do pedido já com descontos[G:o][N:Total][F:0]',
  `Pago` DECIMAL(19,4) NOT NULL DEFAULT 0 COMMENT 'Valor já pago do pedido[G:o][N:Total pago][F:0]',
  `Lancado` DECIMAL(19,4) NOT NULL DEFAULT 0 COMMENT 'Valor lançado para pagar, mas não foi pago ainda[G:o][N:Total lançado][F:0]',
  `Pessoas` INT NOT NULL DEFAULT 1 COMMENT 'Informa quantas pessoas estão na mesa[N:Pessoas][G:a]',
  `Descricao` VARCHAR(255) NULL DEFAULT NULL COMMENT 'Detalhes da reserva ou do pedido[N:Descrição][G:a]',
  `FechadorID` INT NULL DEFAULT NULL COMMENT 'Informa quem fechou o pedido e imprimiu a conta[N:Fechador do pedido][G:o][S:S]',
  `DataImpressao` DATETIME NULL DEFAULT NULL COMMENT 'Data de impressão da conta do cliente[N:Data de impressão][G:a]',
  `Cancelado` ENUM('Y', 'N') NOT NULL DEFAULT 'N' COMMENT 'Informa se o pedido foi cancelado[N:Cancelado][G:o]',
  `Motivo` VARCHAR(200) NULL DEFAULT NULL COMMENT 'Informa o motivo do cancelamento[G:o][N:Motivo]',
  `DataEntrega` DATETIME NULL DEFAULT NULL COMMENT 'Data e hora que o entregador concluiu a entrega desse pedido[N:Data de entrega][G:a]',
  `DataAgendamento` DATETIME NULL DEFAULT NULL COMMENT 'Data de agendamento do pedido[N:Data de agendamento][G:a]',
  `DataConclusao` DATETIME NULL DEFAULT NULL COMMENT 'Data de finalização do pedido[N:Data de conclusão][G:a]',
  `DataCriacao` DATETIME NOT NULL COMMENT 'Data de criação do pedido[N:Data de criação][G:a]',
  PRIMARY KEY (`ID`),
  INDEX `FK_Pedidos_Mesas_MesaID_idx` (`MesaID` ASC),
  INDEX `FK_Pedidos_Sessoes_SessaoID_idx` (`SessaoID` ASC),
  INDEX `FK_Pedidos_Prestadores_PrestadorID_idx` (`PrestadorID` ASC),
  INDEX `FK_Pedidos_Clientes_ClienteID_idx` (`ClienteID` ASC),
  INDEX `IDX_Tipo_Estado` (`Tipo` ASC, `Estado` ASC),
  INDEX `FK_Pedidos_Localizacoes_LocalizacaoID_idx` (`LocalizacaoID` ASC),
  INDEX `FK_Pedidos_Comandas_ComandaID_idx` (`ComandaID` ASC),
  INDEX `FK_Pedidos_Prestadores_FechadorID_idx` (`FechadorID` ASC),
  INDEX `FK_Pedidos_Viagens_EntregaID_idx` (`EntregaID` ASC),
  INDEX `IDX_DataCriacao` (`DataCriacao` DESC),
  INDEX `FK_Pedidos_Pedidos_PedidoID_idx` (`PedidoID` ASC),
  CONSTRAINT `FK_Pedidos_Mesas_MesaID`
    FOREIGN KEY (`MesaID`)
    REFERENCES `Mesas` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Pedidos_Sessoes_SessaoID`
    FOREIGN KEY (`SessaoID`)
    REFERENCES `Sessoes` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Pedidos_Prestadores_PrestadorID`
    FOREIGN KEY (`PrestadorID`)
    REFERENCES `Prestadores` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Pedidos_Clientes_ClienteID`
    FOREIGN KEY (`ClienteID`)
    REFERENCES `Clientes` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Pedidos_Localizacoes_LocalizacaoID`
    FOREIGN KEY (`LocalizacaoID`)
    REFERENCES `Localizacoes` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Pedidos_Comandas_ComandaID`
    FOREIGN KEY (`ComandaID`)
    REFERENCES `Comandas` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Pedidos_Prestadores_FechadorID`
    FOREIGN KEY (`FechadorID`)
    REFERENCES `Prestadores` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Pedidos_Viagens_EntregaID`
    FOREIGN KEY (`EntregaID`)
    REFERENCES `Viagens` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Pedidos_Pedidos_PedidoID`
    FOREIGN KEY (`PedidoID`)
    REFERENCES `Pedidos` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB
COMMENT = 'Informações do pedido de venda[N:Pedido|Pedidos][G:o][L:Pagamento][K:MZ\\Sale|MZ\\Sale\\][H:SyncModel]';


-- -----------------------------------------------------
-- Table `Categorias`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Categorias` ;

CREATE TABLE IF NOT EXISTS `Categorias` (
  `ID` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador da categoria[G:o]',
  `CategoriaID` INT NULL DEFAULT NULL COMMENT 'Informa a categoria pai da categoria atual, a categoria atual é uma subcategoria[N:Categoria superior][G:a][S:S]',
  `Descricao` VARCHAR(45) NOT NULL COMMENT 'Descrição da categoria. Ex.: Refrigerantes, Salgados[N:Descrição][G:a][S]',
  `Detalhes` VARCHAR(200) NULL DEFAULT NULL COMMENT 'Informa os detalhes gerais dos produtos dessa categoria[G:o][N:Detalhes]',
  `Servico` ENUM('Y', 'N') NOT NULL COMMENT 'Informa se a categoria é destinada para produtos ou serviços[N:Serviço][G:o]',
  `ImagemURL` VARCHAR(100) NULL DEFAULT NULL COMMENT 'Imagem representativa da categoria[N:Imagem][G:a][I:256x256|categoria|categoria.png]',
  `Ordem` INT NOT NULL DEFAULT 0 COMMENT 'Informa a ordem de exibição das categorias nas vendas[G:a][N:Ordem][F:0]',
  `DataAtualizacao` DATETIME NOT NULL COMMENT 'Data de atualização das informações da categoria[N:Data de atualização][G:a]',
  `DataArquivado` DATETIME NULL DEFAULT NULL COMMENT 'Data em que a categoria foi arquivada e não será mais usada[G:a][N:Data de arquivação]',
  PRIMARY KEY (`ID`),
  UNIQUE INDEX `Descricao_UNIQUE` (`Descricao` ASC),
  INDEX `FK_Categorias_Categorias_CategoriaID_idx` (`CategoriaID` ASC),
  CONSTRAINT `FK_Categorias_Categorias_CategoriaID`
    FOREIGN KEY (`CategoriaID`)
    REFERENCES `Categorias` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB
COMMENT = 'Informa qual a categoria dos produtos e permite a rápida localização dos mesmos[N:Categoria|Categorias][G:a][L:CadastroProdutos][K:MZ\\Product|MZ\\Product\\][H:SyncModel]';


-- -----------------------------------------------------
-- Table `Unidades`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Unidades` ;

CREATE TABLE IF NOT EXISTS `Unidades` (
  `ID` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador da unidade[G:o]',
  `Nome` VARCHAR(45) NOT NULL COMMENT 'Nome da unidade de medida, Ex.: Grama, Quilo[N:Nome][G:o][S]',
  `Descricao` VARCHAR(45) NULL DEFAULT NULL COMMENT 'Detalhes sobre a unidade de medida[N:Descrição][G:a]',
  `Sigla` VARCHAR(10) NOT NULL COMMENT 'Sigla da unidade de medida, Ex.: UN, L, g[N:Sigla][G:a]',
  PRIMARY KEY (`ID`),
  UNIQUE INDEX `Sigla_UNIQUE` (`Sigla` ASC))
ENGINE = InnoDB
COMMENT = 'Unidades de medidas aplicadas aos produtos[N:Unidade|Unidades][G:a][L:CadastroProdutos][K:MZ\\Product|MZ\\Product\\][H:SyncModel]';


-- -----------------------------------------------------
-- Table `Origens`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Origens` ;

CREATE TABLE IF NOT EXISTS `Origens` (
  `ID` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador da origem[G:o]',
  `Codigo` INT NOT NULL COMMENT 'Código da origem da mercadoria[G:o][N:Código]',
  `Descricao` VARCHAR(200) NOT NULL COMMENT 'Descrição da origem da mercadoria[G:a][N:Descrição]',
  PRIMARY KEY (`ID`),
  UNIQUE INDEX `Codigo_UNIQUE` (`Codigo` ASC))
ENGINE = InnoDB
COMMENT = 'Origem da mercadoria[N:Origem|Origens][G:a][L:CadastroProdutos][K:MZ\\Invoice|MZ\\Invoice\\][H:SyncModel]';


-- -----------------------------------------------------
-- Table `Operacoes`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Operacoes` ;

CREATE TABLE IF NOT EXISTS `Operacoes` (
  `ID` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador da operação[G:o]',
  `Codigo` INT NOT NULL COMMENT 'Código CFOP sem pontuação[G:o][N:Código]',
  `Descricao` VARCHAR(255) NOT NULL COMMENT 'Descrição da operação[G:a][N:Descrição]',
  `Detalhes` TEXT NULL DEFAULT NULL COMMENT 'Detalhes da operação (Opcional)[G:o][N:Detalhes]',
  PRIMARY KEY (`ID`),
  UNIQUE INDEX `Codigo_UNIQUE` (`Codigo` ASC))
ENGINE = InnoDB
COMMENT = 'Código Fiscal de Operações e Prestações (CFOP)[N:Operação|Operações][G:a][L:CadastroProdutos][K:MZ\\Invoice|MZ\\Invoice\\][H:SyncModel]';


-- -----------------------------------------------------
-- Table `Impostos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Impostos` ;

CREATE TABLE IF NOT EXISTS `Impostos` (
  `ID` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador do imposto[G:o]',
  `Grupo` ENUM('ICMS', 'PIS', 'COFINS', 'IPI', 'II') NOT NULL COMMENT 'Grupo do imposto[G:o][N:Grupo]',
  `Simples` ENUM('Y', 'N') NOT NULL COMMENT 'Informa se o imposto é do simples nacional[G:o][N:Simples nacional]',
  `Substituicao` ENUM('Y', 'N') NOT NULL COMMENT 'Informa se o imposto é por substituição tributária[G:a][N:Substituição tributária]',
  `Codigo` INT NOT NULL COMMENT 'Informa o código do imposto[G:o][N:Código]',
  `Descricao` VARCHAR(255) NOT NULL COMMENT 'Descrição do imposto[G:a][N:Descrição]',
  PRIMARY KEY (`ID`),
  UNIQUE INDEX `Grupo_Simples_Substituicao_Codigo_UNIQUE` (`Grupo` ASC, `Simples` ASC, `Substituicao` ASC, `Codigo` ASC))
ENGINE = InnoDB
COMMENT = 'Impostos disponíveis para informar no produto[N:Imposto|Impostos][G:o][L:CadastroProdutos][K:MZ\\Invoice|MZ\\Invoice\\][H:SyncModel]';


-- -----------------------------------------------------
-- Table `Tributacoes`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Tributacoes` ;

CREATE TABLE IF NOT EXISTS `Tributacoes` (
  `ID` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador da tributação[G:o]',
  `NCM` VARCHAR(10) NOT NULL COMMENT 'Código NCM (Nomenclatura Comum do Mercosul) do produto[G:o][N:NCM]',
  `CEST` VARCHAR(20) NULL DEFAULT NULL COMMENT 'Código CEST do produto (Opcional)[G:o][N:CEST]',
  `OrigemID` INT NOT NULL COMMENT 'Origem do produto[G:a][N:Origem]',
  `OperacaoID` INT NOT NULL COMMENT 'CFOP do produto[G:o][N:CFOP]',
  `ImpostoID` INT NOT NULL COMMENT 'Imposto do produto[G:o][N:Imposto]',
  PRIMARY KEY (`ID`),
  INDEX `FK_Tributacoes_Origens_OrigemID_idx` (`OrigemID` ASC),
  INDEX `FK_Tributacoes_Operacoes_OperacaoID_idx` (`OperacaoID` ASC),
  INDEX `FK_Tributacoes_Impostos_ImpostoID_idx` (`ImpostoID` ASC),
  CONSTRAINT `FK_Tributacoes_Origens_OrigemID`
    FOREIGN KEY (`OrigemID`)
    REFERENCES `Origens` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Tributacoes_Operacoes_OperacaoID`
    FOREIGN KEY (`OperacaoID`)
    REFERENCES `Operacoes` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Tributacoes_Impostos_ImpostoID`
    FOREIGN KEY (`ImpostoID`)
    REFERENCES `Impostos` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB
COMMENT = 'Informação tributária dos produtos[N:Tributação|Tributações][G:a][L:CadastroProdutos][K:MZ\\Invoice|MZ\\Invoice\\][H:SyncModel]';


-- -----------------------------------------------------
-- Table `Produtos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Produtos` ;

CREATE TABLE IF NOT EXISTS `Produtos` (
  `ID` INT NOT NULL AUTO_INCREMENT COMMENT 'Código do produto[G:o]',
  `Codigo` VARCHAR(100) NOT NULL COMMENT 'Código do produto podendo ser de barras ou aleatório, deve ser único entre todos os produtos[N:Código][G:o]',
  `CategoriaID` INT NOT NULL COMMENT 'Categoria do produto, permite a rápida localização ao utilizar tablets[N:Categoria][G:a][S:S]',
  `UnidadeID` INT NOT NULL COMMENT 'Informa a unidade do produtos, Ex.: Grama, Litro.[N:Unidade][G:a]',
  `SetorEstoqueID` INT NULL DEFAULT NULL COMMENT 'Informa de qual setor o produto será retirado após a venda[N:Setor de estoque][G:o]',
  `SetorPreparoID` INT NULL DEFAULT NULL COMMENT 'Informa em qual setor de preparo será enviado o ticket de preparo ou autorização, se nenhum for informado nada será impresso[N:Setor de preparo][G:o]',
  `TributacaoID` INT NULL DEFAULT NULL COMMENT 'Informações de tributação do produto[G:a][N:Tributação][S:S]',
  `Descricao` VARCHAR(75) NOT NULL COMMENT 'Descrição do produto, Ex.: Refri. Coca Cola 2L.[N:Descrição][G:a][S]',
  `Abreviacao` VARCHAR(100) NULL DEFAULT NULL COMMENT 'Nome abreviado do produto, Ex.: Cebola, Tomate, Queijo[N:Abreviação][G:a]',
  `Detalhes` VARCHAR(255) NULL DEFAULT NULL COMMENT 'Informa detalhes do produto, Ex: Com Cebola, Pimenta, Orégano[N:Detalhes][G:o]',
  `QuantidadeLimite` DOUBLE NOT NULL COMMENT 'Informa a quantidade limite para que o sistema avise que o produto já está acabando[N:Quantidade limite][G:a][F:0]',
  `QuantidadeMaxima` DOUBLE NOT NULL DEFAULT 0 COMMENT 'Informa a quantidade máxima do produto no estoque, não proibe, apenas avisa[N:Quantidade máxima][G:a][F:0]',
  `Conteudo` DOUBLE NOT NULL DEFAULT 1 COMMENT 'Informa o conteúdo do produto, Ex.: 2000 para 2L de conteúdo, 200 para 200g de peso ou 1 para 1 unidade[N:Conteúdo][G:o][F:1]',
  `PrecoVenda` DECIMAL(19,4) NOT NULL COMMENT 'Preço de venda ou preço de venda base para pacotes[N:Preço de venda][G:o][F:0]',
  `CustoProducao` DECIMAL(19,4) NULL DEFAULT NULL COMMENT 'Informa qual o valor para o custo de produção do produto, utilizado quando não há formação de composição do produto[N:Custo de produção][G:o]',
  `Tipo` ENUM('Produto', 'Composicao', 'Pacote') NOT NULL DEFAULT 'Produto' COMMENT 'Informa qual é o tipo de produto. Produto: Produto normal que possui estoque, Composição: Produto que não possui estoque diretamente, pois é composto de outros produtos ou composições, Pacote: Permite a composição no momento da venda, não possui estoque diretamente[N:Tipo][G:o][E:Produto|Composição|Pacote]',
  `CobrarServico` ENUM('Y', 'N') NOT NULL DEFAULT 'Y' COMMENT 'Informa se deve ser cobrado a taxa de serviço dos garçons sobre este produto[N:Cobrança de serviço][G:a]',
  `Divisivel` ENUM('Y', 'N') NOT NULL DEFAULT 'N' COMMENT 'Informa se o produto pode ser vendido fracionado[N:Divisível][G:o]',
  `Pesavel` ENUM('Y', 'N') NOT NULL DEFAULT 'N' COMMENT 'Informa se o peso do produto deve ser obtido de uma balança, obrigatoriamente o produto deve ser divisível[N:Pesável][G:o]',
  `Perecivel` ENUM('Y', 'N') NOT NULL DEFAULT 'N' COMMENT 'Informa se o produto vence em pouco tempo[N:Perecível][G:o]',
  `TempoPreparo` INT NOT NULL DEFAULT 0 COMMENT 'Tempo de preparo em minutos para preparar uma composição, 0 para não informado[N:Tempo de preparo][G:o][F:0]',
  `Visivel` ENUM('Y', 'N') NOT NULL DEFAULT 'Y' COMMENT 'Informa se o produto estará disponível para venda[N:Visível][G:o]',
  `Interno` ENUM('Y', 'N') NOT NULL DEFAULT 'N' COMMENT 'Informa se o produto é de uso interno e não está disponível para venda[N:Interno][G:o]',
  `Avaliacao` DOUBLE NULL DEFAULT NULL COMMENT 'Média das avaliações do último período[G:a][N:Avaliação]',
  `ImagemURL` VARCHAR(100) NULL DEFAULT NULL COMMENT 'Imagem do produto[N:Imagem][G:a][I:256x256|produto|produto.png]',
  `DataAtualizacao` DATETIME NOT NULL COMMENT 'Data de atualização das informações do produto[N:Data de atualização][G:a][D]',
  `DataArquivado` DATETIME NULL DEFAULT NULL COMMENT 'Data em que o produto foi arquivado e não será mais usado[G:a][N:Data de arquivação]',
  PRIMARY KEY (`ID`),
  UNIQUE INDEX `Descricao_UNIQUE` (`Descricao` ASC),
  UNIQUE INDEX `Codigo_UNIQUE` (`Codigo` ASC),
  INDEX `FK_Produtos_Categorias_CategoriaID_idx` (`CategoriaID` ASC),
  INDEX `FK_Produtos_Unidades_UnidadeID_idx` (`UnidadeID` ASC),
  INDEX `FK_Produtos_Setores_SetorPreparoID_idx` (`SetorPreparoID` ASC),
  INDEX `FK_Produtos_Setores_SetorEstoqueID_idx` (`SetorEstoqueID` ASC),
  INDEX `FK_Produtos_Tributacoes_TributacaoID_idx` (`TributacaoID` ASC),
  CONSTRAINT `FK_Produtos_Categorias_CategoriaID`
    FOREIGN KEY (`CategoriaID`)
    REFERENCES `Categorias` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Produtos_Unidades_UnidadeID`
    FOREIGN KEY (`UnidadeID`)
    REFERENCES `Unidades` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Produtos_Setores_SetorPreparoID`
    FOREIGN KEY (`SetorPreparoID`)
    REFERENCES `Setores` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Produtos_Setores_SetorEstoqueID`
    FOREIGN KEY (`SetorEstoqueID`)
    REFERENCES `Setores` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Produtos_Tributacoes_TributacaoID`
    FOREIGN KEY (`TributacaoID`)
    REFERENCES `Tributacoes` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB
COMMENT = 'Informações sobre o produto, composição ou pacote[N:Produto|Produtos][G:o][L:CadastroProdutos][K:MZ\\Product|MZ\\Product\\][H:SyncModel]';


-- -----------------------------------------------------
-- Table `Servicos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Servicos` ;

CREATE TABLE IF NOT EXISTS `Servicos` (
  `ID` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador do serviço[G:o]',
  `Nome` VARCHAR(50) NOT NULL COMMENT 'Nome do serviço, Ex.: Comissão, Entrega, Couvert[N:Nome][G:o]',
  `Descricao` VARCHAR(100) NOT NULL COMMENT 'Descrição do serviço, Ex.: Show de fulano[N:Descrição][G:a][S]',
  `Detalhes` VARCHAR(200) NULL DEFAULT NULL COMMENT 'Detalhes do serviço, Ex.: Com participação especial de fulano[N:Detalhes][G:o]',
  `Tipo` ENUM('Evento', 'Taxa') NOT NULL COMMENT 'Tipo de serviço, Evento: Eventos como show no estabelecimento[N:Tipo][G:o]',
  `Obrigatorio` ENUM('Y', 'N') NOT NULL DEFAULT 'Y' COMMENT 'Informa se a taxa é obrigatória[N:Obrigatório][G:o]',
  `DataInicio` DATETIME NULL DEFAULT NULL COMMENT 'Data de início do evento[N:Data de início][G:a]',
  `DataFim` DATETIME NULL DEFAULT NULL COMMENT 'Data final do evento[N:Data final][G:a]',
  `TempoLimite` INT NULL DEFAULT NULL COMMENT 'Tempo de participação máxima que não será obrigatório adicionar o serviço ao pedido[N:Tempo limite][G:o]',
  `Valor` DECIMAL(19,4) NOT NULL DEFAULT 0 COMMENT 'Valor do serviço[N:Valor][G:o]',
  `Individual` ENUM('Y', 'N') NOT NULL DEFAULT 'N' COMMENT 'Informa se a taxa ou serviço é individual para cada pessoa[N:Individual][G:o]',
  `ImagemURL` VARCHAR(100) NULL DEFAULT NULL COMMENT 'Banner do evento[N:Imagem][G:a][I:512x256|servico|servico.png]',
  `Ativo` ENUM('Y', 'N') NOT NULL DEFAULT 'Y' COMMENT 'Informa se o serviço está ativo[N:Ativo][G:o]',
  PRIMARY KEY (`ID`))
ENGINE = InnoDB
COMMENT = 'Taxas, eventos e serviço cobrado nos pedidos[N:Serviço|Serviços][G:o][L:CadastroServicos][K:MZ\\Product|MZ\\Product\\][H:SyncModel]';


-- -----------------------------------------------------
-- Table `Classificacoes`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Classificacoes` ;

CREATE TABLE IF NOT EXISTS `Classificacoes` (
  `ID` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador da classificação[G:o]',
  `ClassificacaoID` INT NULL DEFAULT NULL COMMENT 'Classificação superior, quando informado, esta classificação será uma subclassificação[N:Classificação superior][G:a][S:S]',
  `Descricao` VARCHAR(100) NOT NULL COMMENT 'Descrição da classificação[N:Descrição][G:a][S]',
  `IconeURL` VARCHAR(100) NULL DEFAULT NULL COMMENT 'Ícone da categoria da conta[N:Ícone][G:o][I:256x256|classificacao|classificacao.png]',
  PRIMARY KEY (`ID`),
  UNIQUE INDEX `Descricao_UNIQUE` (`Descricao` ASC),
  INDEX `FK_Classificacoes_ClassificacaoID_idx` (`ClassificacaoID` ASC),
  CONSTRAINT `FK_Classificacoes_ClassificacaoID`
    FOREIGN KEY (`ClassificacaoID`)
    REFERENCES `Classificacoes` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB
COMMENT = 'Classificação se contas, permite atribuir um grupo de contas[N:Classificação|Classificações][G:a][L:CadastroContas][K:MZ\\Account|MZ\\Account\\][H:SyncModel]';


-- -----------------------------------------------------
-- Table `Contas`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Contas` ;

CREATE TABLE IF NOT EXISTS `Contas` (
  `ID` INT NOT NULL AUTO_INCREMENT COMMENT 'Código da conta[G:o]',
  `ClassificacaoID` INT NOT NULL COMMENT 'Classificação da conta[N:Classificação][G:a][S:S]',
  `FuncionarioID` INT NOT NULL COMMENT 'Funcionário que lançou a conta[N:Funcionário][G:o][S:S]',
  `ContaID` INT NULL DEFAULT NULL COMMENT 'Informa a conta principal[G:a][N:Conta principal]',
  `AgrupamentoID` INT NULL DEFAULT NULL COMMENT 'Informa se esta conta foi agrupada e não precisa ser mais paga individualmente, uma conta agrupada é tratada internamente como desativada[G:o][N:Agrupamento]',
  `CarteiraID` INT NULL DEFAULT NULL COMMENT 'Informa a carteira que essa conta será paga automaticamente ou para informar as contas a pagar dessa carteira[G:a][N:Carteira]',
  `ClienteID` INT NULL DEFAULT NULL COMMENT 'Cliente a qual a conta pertence[N:Cliente][G:o][S:S]',
  `PedidoID` INT NULL DEFAULT NULL COMMENT 'Pedido da qual essa conta foi gerada[N:Pedido][G:o][S:S]',
  `Tipo` ENUM('Receita', 'Despesa') NOT NULL DEFAULT 'Despesa' COMMENT 'Tipo de conta se receita ou despesa[G:o][N:Tipo][E:Receita|Despesa]',
  `Descricao` VARCHAR(200) NOT NULL COMMENT 'Descrição da conta[N:Descrição][G:a][S]',
  `Valor` DECIMAL(19,4) NOT NULL COMMENT 'Valor da conta[N:Valor][G:o]',
  `Consolidado` DECIMAL(19,4) NOT NULL DEFAULT 0 COMMENT 'Valor pago ou recebido da conta[G:a][N:Valor pago ou recebido]',
  `Fonte` ENUM('Fixa', 'Variavel', 'Comissao', 'Remuneracao') NOT NULL DEFAULT 'Fixa' COMMENT 'Fonte dos valores, comissão e remuneração se pagar antes do vencimento, o valor será proporcional[G:a][N:Fonte dos valores][E:Fixa|Variável|Comissão|Remuneração]',
  `NumeroParcela` INT NOT NULL DEFAULT 1 COMMENT 'Informa qual o número da parcela para esta conta[G:o][N:Número da parcela]',
  `Parcelas` INT NOT NULL DEFAULT 1 COMMENT 'Quantidade de parcelas que essa conta terá, zero para conta recorrente e será alterado para 1 quando criar a próxima conta[G:a][N:Parcelas]',
  `Frequencia` INT NOT NULL DEFAULT 0 COMMENT 'Frequência da recorrência em dias ou mês, depende do modo de cobrança[G:a][N:Frequencia]',
  `Modo` ENUM('Diario', 'Mensal') NOT NULL DEFAULT 'Mensal' COMMENT 'Modo de cobrança se diário ou mensal, a quantidade é definida em frequencia[G:o][N:Modo][E:Diário|Mensal]',
  `Automatico` ENUM('Y', 'N') NOT NULL DEFAULT 'N' COMMENT 'Informa se o pagamento será automático após o vencimento, só ocorrerá se tiver saldo na carteira, usado para débito automático[G:o][N:Automático]',
  `Acrescimo` DECIMAL(19,4) NOT NULL DEFAULT 0 COMMENT 'Acréscimo de valores ao total[N:Acréscimo][G:o]',
  `Multa` DECIMAL(19,4) NOT NULL DEFAULT 0 COMMENT 'Valor da multa em caso de atraso[N:Multa por atraso][G:a]',
  `Juros` DOUBLE NOT NULL DEFAULT 0 COMMENT 'Juros diário em caso de atraso, valor de 0 a 1, 1 = 100%[N:Juros][G:o]',
  `Formula` ENUM('Simples', 'Composto') NOT NULL DEFAULT 'Composto' COMMENT 'Fórmula de juros que será cobrado em caso de atraso[G:o][N:Tipo de juros][E:Simples|Composto]',
  `Vencimento` DATETIME NOT NULL COMMENT 'Data de vencimento da conta[N:Data de vencimento][G:a]',
  `NumeroDoc` VARCHAR(64) NULL DEFAULT NULL COMMENT 'Número do documento que gerou a conta[N:Número do documento][G:o]',
  `AnexoURL` VARCHAR(200) NULL DEFAULT NULL COMMENT 'Caminho do anexo da conta[N:Anexo][G:o][I:512x256|conta|conta.png]',
  `Estado` ENUM('Analise', 'Ativa', 'Paga', 'Cancelada', 'Desativada') NOT NULL DEFAULT 'Ativa' COMMENT 'Informa o estado da conta, desativa quando agrupa[N:Estado][G:o][E:Análise|Ativa|Paga|Cancelada|Desativada]',
  `DataCalculo` DATETIME NULL DEFAULT NULL COMMENT 'Data do último cálculo de acréscimo por atraso de pagamento[N:Data de cálculo][G:a]',
  `DataEmissao` DATETIME NOT NULL COMMENT 'Data de emissão da conta[N:Data de emissão][G:a]',
  PRIMARY KEY (`ID`),
  INDEX `FK_Contas_Clientes_ClienteID_idx` (`ClienteID` ASC),
  INDEX `FK_Contas_Prestadores_FuncionarioID_idx` (`FuncionarioID` ASC),
  INDEX `FK_Contas_Pedidos_PedidoID_idx` (`PedidoID` ASC),
  INDEX `FK_Contas_Classificacoes_ClassificacaoID_idx` (`ClassificacaoID` ASC),
  INDEX `FK_Contas_Contas_ContaID_idx` (`ContaID` ASC),
  INDEX `FK_Contas_Carteiras_CarteiraID_idx` (`CarteiraID` ASC),
  INDEX `FK_Contas_Contas_AgrupamentoID_idx` (`AgrupamentoID` ASC),
  INDEX `IDX_Vencimento` (`Vencimento` DESC),
  INDEX `IDX_DataEmissao` (`DataEmissao` DESC),
  CONSTRAINT `FK_Contas_Clientes_ClienteID`
    FOREIGN KEY (`ClienteID`)
    REFERENCES `Clientes` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Contas_Prestadores_FuncionarioID`
    FOREIGN KEY (`FuncionarioID`)
    REFERENCES `Prestadores` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Contas_Pedidos_PedidoID`
    FOREIGN KEY (`PedidoID`)
    REFERENCES `Pedidos` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Contas_Classificacoes_ClassificacaoID`
    FOREIGN KEY (`ClassificacaoID`)
    REFERENCES `Classificacoes` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Contas_Contas_ContaID`
    FOREIGN KEY (`ContaID`)
    REFERENCES `Contas` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Contas_Carteiras_CarteiraID`
    FOREIGN KEY (`CarteiraID`)
    REFERENCES `Carteiras` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Contas_Contas_AgrupamentoID`
    FOREIGN KEY (`AgrupamentoID`)
    REFERENCES `Contas` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB
COMMENT = 'Contas a pagar e ou receber[N:Conta|Contas][G:a][L:CadastroContas][K:MZ\\Account|MZ\\Account\\][H:SyncModel]';


-- -----------------------------------------------------
-- Table `Movimentacoes`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Movimentacoes` ;

CREATE TABLE IF NOT EXISTS `Movimentacoes` (
  `ID` INT NOT NULL AUTO_INCREMENT COMMENT 'Código da movimentação do caixa[G:o]',
  `SessaoID` INT NOT NULL COMMENT 'Sessão do dia, permite abrir vários caixas no mesmo dia com o mesmo código da sessão[N:Sessão][G:a][S:S]',
  `CaixaID` INT NOT NULL COMMENT 'Caixa a qual pertence essa movimentação[N:Caixa][G:o][S]',
  `Aberta` ENUM('Y', 'N') NOT NULL DEFAULT 'Y' COMMENT 'Informa se o caixa está aberto[N:Aberta][G:a]',
  `IniciadorID` INT NOT NULL COMMENT 'Funcionário que abriu o caixa[N:Funcionário inicializador][G:a][S:S]',
  `FechadorID` INT NULL DEFAULT NULL COMMENT 'Funcionário que fechou o caixa[N:Funcionário fechador][G:o][S:S]',
  `DataFechamento` DATETIME NULL DEFAULT NULL COMMENT 'Data de fechamento do caixa[N:Data de fechamento][G:a]',
  `DataAbertura` DATETIME NOT NULL COMMENT 'Data de abertura do caixa[N:Data de abertura][G:a]',
  PRIMARY KEY (`ID`),
  INDEX `FK_Movimentacoes_Sessoes_SessaoID_idx` (`SessaoID` ASC),
  INDEX `FK_Movimentacoes_Caixas_CaixaID_idx` (`CaixaID` ASC),
  INDEX `FK_Movimentacoes_Prestadores_IniciadorID_idx` (`IniciadorID` ASC),
  INDEX `FK_Movimentacoes_Prestadores_FechadorID_idx` (`FechadorID` ASC),
  CONSTRAINT `FK_Movimentacoes_Sessoes_SessaoID`
    FOREIGN KEY (`SessaoID`)
    REFERENCES `Sessoes` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Movimentacoes_Caixas_CaixaID`
    FOREIGN KEY (`CaixaID`)
    REFERENCES `Caixas` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Movimentacoes_Prestadores_IniciadorID`
    FOREIGN KEY (`IniciadorID`)
    REFERENCES `Prestadores` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Movimentacoes_Prestadores_FechadorID`
    FOREIGN KEY (`FechadorID`)
    REFERENCES `Prestadores` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB
COMMENT = 'Movimentação do caixa, permite abrir diversos caixas na conta de operadores[N:Movimentação|Movimentações][G:a][L:AbrirCaixa][K:MZ\\Session|MZ\\Session\\][H:SyncModel]';


-- -----------------------------------------------------
-- Table `Creditos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Creditos` ;

CREATE TABLE IF NOT EXISTS `Creditos` (
  `ID` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador do crédito[G:o]',
  `ClienteID` INT NOT NULL COMMENT 'Cliente a qual o crédito pertence[N:Cliente][G:o][S:S]',
  `Valor` DECIMAL(19,4) NOT NULL COMMENT 'Valor do crédito[N:Valor][G:o]',
  `Detalhes` VARCHAR(255) NOT NULL COMMENT 'Detalhes do crédito, justificativa do crédito[N:Detalhes][G:o][S]',
  `Cancelado` ENUM('Y', 'N') NOT NULL DEFAULT 'N' COMMENT 'Informa se o crédito foi cancelado[N:Cancelado][G:o]',
  `DataCadastro` DATETIME NOT NULL COMMENT 'Data de cadastro do crédito[N:Data de cadastro][G:a]',
  PRIMARY KEY (`ID`),
  INDEX `FK_Creditos_Clientes_ClienteID_idx` (`ClienteID` ASC),
  CONSTRAINT `FK_Creditos_Clientes_ClienteID`
    FOREIGN KEY (`ClienteID`)
    REFERENCES `Clientes` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB
COMMENT = 'Créditos de clientes[N:Crédito|Créditos][G:o][L:CadastrarCreditos][K:MZ\\Account|MZ\\Account\\][H:SyncModel]';


-- -----------------------------------------------------
-- Table `Cheques`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Cheques` ;

CREATE TABLE IF NOT EXISTS `Cheques` (
  `ID` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador da folha de cheque[G:o]',
  `ClienteID` INT NOT NULL COMMENT 'Cliente que emitiu o cheque[N:Cliente][G:o][S:S]',
  `BancoID` INT NOT NULL COMMENT 'Banco do cheque[N:Banco][G:o][S]',
  `Agencia` VARCHAR(45) NOT NULL COMMENT 'Número da agência[N:Agência][G:a]',
  `Conta` VARCHAR(45) NOT NULL COMMENT 'Número da conta do banco descrito no cheque[N:Conta][G:a]',
  `Numero` VARCHAR(20) NOT NULL COMMENT 'Número da folha do cheque[N:Número][G:o][S]',
  `Valor` DECIMAL(19,4) NOT NULL COMMENT 'Valor na folha do cheque[N:Valor][G:o]',
  `Vencimento` DATETIME NOT NULL COMMENT 'Data de vencimento do cheque[N:Vencimento][G:o]',
  `Cancelado` ENUM('Y', 'N') NOT NULL DEFAULT 'N' COMMENT 'Informa se o cheque e todas as suas folhas estão cancelados[N:Cancelado][G:o]',
  `Recolhido` ENUM('Y', 'N') NOT NULL DEFAULT 'N' COMMENT 'Informa se o cheque foi recolhido no banco[N:Recolhido][G:o]',
  `Recolhimento` DATETIME NULL DEFAULT NULL COMMENT 'Data de recolhimento do cheque[N:Data de recolhimento][G:a]',
  `DataCadastro` DATETIME NOT NULL COMMENT 'Data de cadastro do cheque[N:Data de cadastro][G:a][D]',
  PRIMARY KEY (`ID`),
  INDEX `IDX_Cheques_Vencimento_Recolhido` (`Vencimento` ASC, `Recolhido` ASC),
  INDEX `FK_Cheques_Clientes_ClienteID_idx` (`ClienteID` ASC),
  INDEX `FK_Cheques_Bancos_BancoID_idx` (`BancoID` ASC),
  CONSTRAINT `FK_Cheques_Clientes_ClienteID`
    FOREIGN KEY (`ClienteID`)
    REFERENCES `Clientes` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Cheques_Bancos_BancoID`
    FOREIGN KEY (`BancoID`)
    REFERENCES `Bancos` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB
COMMENT = 'Folha de cheque lançado como pagamento[N:Cheque|Cheques][G:o][L:Pagamento][K:MZ\\Payment|MZ\\Payment\\][H:SyncModel]';


-- -----------------------------------------------------
-- Table `Pagamentos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Pagamentos` ;

CREATE TABLE IF NOT EXISTS `Pagamentos` (
  `ID` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador do pagamento[G:o]',
  `CarteiraID` INT NOT NULL COMMENT 'Carteira de destino do valor[N:Carteira][G:a]',
  `MoedaID` INT NOT NULL COMMENT 'Informa em qual moeda está o valor informado[G:a][N:Moeda]',
  `PagamentoID` INT NULL DEFAULT NULL COMMENT 'Informa o pagamento principal ou primeira parcela, o valor lançado é zero para os pagamentos filhos, restante de antecipação e taxas são filhos do valor antecipado[G:o][N:Pagamento]',
  `AgrupamentoID` INT NULL DEFAULT NULL COMMENT 'Permite antecipar recebimentos de cartões, um pagamento agrupado é internamente tratado como desativado[G:o][N:Agrupamento]',
  `MovimentacaoID` INT NULL DEFAULT NULL COMMENT 'Movimentação do caixa quando for pagamento de pedido ou quando a conta for paga do caixa[N:Movimentação][G:a][S:S]',
  `FuncionarioID` INT NULL DEFAULT NULL COMMENT 'Funcionário que lançou o pagamento no sistema[N:Funcionário][G:o][S:S]',
  `FormaPagtoID` INT NULL DEFAULT NULL COMMENT 'Forma da pagamento do pedido[N:Forma de pagamento][G:a][S]',
  `PedidoID` INT NULL DEFAULT NULL COMMENT 'Pedido que foi pago[N:Pedido][G:o][S:S]',
  `ContaID` INT NULL DEFAULT NULL COMMENT 'Conta que foi paga/recebida[N:Conta][G:a][S:S]',
  `CartaoID` INT NULL DEFAULT NULL COMMENT 'Cartão em que foi pago, para forma de pagamento em cartão[N:Cartão][G:o]',
  `ChequeID` INT NULL DEFAULT NULL COMMENT 'Cheque em que foi pago[N:Cheque][G:o][S:S]',
  `CrediarioID` INT NULL DEFAULT NULL COMMENT 'Conta que foi utilizada como pagamento do pedido[N:Conta pedido][G:a][S:S]',
  `CreditoID` INT NULL DEFAULT NULL COMMENT 'Crédito que foi utilizado para pagar o pedido[N:Crédito][G:o][S:S]',
  `Valor` DECIMAL(19,4) NOT NULL COMMENT 'Valor pago ou recebido na moeda informada no momento do recebimento[N:Valor][G:o]',
  `NumeroParcela` INT NOT NULL DEFAULT 1 COMMENT 'Informa qual o número da parcela para este pagamento[G:o][N:Número da parcela]',
  `Parcelas` INT NOT NULL DEFAULT 1 COMMENT 'Quantidade de parcelas desse pagamento[G:a][N:Parcelas]',
  `Lancado` DECIMAL(19,4) NOT NULL COMMENT 'Valor lançado para pagamento do pedido ou conta na moeda local do país[N:Lancado][G:o]',
  `Codigo` VARCHAR(100) NULL DEFAULT NULL COMMENT 'Código do pagamento, usado em transações online[G:o][N:Código]',
  `Detalhes` VARCHAR(200) NULL DEFAULT NULL COMMENT 'Detalhes do pagamento[N:Detalhes][G:o]',
  `Estado` ENUM('Aberto', 'Aguardando', 'Analise', 'Pago', 'Disputa', 'Devolvido', 'Cancelado') NOT NULL DEFAULT 'Aberto' COMMENT 'Informa qual o andamento do processo de pagamento[N:Estado][G:o][F:self::ESTADO_ABERTO][E:Aberto|Aguardando pagamento|Pago|Em disputa|Devolvido|Cancelado]',
  `DataCompensacao` DATETIME NOT NULL COMMENT 'Data de compensação do pagamento[N:Data de compensação][G:a]',
  `DataLancamento` DATETIME NOT NULL COMMENT 'Data e hora do lançamento do pagamento[N:Data de lançamento][G:a]',
  PRIMARY KEY (`ID`),
  INDEX `FK_Pagamentos_Prestadores_FuncionarioID_idx` (`FuncionarioID` ASC),
  INDEX `FK_Pagamentos_Formas_Pagto_FormaPagtoID_idx` (`FormaPagtoID` ASC),
  INDEX `FK_Pagamentos_Pedidos_PedidoID_idx` (`PedidoID` ASC),
  INDEX `FK_Pagamentos_Cartoes_CartaoID_idx` (`CartaoID` ASC),
  INDEX `FK_Pagamentos_Contas_ContaID_idx` (`CrediarioID` ASC),
  INDEX `FK_Pagamentos_Contas_PagtoContaID_idx` (`ContaID` ASC),
  INDEX `FK_Pagamentos_Movimentacoes_MovimentacaoID_idx` (`MovimentacaoID` ASC),
  INDEX `FK_Pagamentos_Creditos_CreditoID_idx` (`CreditoID` ASC),
  INDEX `FK_Pagamentos_Carteiras_CarteiraID_idx` (`CarteiraID` ASC),
  INDEX `FK_Pagamentos_Cheques_ChequeID_idx` (`ChequeID` ASC),
  INDEX `FK_Pagamentos_Pagamentos_PagamentoID_idx` (`PagamentoID` ASC),
  INDEX `FK_Pagamentos_Moedas_MoedaID_idx` (`MoedaID` ASC),
  INDEX `FK_Pagamentos_Pagamentos_AgrupamentoID_idx` (`AgrupamentoID` ASC),
  INDEX `IDX_DataCompensacao` (`DataCompensacao` DESC),
  INDEX `IDX_DataLancamento` (`DataLancamento` DESC),
  CONSTRAINT `FK_Pagamentos_Prestadores_FuncionarioID`
    FOREIGN KEY (`FuncionarioID`)
    REFERENCES `Prestadores` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Pagamentos_Formas_Pagto_FormaPagtoID`
    FOREIGN KEY (`FormaPagtoID`)
    REFERENCES `Formas_Pagto` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Pagamentos_Pedidos_PedidoID`
    FOREIGN KEY (`PedidoID`)
    REFERENCES `Pedidos` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Pagamentos_Cartoes_CartaoID`
    FOREIGN KEY (`CartaoID`)
    REFERENCES `Cartoes` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Pagamentos_Contas_ContaID`
    FOREIGN KEY (`CrediarioID`)
    REFERENCES `Contas` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Pagamentos_Contas_PagtoContaID`
    FOREIGN KEY (`ContaID`)
    REFERENCES `Contas` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Pagamentos_Movimentacoes_MovimentacaoID`
    FOREIGN KEY (`MovimentacaoID`)
    REFERENCES `Movimentacoes` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Pagamentos_Carteiras_CarteiraID`
    FOREIGN KEY (`CarteiraID`)
    REFERENCES `Carteiras` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Pagamentos_Creditos_CreditoID`
    FOREIGN KEY (`CreditoID`)
    REFERENCES `Creditos` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Pagamentos_Cheques_ChequeID`
    FOREIGN KEY (`ChequeID`)
    REFERENCES `Cheques` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Pagamentos_Pagamentos_PagamentoID`
    FOREIGN KEY (`PagamentoID`)
    REFERENCES `Pagamentos` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Pagamentos_Moedas_MoedaID`
    FOREIGN KEY (`MoedaID`)
    REFERENCES `Moedas` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Pagamentos_Pagamentos_AgrupamentoID`
    FOREIGN KEY (`AgrupamentoID`)
    REFERENCES `Pagamentos` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB
COMMENT = 'Pagamentos de contas e pedidos[N:Pagamento|Pagamentos][G:o][L:Pagamento][K:MZ\\Payment|MZ\\Payment\\][H:SyncModel]';


-- -----------------------------------------------------
-- Table `Itens`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Itens` ;

CREATE TABLE IF NOT EXISTS `Itens` (
  `ID` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador do item do pedido[G:o]',
  `PedidoID` INT NOT NULL COMMENT 'Pedido a qual pertence esse item[N:Pedido][G:o][S:S]',
  `PrestadorID` INT NOT NULL COMMENT 'Prestador que lançou esse item no pedido[N:Prestador][G:o][S:S]',
  `ProdutoID` INT NULL COMMENT 'Produto vendido[N:Produto][G:o][S][S:S]',
  `ServicoID` INT NULL DEFAULT NULL COMMENT 'Serviço cobrado ou taxa[N:Serviço][G:o][S:S]',
  `ItemID` INT NULL DEFAULT NULL COMMENT 'Pacote em que esse item faz parte[N:Pacote][G:o][S:S]',
  `PagamentoID` INT NULL DEFAULT NULL COMMENT 'Informa se esse item foi pago e qual foi o lançamento[G:o][N:Pagamento]',
  `Descricao` VARCHAR(200) NULL DEFAULT NULL COMMENT 'Sobrescreve a descrição do produto na exibição[N:Descrição][G:a]',
  `Preco` DECIMAL(19,4) NOT NULL COMMENT 'Preço do produto já com desconto[N:Preço][G:o]',
  `Quantidade` DOUBLE NOT NULL COMMENT 'Quantidade de itens vendidos[N:Quantidade][G:a]',
  `Subtotal` DECIMAL(19,4) NOT NULL COMMENT 'Subtotal do item sem comissão[G:o][N:Subtotal]',
  `Comissao` DECIMAL(19,4) NOT NULL DEFAULT 0 COMMENT 'Valor total de comissão cobrada nesse item da venda[N:Porcentagem][G:a]',
  `Total` DECIMAL(19,4) NOT NULL COMMENT 'Total a pagar do item com a comissão[G:o][N:Total]',
  `PrecoVenda` DECIMAL(19,4) NOT NULL COMMENT 'Preço de normal do produto no momento da venda[N:Preço de venda][G:o]',
  `PrecoCompra` DECIMAL(19,4) NOT NULL DEFAULT 0 COMMENT 'Preço de compra do produto calculado automaticamente na hora da venda[N:Preço de compra][G:o]',
  `Detalhes` VARCHAR(255) NULL DEFAULT NULL COMMENT 'Observações do item pedido, Ex.: bem gelado, mal passado[N:Observações][G:o]',
  `Estado` ENUM('Adicionado', 'Enviado', 'Processado', 'Pronto', 'Disponivel', 'Entregue') NOT NULL DEFAULT 'Adicionado' COMMENT 'Estado de preparo e envio do produto[N:Estado][G:o][E:Adicionado|Enviado|Processado|Pronto|Disponível|Entregue]',
  `Cancelado` ENUM('Y', 'N') NOT NULL DEFAULT 'N' COMMENT 'Informa se o item foi cancelado[N:Cancelado][G:o]',
  `Motivo` VARCHAR(200) NULL DEFAULT NULL COMMENT 'Informa o motivo do item ser cancelado[N:Motivo][G:o]',
  `Desperdicado` ENUM('Y', 'N') NOT NULL DEFAULT 'N' COMMENT 'Informa se o item foi cancelado por conta de desperdício[N:Desperdiçado][G:o]',
  `Reservado` ENUM('Y', 'N') NOT NULL DEFAULT 'Y' COMMENT 'Informa se os produtos foram retirados do estoque para produção[G:o][N:Reservado]',
  `DataVisualizacao` DATETIME NULL DEFAULT NULL COMMENT 'Data de visualização do item[N:Data de visualização][G:a]',
  `DataAtualizacao` DATETIME NULL DEFAULT NULL COMMENT 'Data de atualização do estado do item[N:Data de atualização][G:a]',
  `DataLancamento` DATETIME NOT NULL COMMENT 'Data e hora da realização do pedido do item[N:Data de lançamento][G:a][D]',
  INDEX `FK_Itens_Pedidos_PedidoID_idx` (`PedidoID` ASC),
  INDEX `FK_Itens_Produtos_ProdutoID_idx` (`ProdutoID` ASC),
  INDEX `FK_Itens_Prestadores_PrestadorID_idx` (`PrestadorID` ASC),
  PRIMARY KEY (`ID`),
  INDEX `DataLancamento_INDEX` (`DataLancamento` DESC),
  INDEX `FK_Itens_Itens_ItemID_idx` (`ItemID` ASC),
  INDEX `FK_Itens_Servicos_ServicoID_idx` (`ServicoID` ASC),
  INDEX `FK_Itens_Pagamentos_PagamentoID_idx` (`PagamentoID` ASC),
  CONSTRAINT `FK_Itens_Pedidos_PedidoID`
    FOREIGN KEY (`PedidoID`)
    REFERENCES `Pedidos` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Itens_Produtos_ProdutoID`
    FOREIGN KEY (`ProdutoID`)
    REFERENCES `Produtos` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Itens_Prestadores_PrestadorID`
    FOREIGN KEY (`PrestadorID`)
    REFERENCES `Prestadores` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Itens_Itens_ItemID`
    FOREIGN KEY (`ItemID`)
    REFERENCES `Itens` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Itens_Servicos_ServicoID`
    FOREIGN KEY (`ServicoID`)
    REFERENCES `Servicos` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Itens_Pagamentos_PagamentoID`
    FOREIGN KEY (`PagamentoID`)
    REFERENCES `Pagamentos` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB
COMMENT = 'Produtos, taxas e serviços do pedido, a alteração do estado permite o controle de produção[N:Item do pedido|Itens do pedido][G:o][L:Pagamento][U:Item|Itens][K:MZ\\Sale|MZ\\Sale\\][H:SyncModel]';


-- -----------------------------------------------------
-- Table `Funcionalidades`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Funcionalidades` ;

CREATE TABLE IF NOT EXISTS `Funcionalidades` (
  `ID` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador da funcionalidade[G:o]',
  `Nome` VARCHAR(64) NOT NULL COMMENT 'Nome da funcionalidade, único em todo o sistema[N:Nome][G:o]',
  `Descricao` VARCHAR(100) NOT NULL COMMENT 'Descrição da funcionalidade[N:Descrição][G:a][S]',
  PRIMARY KEY (`ID`),
  UNIQUE INDEX `Nome_UNIQUE` (`Nome` ASC))
ENGINE = InnoDB
COMMENT = 'Grupo de funcionalidades do sistema[N:Funcionalidade|Funcionalidades][G:a][L:AlterarConfiguracoes][K:MZ\\System|MZ\\System\\][H:SyncModel]';


-- -----------------------------------------------------
-- Table `Modulos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Modulos` ;

CREATE TABLE IF NOT EXISTS `Modulos` (
  `ID` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador do módulo[G:o]',
  `Nome` VARCHAR(50) NOT NULL COMMENT 'Nome do módulo, unico em todo o sistema[N:Nome][G:o][S]',
  `Descricao` VARCHAR(200) NOT NULL COMMENT 'Descrição do módulo, informa detalhes sobre a funcionalidade do módulo no sistema[N:Descrição][G:a]',
  `Habilitado` ENUM('Y', 'N') NOT NULL DEFAULT 'Y' COMMENT 'Informa se o módulo do sistema está habilitado[N:Habilitado][G:o]',
  PRIMARY KEY (`ID`),
  UNIQUE INDEX `Nome_UNIQUE` (`Nome` ASC))
ENGINE = InnoDB
COMMENT = 'Módulos do sistema que podem ser desativados/ativados[N:Módulo|Módulos][G:o][L:AlterarConfiguracoes][K:MZ\\System|MZ\\System\\][H:SyncModel]';


-- -----------------------------------------------------
-- Table `Permissoes`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Permissoes` ;

CREATE TABLE IF NOT EXISTS `Permissoes` (
  `ID` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador da permissão[G:o]',
  `FuncionalidadeID` INT NOT NULL COMMENT 'Categoriza um grupo de permissões[N:Funcionalidade][G:a][S:S]',
  `ModuloID` INT NULL DEFAULT NULL COMMENT 'Módulo em que essa permissão faz parte[G:o][N:Módulo]',
  `Nome` VARCHAR(45) NOT NULL COMMENT 'Nome da permissão, único no sistema[N:Nome][G:a]',
  `Descricao` VARCHAR(100) NOT NULL COMMENT 'Descreve a permissão[N:Descrição][G:a][S]',
  PRIMARY KEY (`ID`),
  UNIQUE INDEX `Nome_UNIQUE` (`Nome` ASC),
  INDEX `FK_Permissoes_Funcionalidades_FuncionalidadeID_idx` (`FuncionalidadeID` ASC),
  INDEX `FK_Permissoes_Modulos_ModuloID_idx` (`ModuloID` ASC),
  CONSTRAINT `FK_Permissoes_Funcionalidades_FuncionalidadeID`
    FOREIGN KEY (`FuncionalidadeID`)
    REFERENCES `Funcionalidades` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Permissoes_Modulos_ModuloID`
    FOREIGN KEY (`ModuloID`)
    REFERENCES `Modulos` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB
COMMENT = 'Informa a listagem de todas as funções do sistema [N:Permissão|Permissões][G:a][L:AlterarConfiguracoes][K:MZ\\System|MZ\\System\\][H:SyncModel]';


-- -----------------------------------------------------
-- Table `Auditoria`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Auditoria` ;

CREATE TABLE IF NOT EXISTS `Auditoria` (
  `ID` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador da auditoria[G:o]',
  `PermissaoID` INT NULL DEFAULT NULL COMMENT 'Informa a permissão concedida ou utilizada que permitiu a realização da operação[G:a][N:Permissão]',
  `PrestadorID` INT NOT NULL COMMENT 'Prestador que exerceu a atividade[N:Prestador][G:o][S:S]',
  `AutorizadorID` INT NOT NULL COMMENT 'Prestador que autorizou o acesso ao recurso descrito[N:Autorizador][G:o][S:S]',
  `Tipo` ENUM('Financeiro', 'Administrativo', 'Operacional') NOT NULL COMMENT 'Tipo de atividade exercida[N:Tipo][G:o][S:S]',
  `Prioridade` ENUM('Baixa', 'Media', 'Alta') NOT NULL COMMENT 'Prioridade de acesso do recurso[N:Prioridade][G:a][E:Baixa|Média|Alta][S:S]',
  `Descricao` VARCHAR(255) NOT NULL COMMENT 'Descrição da atividade exercida[N:Descrição][G:a][S]',
  `Autorizacao` VARCHAR(255) NULL DEFAULT NULL COMMENT 'Código de autorização necessário para permitir realizar a função descrita[G:a][N:Autorização]',
  `DataHora` DATETIME NOT NULL COMMENT 'Data e hora do ocorrido[N:Data e hora][G:a]',
  PRIMARY KEY (`ID`),
  INDEX `FK_Auditoria_Prestadores_PrestadorID_idx` (`PrestadorID` ASC),
  INDEX `IDX_Auditoria_DataHora` (`DataHora` ASC),
  INDEX `FK_Auditoria_Prestadores_AutorizadorID_idx` (`AutorizadorID` ASC),
  INDEX `FK_Auditoria_Permissoes_PermissaoID_idx` (`PermissaoID` ASC),
  CONSTRAINT `FK_Auditoria_Prestadores_PrestadorID`
    FOREIGN KEY (`PrestadorID`)
    REFERENCES `Prestadores` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Auditoria_Prestadores_AutorizadorID`
    FOREIGN KEY (`AutorizadorID`)
    REFERENCES `Prestadores` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Auditoria_Permissoes_PermissaoID`
    FOREIGN KEY (`PermissaoID`)
    REFERENCES `Permissoes` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB
COMMENT = 'Registra todas as atividades importantes do sistema[N:Auditoria|Auditorias][G:a][L:RelatorioAuditoria][K:MZ\\System|MZ\\System\\][H:SyncModel]';


-- -----------------------------------------------------
-- Table `Composicoes`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Composicoes` ;

CREATE TABLE IF NOT EXISTS `Composicoes` (
  `ID` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador da composição[G:o]',
  `ComposicaoID` INT NOT NULL COMMENT 'Informa a qual produto pertence essa composição, deve sempre ser um produto do tipo Composição[N:Composição][G:a][S:S]',
  `ProdutoID` INT NOT NULL COMMENT 'Produto ou composição que faz parte dessa composição, Obs: Não pode ser um pacote[N:Produto da composição][G:o][S]',
  `Tipo` ENUM('Composicao', 'Opcional', 'Adicional') NOT NULL DEFAULT 'Composicao' COMMENT 'Tipo de composição, \'Composicao\' sempre retira do estoque, \'Opcional\' permite desmarcar na venda, \'Adicional\' permite adicionar na venda[N:Tipo][G:o][E:Composição|Opcional|Adicional]',
  `Quantidade` DOUBLE NOT NULL COMMENT 'Quantidade que será consumida desse produto para cada composição formada[N:Quantidade][G:a]',
  `Valor` DECIMAL(19,4) NOT NULL DEFAULT 0 COMMENT 'Desconto que será realizado ao retirar esse produto da composição no  momento da venda[N:Valor][G:o]',
  `QuantidadeMaxima` INT NOT NULL DEFAULT 1 COMMENT 'Define a quantidade máxima que essa composição pode ser vendida repetidamente[N:Quantidade máxima][G:a][F:1]',
  `Ativa` ENUM('Y', 'N') NOT NULL DEFAULT 'Y' COMMENT 'Indica se a composição está sendo usada atualmente na composição do produto[N:Ativa][G:a]',
  PRIMARY KEY (`ID`),
  INDEX `FK_Composicoes_Produtos_ComposicaoID_idx` (`ComposicaoID` ASC),
  INDEX `FK_Composicoes_Produtos_ProdutoID_idx` (`ProdutoID` ASC),
  UNIQUE INDEX `ComposicaoID_ProdutoID_Tipo_UNIQUE` (`ComposicaoID` ASC, `ProdutoID` ASC, `Tipo` ASC),
  CONSTRAINT `FK_Composicoes_Produtos_ComposicaoID`
    FOREIGN KEY (`ComposicaoID`)
    REFERENCES `Produtos` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Composicoes_Produtos_ProdutoID`
    FOREIGN KEY (`ProdutoID`)
    REFERENCES `Produtos` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB
COMMENT = 'Informa as propriedades da composição de um produto composto[N:Composição|Composições][G:a][L:CadastroProdutos][K:MZ\\Product|MZ\\Product\\][H:SyncModel]';


-- -----------------------------------------------------
-- Table `Fornecedores`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Fornecedores` ;

CREATE TABLE IF NOT EXISTS `Fornecedores` (
  `ID` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador do fornecedor[G:o]',
  `EmpresaID` INT NOT NULL COMMENT 'Empresa do fornecedor[N:Empresa][G:a][S]',
  `PrazoPagamento` INT NOT NULL DEFAULT 0 COMMENT 'Prazo em dias para pagamento do fornecedor[N:Prazo de pagamento][G:o]',
  `DataCadastro` DATETIME NOT NULL COMMENT 'Data de cadastro do fornecedor[N:Data de cadastro][G:a]',
  PRIMARY KEY (`ID`),
  INDEX `FK_Fornecedores_Clientes_EmpresaID_idx` (`EmpresaID` ASC),
  UNIQUE INDEX `EmpresaID_UNIQUE` (`EmpresaID` ASC),
  CONSTRAINT `FK_Fornecedores_Clientes_EmpresaID`
    FOREIGN KEY (`EmpresaID`)
    REFERENCES `Clientes` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB
COMMENT = 'Fornecedores de produtos[N:Fornecedor|Fornecedores][G:o][L:CadastroFornecedores][K:MZ\\Stock|MZ\\Stock\\][H:SyncModel]';


-- -----------------------------------------------------
-- Table `Listas`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Listas` ;

CREATE TABLE IF NOT EXISTS `Listas` (
  `ID` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador da lista de compras[G:o]',
  `Descricao` VARCHAR(100) NOT NULL COMMENT 'Nome da lista, pode ser uma data[N:Descrição][G:a][S]',
  `Estado` ENUM('Analise', 'Fechada', 'Comprada') NOT NULL DEFAULT 'Analise' COMMENT 'Estado da lista de compra. Análise: Ainda estão sendo adicionado produtos na lista, Fechada: Está pronto para compra, Comprada: Todos os itens foram comprados[N:Estado][G:o][E:Análise|Fechada|Comprada]',
  `EncarregadoID` INT NOT NULL COMMENT 'Informa o funcionário encarregado de fazer as compras[N:Encarregado][G:o][S:S]',
  `ViagemID` INT NULL DEFAULT NULL COMMENT 'Informações da viagem para realizar as compras[G:a][N:Viagem]',
  `DataViagem` DATETIME NOT NULL COMMENT 'Data e hora para o encarregado ir fazer as compras[N:Data de viagem][G:a]',
  `DataCadastro` DATETIME NOT NULL COMMENT 'Data de cadastro da lista[N:Data de cadastro][G:a]',
  PRIMARY KEY (`ID`),
  INDEX `FK_Listas_Prestadores_EncarregadoID_idx` (`EncarregadoID` ASC),
  INDEX `FK_Listas_Viagens_ViagemID_idx` (`ViagemID` ASC),
  CONSTRAINT `FK_Listas_Prestadores_EncarregadoID`
    FOREIGN KEY (`EncarregadoID`)
    REFERENCES `Prestadores` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Listas_Viagens_ViagemID`
    FOREIGN KEY (`ViagemID`)
    REFERENCES `Viagens` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB
COMMENT = 'Lista de compras de produtos[N:Lista de compra|Listas de compras][G:a][L:ListaCompras][K:MZ\\Stock|MZ\\Stock\\][H:SyncModel]';


-- -----------------------------------------------------
-- Table `Compras`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Compras` ;

CREATE TABLE IF NOT EXISTS `Compras` (
  `ID` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador da compra',
  `Numero` VARCHAR(64) NULL DEFAULT NULL COMMENT 'Informa o número fiscal da compra[N:Número da compra][G:o]',
  `CompradorID` INT NOT NULL COMMENT 'Informa o funcionário que comprou os produtos da lista[N:Comprador][G:o][S:S]',
  `FornecedorID` INT NOT NULL COMMENT 'Fornecedor em que os produtos foram compras[N:Fornecedor][G:o][S:S]',
  `DocumentoURL` VARCHAR(150) NULL DEFAULT NULL COMMENT 'Informa o nome do documento no servidor do sistema[N:Documento][G:o][I:256x256|compra|compra.png]',
  `DataCompra` DATETIME NOT NULL COMMENT 'Informa da data de finalização da compra[N:Data da compra][G:a]',
  PRIMARY KEY (`ID`),
  INDEX `FK_Compras_Fornecedores_FornecedorID_idx` (`FornecedorID` ASC),
  INDEX `FK_Compras_Prestadores_CompradorID_idx` (`CompradorID` ASC),
  UNIQUE INDEX `Numero_UNIQUE` (`Numero` ASC),
  CONSTRAINT `FK_Compras_Fornecedores_FornecedorID`
    FOREIGN KEY (`FornecedorID`)
    REFERENCES `Fornecedores` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Compras_Prestadores_CompradorID`
    FOREIGN KEY (`CompradorID`)
    REFERENCES `Prestadores` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB
COMMENT = 'Compras realizadas em uma lista num determinado fornecedor[N:Compra|Compras][G:a][L:ListaCompras][K:MZ\\Stock|MZ\\Stock\\][H:SyncModel]';


-- -----------------------------------------------------
-- Table `Requisitos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Requisitos` ;

CREATE TABLE IF NOT EXISTS `Requisitos` (
  `ID` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador do produto da lista[G:o]',
  `ListaID` INT NOT NULL COMMENT 'Lista de compra desse produto[N:Lista de compra][G:a][S:S]',
  `ProdutoID` INT NOT NULL COMMENT 'Produto que deve ser comprado[N:Produto][G:o][S][S:S]',
  `CompraID` INT NULL DEFAULT NULL COMMENT 'Informa em qual fornecedor foi realizado a compra desse produto[G:a][N:Compra][S:S]',
  `FornecedorID` INT NULL DEFAULT NULL COMMENT 'Fornecedor em que deve ser consultado ou realizado as compras dos produtos, pode ser alterado no momento da compra[N:Fornecedor][G:o][S:S]',
  `Quantidade` DOUBLE NOT NULL DEFAULT 0 COMMENT 'Quantidade de produtos que deve ser comprado[N:Quantidade][G:a]',
  `Comprado` DOUBLE NOT NULL DEFAULT 0 COMMENT 'Informa quantos produtos já foram comprados[N:Comprado][G:o]',
  `PrecoMaximo` DECIMAL(19,4) NOT NULL COMMENT 'Preço máximo que deve ser pago na compra desse produto[N:Preço máximo][G:o]',
  `Preco` DECIMAL(19,4) NOT NULL DEFAULT 0 COMMENT 'Preço em que o produto foi comprado da última vez ou o novo preço[N:Preço][G:o]',
  `Observacoes` VARCHAR(100) NULL DEFAULT NULL COMMENT 'Detalhes na compra desse produto[N:Observações][G:a]',
  `DataRecolhimento` DATETIME NULL DEFAULT NULL COMMENT 'Informa o momento do recolhimento da mercadoria na pratileira[N:Data de recolhimento][G:a]',
  PRIMARY KEY (`ID`),
  INDEX `FK_Requisitos_Listas_ListaID_idx` (`ListaID` ASC),
  INDEX `FK_Requisitos_Produtos_ProdutoID_idx` (`ProdutoID` ASC),
  INDEX `FK_Requisitos_Fornecedores_FornecedorID_idx` (`FornecedorID` ASC),
  INDEX `FK_Requisitos_Compras_CompraID_idx` (`CompraID` ASC),
  CONSTRAINT `FK_Requisitos_Listas_ListaID`
    FOREIGN KEY (`ListaID`)
    REFERENCES `Listas` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Requisitos_Produtos_ProdutoID`
    FOREIGN KEY (`ProdutoID`)
    REFERENCES `Produtos` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Requisitos_Fornecedores_FornecedorID`
    FOREIGN KEY (`FornecedorID`)
    REFERENCES `Fornecedores` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Requisitos_Compras_CompraID`
    FOREIGN KEY (`CompraID`)
    REFERENCES `Compras` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB
COMMENT = 'Informa os produtos da lista de compras[N:Produtos da lista|Produtos das listas][G:o][L:ListaCompras][K:MZ\\Stock|MZ\\Stock\\][H:SyncModel]';


-- -----------------------------------------------------
-- Table `Estoque`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Estoque` ;

CREATE TABLE IF NOT EXISTS `Estoque` (
  `ID` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador da entrada no estoque[G:o]',
  `ProdutoID` INT NOT NULL COMMENT 'Produto que entrou no estoque[N:Produto][G:o][S][S:S]',
  `RequisitoID` INT NULL DEFAULT NULL COMMENT 'Informa de qual compra originou essa entrada em estoque[G:o][N:Requisição de Compra]',
  `TransacaoID` INT NULL DEFAULT NULL COMMENT 'Identificador do item que gerou a saída desse produto do estoque[N:Transação][G:a][S:S]',
  `EntradaID` INT NULL DEFAULT NULL COMMENT 'Informa de qual entrada no estoque essa saída foi retirada, permite estoque FIFO[N:Entrada][G:a][S:S]',
  `FornecedorID` INT NULL DEFAULT NULL COMMENT 'Fornecedor do produto[N:Fornecedor][G:o][S:S]',
  `SetorID` INT NOT NULL COMMENT 'Setor de onde o produto foi inserido ou retirado[N:Setor][G:o]',
  `PrestadorID` INT NOT NULL COMMENT 'Prestador que inseriu/retirou o produto do estoque[N:Prestador][G:o][S:S]',
  `TipoMovimento` ENUM('Entrada', 'Venda', 'Consumo', 'Transferencia') NOT NULL COMMENT 'Tipo de movimentação do estoque. Entrada: Entrada de produtos no estoque, Venda: Saída de produtos através de venda, Consumo: Saída de produtos por consumo próprio, Transferência: Indica a transferência de produtos entre setores[N:Tipo de movimento][G:o][E:Entrada|Venda|Consumo|Transferência][S:S]',
  `Quantidade` DOUBLE NOT NULL COMMENT 'Quantidade do mesmo produto inserido no estoque[N:Quantidade][G:a]',
  `PrecoCompra` DECIMAL(19,4) NOT NULL DEFAULT 0 COMMENT 'Preço de compra do produto[N:Preço de compra][G:o]',
  `Lote` VARCHAR(45) NULL DEFAULT NULL COMMENT 'Lote de produção do produto comprado[N:Lote][G:o]',
  `DataFabricacao` DATETIME NULL DEFAULT NULL COMMENT 'Data de fabricação do produto[N:Data de fabricação][G:a]',
  `DataVencimento` DATETIME NULL DEFAULT NULL COMMENT 'Data de vencimento do produto[N:Data de vencimento][G:a]',
  `Detalhes` VARCHAR(100) NULL DEFAULT NULL COMMENT 'Detalhes da inserção ou retirada do estoque[N:Detalhes][G:o]',
  `Cancelado` ENUM('Y', 'N') NOT NULL DEFAULT 'N' COMMENT 'Informa a entrada ou saída do estoque foi cancelada[N:Cancelado][G:o]',
  `DataMovimento` DATETIME NOT NULL COMMENT 'Data de entrada ou saída do produto do estoque[N:Data de movimento][G:a][D]',
  PRIMARY KEY (`ID`),
  INDEX `FK_Estoque_Produtos_ProdutoID_idx` (`ProdutoID` ASC),
  INDEX `FK_Estoque_Itens_TransacaoID_idx` (`TransacaoID` ASC),
  INDEX `FK_Estoque_Fornecedores_FornecedorID_idx` (`FornecedorID` ASC),
  INDEX `FK_Estoque_Prestadores_PrestadorID_idx` (`PrestadorID` ASC),
  INDEX `FK_Estoque_Setores_SetorID_idx` (`SetorID` ASC),
  INDEX `FK_Estoque_Estoque_EntradaID_idx` (`EntradaID` ASC),
  INDEX `FK_Estoque_Requisitos_RequisitoID_idx` (`RequisitoID` ASC),
  INDEX `IDX_DataMovimento` (`DataMovimento` ASC),
  CONSTRAINT `FK_Estoque_Produtos_ProdutoID`
    FOREIGN KEY (`ProdutoID`)
    REFERENCES `Produtos` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Estoque_Itens_TransacaoID`
    FOREIGN KEY (`TransacaoID`)
    REFERENCES `Itens` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Estoque_Fornecedores_FornecedorID`
    FOREIGN KEY (`FornecedorID`)
    REFERENCES `Fornecedores` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Estoque_Prestadores_PrestadorID`
    FOREIGN KEY (`PrestadorID`)
    REFERENCES `Prestadores` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Estoque_Setores_SetorID`
    FOREIGN KEY (`SetorID`)
    REFERENCES `Setores` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Estoque_Estoque_EntradaID`
    FOREIGN KEY (`EntradaID`)
    REFERENCES `Estoque` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Estoque_Requisitos_RequisitoID`
    FOREIGN KEY (`RequisitoID`)
    REFERENCES `Requisitos` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB
COMMENT = 'Estoque de produtos por setor[N:Estoque|Estoques][G:o][L:Estoque][K:MZ\\Stock|MZ\\Stock\\][H:SyncModel]';


-- -----------------------------------------------------
-- Table `Grupos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Grupos` ;

CREATE TABLE IF NOT EXISTS `Grupos` (
  `ID` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador do grupo[G:o]',
  `ProdutoID` INT NOT NULL COMMENT 'Informa o pacote base da formação[N:Pacote][G:o][S:S]',
  `Nome` VARCHAR(100) NOT NULL COMMENT 'Nome resumido do grupo da formação, Exemplo: Tamanho, Sabores[N:Nome][G:o][S:S]',
  `Descricao` VARCHAR(100) NOT NULL COMMENT 'Descrição do grupo da formação, Exemplo: Escolha o tamanho, Escolha os sabores[N:Descrição][G:a][S]',
  `Multiplo` ENUM('Y', 'N') NOT NULL DEFAULT 'Y' COMMENT 'Informa se é possível selecionar mais de um produto ou opção do produto[N:Múltiplo][G:o]',
  `Tipo` ENUM('Inteiro', 'Fracionado') NOT NULL DEFAULT 'Inteiro' COMMENT ' Informa se a formação final será apenas uma unidade ou vários itens[N:Tipo][G:o]',
  `QuantidadeMinima` INT NOT NULL DEFAULT 1 COMMENT 'Permite definir uma quantidade mínima obrigatória para continuar com a venda[N:Quantidade mínima][G:a]',
  `QuantidadeMaxima` INT NOT NULL DEFAULT 0 COMMENT 'Define a quantidade máxima de itens que podem ser escolhidos[N:Quantidade máxima][G:a]',
  `Funcao` ENUM('Minimo', 'Media', 'Maximo', 'Soma') NOT NULL DEFAULT 'Soma' COMMENT 'Informa qual será a fórmula de cálculo do preço, Mínimo: obtém o menor preço, Média:  define o preço do produto como a média dos itens selecionados, Máximo: Obtém o preço do item mais caro do grupo, Soma: Soma todos os preços dos produtos selecionados[N:Função de preço][G:a][E:Mínimo|Média|Máximo|Soma]',
  `Ordem` INT NOT NULL DEFAULT 0 COMMENT 'Informa a ordem de exibição dos grupos[G:a][N:Ordem]',
  `DataArquivado` DATETIME NULL DEFAULT NULL COMMENT 'Data em que o grupo foi arquivado e não será mais usado[G:a][N:Data de arquivação]',
  PRIMARY KEY (`ID`),
  INDEX `FK_Grupos_Produtos_ProdutoID_idx` (`ProdutoID` ASC),
  UNIQUE INDEX `ProdutoID_Descricao_UNIQUE` (`ProdutoID` ASC, `Descricao` ASC),
  UNIQUE INDEX `ProdutoID_Nome_UNIQUE` (`ProdutoID` ASC, `Nome` ASC),
  CONSTRAINT `FK_Grupos_Produtos_ProdutoID`
    FOREIGN KEY (`ProdutoID`)
    REFERENCES `Produtos` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB
COMMENT = 'Grupos de pacotes, permite criar grupos como Tamanho, Sabores para formações de produtos[N:Grupo|Grupos][G:o][L:CadastroProdutos][K:MZ\\Product|MZ\\Product\\][H:SyncModel]';


-- -----------------------------------------------------
-- Table `Propriedades`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Propriedades` ;

CREATE TABLE IF NOT EXISTS `Propriedades` (
  `ID` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador da propriedade[G:o]',
  `GrupoID` INT NOT NULL COMMENT 'Grupo que possui essa propriedade como item de um pacote[N:Grupo][G:o][S:S]',
  `Nome` VARCHAR(100) NOT NULL COMMENT 'Nome da propriedade, Ex.: Grande, Pequena[N:Nome][G:o][S]',
  `Abreviacao` VARCHAR(100) NULL DEFAULT NULL COMMENT 'Abreviação do nome da propriedade, Ex.: G para Grande, P para Pequena, essa abreviação fará parte do nome do produto[N:Abreviação][G:a]',
  `ImagemURL` VARCHAR(100) NULL DEFAULT NULL COMMENT 'Imagem que representa a propriedade[N:Imagem][G:a][I:256x256|propriedade|propriedade.png]',
  `DataAtualizacao` DATETIME NOT NULL COMMENT 'Data de atualização dos dados ou da imagem da propriedade[N:Data de atualização][G:a]',
  PRIMARY KEY (`ID`),
  UNIQUE INDEX `GrupoID_Nome_UNIQUE` (`GrupoID` ASC, `Nome` ASC),
  INDEX `FK_Propriedades_Grupos_GrupoID_idx` (`GrupoID` ASC),
  CONSTRAINT `FK_Propriedades_Grupos_GrupoID`
    FOREIGN KEY (`GrupoID`)
    REFERENCES `Grupos` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB
COMMENT = 'Informa tamanhos de pizzas e opções de peso do produto[N:Propriedade|Propriedades][G:a][L:CadastroProdutos][K:MZ\\Product|MZ\\Product\\][H:SyncModel]';


-- -----------------------------------------------------
-- Table `Pacotes`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Pacotes` ;

CREATE TABLE IF NOT EXISTS `Pacotes` (
  `ID` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador do pacote[G:o]',
  `PacoteID` INT NOT NULL COMMENT 'Pacote a qual pertence as informações de formação do produto final[N:Pacote][G:o][S:S]',
  `GrupoID` INT NOT NULL COMMENT 'Grupo de formação, Ex.: Tamanho, Sabores e Complementos.[N:Grupo][G:o][S:S]',
  `ProdutoID` INT NULL DEFAULT NULL COMMENT 'Produto selecionável do grupo. Não pode conter propriedade.[N:Produto][G:o][S][S:S]',
  `PropriedadeID` INT NULL DEFAULT NULL COMMENT 'Propriedade selecionável do grupo. Não pode conter produto.[N:Propriedade][G:a]',
  `AssociacaoID` INT NULL DEFAULT NULL COMMENT 'Informa a propriedade pai de um complemento, permite atribuir preços diferentes dependendo da propriedade, Ex.: Tamanho -> Sabor, onde Tamanho é pai de Sabor[N:Associação][G:a]',
  `QuantidadeMinima` INT NOT NULL DEFAULT 0 COMMENT 'Permite definir uma quantidade mínima obrigatória para a venda desse item[N:Quantidade mínima][G:a][F:0]',
  `QuantidadeMaxima` INT NOT NULL DEFAULT 1 COMMENT 'Define a quantidade máxima que pode ser vendido esse item repetidamente[N:Quantidade máxima][G:a][F:1]',
  `Valor` DECIMAL(19,4) NOT NULL COMMENT 'Valor acrescentado ao produto quando o item é selecionado[N:Valor][G:o]',
  `Selecionado` ENUM('Y', 'N') NOT NULL DEFAULT 'N' COMMENT 'Informa se o complemento está selecionado por padrão, recomendado apenas para produtos[N:Selecionado][G:o][F:\'N\']',
  `Visivel` ENUM('Y', 'N') NOT NULL DEFAULT 'Y' COMMENT 'Indica se o pacote estará disponível para venda[N:Visível][G:o][F:\'Y\']',
  `DataArquivado` DATETIME NULL DEFAULT NULL COMMENT 'Data em que o pacote foi arquivado e não será mais usado[G:a][N:Data de arquivação]',
  PRIMARY KEY (`ID`),
  INDEX `FK_Pacotes_Produtos_PacoteID_idx` (`PacoteID` ASC),
  INDEX `FK_Pacotes_Produtos_ProdutoID_idx` (`ProdutoID` ASC),
  INDEX `FK_Pacotes_Grupos_GrupoID_idx` (`GrupoID` ASC),
  INDEX `FK_Pacotes_Pacotes_AssociacaoID_idx` (`AssociacaoID` ASC),
  INDEX `FK_Pacotes_Propriedades_PropriedadeID_idx` (`PropriedadeID` ASC),
  CONSTRAINT `FK_Pacotes_Produtos_PacoteID`
    FOREIGN KEY (`PacoteID`)
    REFERENCES `Produtos` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Pacotes_Produtos_ProdutoID`
    FOREIGN KEY (`ProdutoID`)
    REFERENCES `Produtos` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Pacotes_Grupos_GrupoID`
    FOREIGN KEY (`GrupoID`)
    REFERENCES `Grupos` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Pacotes_Pacotes_AssociacaoID`
    FOREIGN KEY (`AssociacaoID`)
    REFERENCES `Pacotes` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Pacotes_Propriedades_PropriedadeID`
    FOREIGN KEY (`PropriedadeID`)
    REFERENCES `Propriedades` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB
COMMENT = 'Contém todos as opções para a formação do produto final[N:Pacote|Pacotes][G:o][L:CadastroProdutos][K:MZ\\Product|MZ\\Product\\][H:SyncModel]';


-- -----------------------------------------------------
-- Table `Dispositivos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Dispositivos` ;

CREATE TABLE IF NOT EXISTS `Dispositivos` (
  `ID` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador do dispositivo[G:o]',
  `SetorID` INT NOT NULL COMMENT 'Setor em que o dispositivo está instalado/será usado[N:Setor][G:o]',
  `CaixaID` INT NULL DEFAULT NULL COMMENT 'Finalidade do dispositivo, caixa ou terminal, o caixa é único entre os dispositivos[N:Caixa][G:o]',
  `Nome` VARCHAR(100) NOT NULL COMMENT 'Nome do computador ou tablet em rede, único entre os dispositivos[N:Nome][G:o][S]',
  `Tipo` ENUM('Computador', 'Tablet') NOT NULL DEFAULT 'Computador' COMMENT 'Tipo de dispositivo[N:Tipo][G:o][S:S]',
  `Descricao` VARCHAR(45) NULL DEFAULT NULL COMMENT 'Descrição do dispositivo[N:Descrição][G:a]',
  `Opcoes` TEXT NULL DEFAULT NULL COMMENT 'Opções do dispositivo, Ex.: Balança, identificador de chamadas e outros[N:Opções][G:a]',
  `Serial` VARCHAR(45) NOT NULL COMMENT 'Serial do tablet para validação, único entre os dispositivos[N:Serial][G:o]',
  `Validacao` VARCHAR(40) NULL DEFAULT NULL COMMENT 'Validação do dispositivo[N:Validação][G:a]',
  PRIMARY KEY (`ID`),
  INDEX `FK_Dispositivos_Setores_SetorID_idx` (`SetorID` ASC),
  INDEX `FK_Dispositivos_Caixas_CaixaID_idx` (`CaixaID` ASC),
  UNIQUE INDEX `CaixaID_UNIQUE` (`CaixaID` ASC),
  UNIQUE INDEX `Serial_UNIQUE` (`Serial` ASC),
  CONSTRAINT `FK_Dispositivos_Setores_SetorID`
    FOREIGN KEY (`SetorID`)
    REFERENCES `Setores` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Dispositivos_Caixas_CaixaID`
    FOREIGN KEY (`CaixaID`)
    REFERENCES `Caixas` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB
COMMENT = 'Computadores e tablets com opções de acesso[N:Dispositivo|Dispositivos][G:o][L:CadastroComputadores][K:MZ\\Device|MZ\\Device\\][H:SyncModel]';


-- -----------------------------------------------------
-- Table `Impressoras`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Impressoras` ;

CREATE TABLE IF NOT EXISTS `Impressoras` (
  `ID` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador da impressora[G:o]',
  `SetorID` INT NOT NULL COMMENT 'Setor de impressão[N:Setor de impressão][G:o]',
  `DispositivoID` INT NULL DEFAULT NULL COMMENT 'Dispositivo que contém a impressora[N:Dispositivo][G:o]',
  `Nome` VARCHAR(100) NOT NULL COMMENT 'Nome da impressora instalada no windows[N:Nome][G:o]',
  `Driver` VARCHAR(45) NULL DEFAULT NULL COMMENT 'Informa qual conjunto de comandos deve ser utilizado[N:Driver][G:o]',
  `Descricao` VARCHAR(45) NOT NULL DEFAULT '' COMMENT 'Descrição da impressora[N:Descrição][G:a][S]',
  `Modo` ENUM('Terminal', 'Caixa', 'Servico', 'Estoque') NOT NULL DEFAULT 'Terminal' COMMENT 'Modo de impressão[N:Modo][G:o][E:Terminal|Caixa|Serviço|Estoque]',
  `Opcoes` INT NOT NULL DEFAULT 1 COMMENT 'Opções da impressora, Ex.: Cortar papel, Acionar gaveta e outros[N:Opções][G:a]',
  `Colunas` INT NOT NULL DEFAULT 48 COMMENT 'Quantidade de colunas do cupom[N:Quantidade de colunas][G:a]',
  `Avanco` INT NOT NULL DEFAULT 6 COMMENT 'Quantidade de linhas para avanço do papel[N:Avanço de papel][G:o]',
  `Comandos` TEXT NULL DEFAULT NULL COMMENT 'Comandos para impressão, quando o driver é customizado[N:Comandos][G:o]',
  PRIMARY KEY (`ID`),
  INDEX `FK_Impressoras_Dispositivos_DispositivoID_idx` (`DispositivoID` ASC),
  UNIQUE INDEX `SetorID_DispositivoID_Modo_UNIQUE` (`SetorID` ASC, `DispositivoID` ASC, `Modo` ASC),
  INDEX `FK_Impressoras_Setores_SetorID_idx` (`SetorID` ASC),
  UNIQUE INDEX `DispositivoID_Descricao_UNIQUE` (`DispositivoID` ASC, `Descricao` ASC),
  CONSTRAINT `FK_Impressoras_Dispositivos_DispositivoID`
    FOREIGN KEY (`DispositivoID`)
    REFERENCES `Dispositivos` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Impressoras_Setores_SetorID`
    FOREIGN KEY (`SetorID`)
    REFERENCES `Setores` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB
COMMENT = 'Impressora para impressão de serviços e contas[N:Impressora|Impressoras][G:a][L:CadastroImpressoras][K:MZ\\Device|MZ\\Device\\][H:SyncModel]';


-- -----------------------------------------------------
-- Table `Promocoes`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Promocoes` ;

CREATE TABLE IF NOT EXISTS `Promocoes` (
  `ID` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador da promoção[G:o]',
  `CategoriaID` INT NULL DEFAULT NULL COMMENT 'Permite fazer promoção para qualquer produto dessa categoria[G:a][N:Categoria]',
  `ProdutoID` INT NULL DEFAULT NULL COMMENT 'Informa qual o produto participará da promoção de desconto ou terá acréscimo[N:Produto][G:o][S]',
  `ServicoID` INT NULL DEFAULT NULL COMMENT 'Informa se essa promoção será aplicada nesse serviço[G:o][N:Serviço]',
  `BairroID` INT NULL DEFAULT NULL COMMENT 'Bairro que essa promoção se aplica, somente serviços[G:o][N:Bairro]',
  `ZonaID` INT NULL DEFAULT NULL COMMENT 'Zona que essa promoção se aplica, somente serviços[G:o][N:Zona]',
  `IntegracaoID` INT NULL DEFAULT NULL COMMENT 'Permite alterar o preço do produto para cada integração[G:a][N:Integração]',
  `Inicio` INT NOT NULL COMMENT 'Momento inicial da semana em minutos que o produto começa a sofrer alteração de preço, em evento será o unix timestamp[N:Momento inicial][G:o]',
  `Fim` INT NOT NULL COMMENT 'Momento final da semana em minutos que o produto volta ao preço normal, em evento será o unix timestamp[N:Momento final][G:o]',
  `Valor` DECIMAL(19,4) NOT NULL COMMENT 'Acréscimo ou desconto aplicado ao produto ou serviço[N:Valor][G:o]',
  `Pontos` INT NOT NULL DEFAULT 0 COMMENT 'Informa quantos pontos será ganho (Positivo) ou descontado (Negativo) na compra desse produto[G:o][N:Pontos]',
  `Parcial` ENUM('Y', 'N') NOT NULL DEFAULT 'N' COMMENT 'Informa se o resgate dos produtos podem ser feitos de forma parcial[G:o][N:Resgate parcial]',
  `Proibir` ENUM('Y', 'N') NOT NULL DEFAULT 'N' COMMENT 'Informa se deve proibir a venda desse produto no período informado[N:Proibir a venda][G:a]',
  `Evento` ENUM('Y', 'N') NOT NULL DEFAULT 'N' COMMENT 'Informa se a promoção será aplicada apenas no intervalo de data informado[G:o][N:Evento]',
  `Agendamento` ENUM('Y', 'N') NOT NULL DEFAULT 'N' COMMENT 'Informa se essa promoção é um agendamento de preço, na data inicial o preço será aplicado, assim como a visibilidade do produto ou serviço será ativada ou desativada de acordo com o proibir[G:o][N:Agendamento]',
  `Chamada` VARCHAR(200) NULL DEFAULT NULL COMMENT 'Chamada para a promoção[G:a][N:Chamada]',
  `BannerURL` VARCHAR(100) NULL DEFAULT NULL COMMENT 'Imagem promocional[N:Banner][G:o][I:512x256|promocao|promocao.png]',
  PRIMARY KEY (`ID`),
  INDEX `FK_Promocoes_Produtos_ProdutoID_idx` (`ProdutoID` ASC),
  INDEX `FK_Promocoes_Servicos_ServicoID_idx` (`ServicoID` ASC),
  INDEX `FK_Promocoes_Bairros_BairroID_idx` (`BairroID` ASC),
  INDEX `FK_Promocoes_Zonas_ZonaID_idx` (`ZonaID` ASC),
  INDEX `FK_Promocoes_Integracoes_IntegracaoID_idx` (`IntegracaoID` ASC),
  INDEX `FK_Promocoes_Categorias_CategoriaID_idx` (`CategoriaID` ASC),
  CONSTRAINT `FK_Promocoes_Produtos_ProdutoID`
    FOREIGN KEY (`ProdutoID`)
    REFERENCES `Produtos` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Promocoes_Servicos_ServicoID`
    FOREIGN KEY (`ServicoID`)
    REFERENCES `Servicos` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Promocoes_Bairros_BairroID`
    FOREIGN KEY (`BairroID`)
    REFERENCES `Bairros` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Promocoes_Zonas_ZonaID`
    FOREIGN KEY (`ZonaID`)
    REFERENCES `Zonas` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Promocoes_Integracoes_IntegracaoID`
    FOREIGN KEY (`IntegracaoID`)
    REFERENCES `Integracoes` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Promocoes_Categorias_CategoriaID`
    FOREIGN KEY (`CategoriaID`)
    REFERENCES `Categorias` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB
COMMENT = 'Informa se há descontos nos produtos em determinados dias da semana, o preço pode subir ou descer e ser agendado para ser aplicado[N:Promoção|Promoções][G:a][L:CadastroProdutos][K:MZ\\Promotion|MZ\\Promotion\\][H:SyncModel]';


-- -----------------------------------------------------
-- Table `Acessos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Acessos` ;

CREATE TABLE IF NOT EXISTS `Acessos` (
  `ID` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador do acesso[G:o]',
  `FuncaoID` INT NOT NULL COMMENT 'Função a que a permissão se aplica[N:Função][G:a][S:S]',
  `PermissaoID` INT NOT NULL COMMENT 'Permissão liberada para a função[N:Permissão][G:a][S]',
  PRIMARY KEY (`ID`),
  INDEX `FK_Acessos_Funcoes_FuncaoID_idx` (`FuncaoID` ASC),
  INDEX `FK_Acessos_Permissoes_PermissaoID_idx` (`PermissaoID` ASC),
  UNIQUE INDEX `FuncaoID_PermissaoID_UNIQUE` (`FuncaoID` ASC, `PermissaoID` ASC),
  CONSTRAINT `FK_Acessos_Funcoes_FuncaoID`
    FOREIGN KEY (`FuncaoID`)
    REFERENCES `Funcoes` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Acessos_Permissoes_PermissaoID`
    FOREIGN KEY (`PermissaoID`)
    REFERENCES `Permissoes` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB
COMMENT = 'Permite acesso à uma determinada funcionalidade da lista de permissões[N:Acesso|Acessos][G:o][L:AlterarConfiguracoes][K:MZ\\System|MZ\\System\\][H:SyncModel]';


-- -----------------------------------------------------
-- Table `Catalogos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Catalogos` ;

CREATE TABLE IF NOT EXISTS `Catalogos` (
  `ID` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador do catálogo[G:o]',
  `ProdutoID` INT NOT NULL COMMENT 'Produto consultado[N:Produto][G:o][S]',
  `FornecedorID` INT NOT NULL COMMENT 'Fornecedor que possui o produto à venda[N:Fornecedor][G:o][S:S]',
  `PrecoCompra` DECIMAL(19,4) NOT NULL COMMENT 'Preço a qual o produto foi comprado da última vez[N:Preço de compra][G:o]',
  `PrecoVenda` DECIMAL(19,4) NOT NULL DEFAULT 0 COMMENT 'Preço de venda do produto pelo fornecedor na última consulta[N:Preço de venda][G:o]',
  `QuantidadeMinima` DOUBLE NOT NULL DEFAULT 1 COMMENT 'Quantidade mínima que o fornecedor vende[N:Quantidade mínima][G:a]',
  `Estoque` DOUBLE NOT NULL DEFAULT 0 COMMENT 'Quantidade em estoque do produto no fornecedor[N:Estoque][G:o]',
  `Limitado` ENUM('Y', 'N') NOT NULL DEFAULT 'N' COMMENT 'Informa se a quantidade de estoque é limitada[N:Limitado][G:o]',
  `Conteudo` DOUBLE NOT NULL DEFAULT 1 COMMENT 'Informa o conteúdo do produto como é comprado, Ex.: 5UN no mesmo pacote[N:Conteúdo][G:o]',
  `DataConsulta` DATETIME NULL DEFAULT NULL COMMENT 'Última data de consulta do preço do produto[N:Data de consulta][G:a]',
  `DataAbandono` DATETIME NULL DEFAULT NULL COMMENT 'Data em que o produto deixou de ser vendido pelo fornecedor[G:a][N:Data de abandono]',
  PRIMARY KEY (`ID`),
  INDEX `FK_Catalogos_Produtos_ProdutoID_idx` (`ProdutoID` ASC),
  INDEX `FK_Catalogos_Fornecedores_FornecedorID_idx` (`FornecedorID` ASC),
  UNIQUE INDEX `FornecedorID_ProdutoID_UNIQUE` (`ProdutoID` ASC, `FornecedorID` ASC),
  CONSTRAINT `FK_Catalogos_Produtos_ProdutoID`
    FOREIGN KEY (`ProdutoID`)
    REFERENCES `Produtos` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Catalogos_Fornecedores_FornecedorID`
    FOREIGN KEY (`FornecedorID`)
    REFERENCES `Fornecedores` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB
COMMENT = 'Informa a lista de produtos disponíveis nos fornecedores[N:Catálogo de produtos|Catálogos de produtos][G:o][L:CadastroFornecedores][K:MZ\\Stock|MZ\\Stock\\][H:SyncModel]';


-- -----------------------------------------------------
-- Table `Servidores`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Servidores` ;

CREATE TABLE IF NOT EXISTS `Servidores` (
  `ID` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador do servidor no banco de dados[G:o]',
  `GUID` VARCHAR(45) NOT NULL COMMENT 'Identificador único do servidor, usando para identificação na sincronização[G:o][N:Identificador único]',
  `SincronizadoAte` BIGINT NULL DEFAULT NULL COMMENT 'Informa até onde foi sincronzado os dados desse servidor, sempre nulo no proprio servidor[G:o][N:Sincronizado até]',
  `UltimaSincronizacao` DATETIME NULL DEFAULT NULL COMMENT 'Data da última sincronização com esse servidor[G:a][N:Data da última sincronização]',
  PRIMARY KEY (`ID`),
  UNIQUE INDEX `GUID_UNIQUE` (`GUID` ASC))
ENGINE = InnoDB
COMMENT = 'Lista de servidores que fazem sincronizações[N:Servidor|Servidores][G:o][L:AlterarConfiguracoes][K:MZ\\System|MZ\\System\\][H:Model]';


-- -----------------------------------------------------
-- Table `Sistema`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Sistema` ;

CREATE TABLE IF NOT EXISTS `Sistema` (
  `ID` ENUM('1') NOT NULL COMMENT 'Identificador único do sistema, valor 1[G:o]',
  `ServidorID` INT NOT NULL COMMENT 'Servidor do sistema[G:o][N:Servidor]',
  `Licenca` TEXT NULL DEFAULT NULL COMMENT 'Chave da Licença, permite licença do tipo vitalícia[N:Chave de licença][G:a]',
  `Dispositivos` INT NULL DEFAULT NULL COMMENT 'Quantidade de tablets e computadores permitido para uso[N:Quantidade de dispositivos][G:a]',
  `GUID` VARCHAR(36) NULL DEFAULT NULL COMMENT 'Código único da empresa, permite baixar novas licenças automaticamente e autorizar sincronização do servidor[N:Identificador da empresa][G:o]',
  `UltimoBackup` DATETIME NULL DEFAULT NULL COMMENT 'Informa qual foi a data da última realização de backup do banco de dados do sistema[N:Data do último backup][G:a]',
  `FusoHorario` VARCHAR(100) NULL DEFAULT NULL COMMENT 'Informa qual o fuso horário',
  `VersaoDB` VARCHAR(45) NOT NULL COMMENT 'Informa qual a versão do banco de dados[N:Versão do banco de dados][G:a][S]',
  PRIMARY KEY (`ID`),
  INDEX `FK_Sistema_Servidores_ServidorID_idx` (`ServidorID` ASC),
  CONSTRAINT `FK_Sistema_Servidores_ServidorID`
    FOREIGN KEY (`ServidorID`)
    REFERENCES `Servidores` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB
COMMENT = 'Classe que informa detalhes da empresa, parceiro e opções do sistema como a versão do banco de dados e a licença de uso[N:Sistema|Sistemas][G:o][L:AlterarConfiguracoes][K:MZ\\System|MZ\\System\\][H:Model]';


-- -----------------------------------------------------
-- Table `Informacoes`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Informacoes` ;

CREATE TABLE IF NOT EXISTS `Informacoes` (
  `ID` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador da informação nutricional[G:o]',
  `ProdutoID` INT NOT NULL COMMENT 'Produto a que essa tabela de informações nutricionais pertence[N:Produto][G:o][S]',
  `UnidadeID` INT NOT NULL COMMENT 'Unidade de medida da porção[N:Unidade][G:a]',
  `Porcao` DOUBLE NOT NULL COMMENT 'Quantidade da porção para base nos valores nutricionais[N:Porção][G:a]',
  `Dieta` DOUBLE NOT NULL DEFAULT 2000000 COMMENT 'Informa a quantidade de referência da dieta geralmente 2000kcal ou 8400kJ[N:Dieta][G:a]',
  `Ingredientes` TEXT NULL DEFAULT NULL COMMENT 'Informa todos os ingredientes que compõe o produto[N:Ingredientes][G:o]',
  PRIMARY KEY (`ID`),
  INDEX `FK_Informacoes_Produtos_ProdutoID_idx` (`ProdutoID` ASC),
  UNIQUE INDEX `ProdutoID_UNIQUE` (`ProdutoID` ASC),
  INDEX `FK_Informacoes_Unidades_UnidadeID_idx` (`UnidadeID` ASC),
  CONSTRAINT `FK_Informacoes_Produtos_ProdutoID`
    FOREIGN KEY (`ProdutoID`)
    REFERENCES `Produtos` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Informacoes_Unidades_UnidadeID`
    FOREIGN KEY (`UnidadeID`)
    REFERENCES `Unidades` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB
COMMENT = 'Permite cadastrar informações da tabela nutricional[N:Informação nutricional|Informações nutricionais][G:a][L:CadastroProdutos][K:MZ\\Product|MZ\\Product\\][H:SyncModel]';


-- -----------------------------------------------------
-- Table `Resumos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Resumos` ;

CREATE TABLE IF NOT EXISTS `Resumos` (
  `ID` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador do resumo[G:o]',
  `MovimentacaoID` INT NOT NULL COMMENT 'Movimentação do caixa referente ao resumo[N:Movimentação][G:a][S]',
  `Tipo` ENUM('Dinheiro', 'Credito', 'Debito', 'Vale', 'Cheque', 'Crediario', 'Saldo') NOT NULL COMMENT 'Tipo de pagamento do resumo[N:Tipo][G:o][E:Dinheiro|Cartão de credito|Cartão de débito|Vale|Cheque|Crediário|Saldo][S:S]',
  `CartaoID` INT NULL DEFAULT NULL COMMENT 'Cartão da forma de pagamento[N:Cartão][G:o]',
  `Valor` DECIMAL(19,4) NOT NULL COMMENT 'Valor que foi contado ao fechar o caixa[N:Valor][G:o]',
  PRIMARY KEY (`ID`),
  INDEX `FK_Resumos_Movimentacoes_MovimentacaoID_idx` (`MovimentacaoID` ASC),
  INDEX `FK_Resumos_Cartoes_CartaoID_idx` (`CartaoID` ASC),
  UNIQUE INDEX `MovimentacaoID_Tipo_CartaoID_UNIQUE` (`MovimentacaoID` ASC, `Tipo` ASC, `CartaoID` ASC),
  CONSTRAINT `FK_Resumos_Movimentacoes_MovimentacaoID`
    FOREIGN KEY (`MovimentacaoID`)
    REFERENCES `Movimentacoes` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Resumos_Cartoes_CartaoID`
    FOREIGN KEY (`CartaoID`)
    REFERENCES `Cartoes` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB
COMMENT = 'Resumo de fechamento de caixa, informa o valor contado no fechamento do caixa para cada forma de pagamento[N:Resumo|Resumos][G:o][L:ConferirCaixa][K:MZ\\Session|MZ\\Session\\][H:SyncModel]';


-- -----------------------------------------------------
-- Table `Formacoes`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Formacoes` ;

CREATE TABLE IF NOT EXISTS `Formacoes` (
  `ID` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador da formação[G:o]',
  `ItemID` INT NOT NULL COMMENT 'Informa qual foi o produto vendido para essa formação[N:Item do pedido][G:o][S:S]',
  `Tipo` ENUM('Pacote', 'Composicao') NOT NULL DEFAULT 'Pacote' COMMENT 'Informa qual tipo de formação foi escolhida, Pacote: O produto ou propriedade faz parte de um pacote, Composição: O produto é uma composição e esse item foi retirado ou adicionado na venda[N:Tipo][G:o][E:Pacote|Composição]',
  `PacoteID` INT NULL DEFAULT NULL COMMENT 'Informa qual pacote foi selecionado no momento da venda[N:Pacote][G:o][S]',
  `ComposicaoID` INT NULL DEFAULT NULL COMMENT 'Informa qual composição foi retirada ou adicionada no momento da venda[N:Composição][G:a]',
  `Quantidade` DOUBLE NOT NULL DEFAULT 1 COMMENT 'Quantidade de itens selecionados[N:Quantidade][G:a]',
  PRIMARY KEY (`ID`),
  INDEX `FK_Formacoes_Itens_ItemID_idx` (`ItemID` ASC),
  INDEX `FK_Formacoes_Pacotes_PacoteID_idx` (`PacoteID` ASC),
  UNIQUE INDEX `ItemID_PacoteID_UNIQUE` (`ItemID` ASC, `PacoteID` ASC),
  INDEX `FK_Formacoes_Composicoes_ComposicaoID_idx` (`ComposicaoID` ASC),
  CONSTRAINT `FK_Formacoes_Itens_ItemID`
    FOREIGN KEY (`ItemID`)
    REFERENCES `Itens` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Formacoes_Pacotes_PacoteID`
    FOREIGN KEY (`PacoteID`)
    REFERENCES `Pacotes` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Formacoes_Composicoes_ComposicaoID`
    FOREIGN KEY (`ComposicaoID`)
    REFERENCES `Composicoes` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB
COMMENT = 'Informa qual foi a formação que gerou esse produto, assim como quais item foram retirados/adicionados da composição[N:Formação|Formações][G:a][L:Pagamento][K:MZ\\Sale|MZ\\Sale\\][H:SyncModel]';


-- -----------------------------------------------------
-- Table `Enderecos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Enderecos` ;

CREATE TABLE IF NOT EXISTS `Enderecos` (
  `ID` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador do endereço[G:o]',
  `CidadeID` INT NOT NULL COMMENT 'Cidade a qual o endereço pertence[N:Cidade][G:a][S:S]',
  `BairroID` INT NOT NULL COMMENT 'Bairro a qual o endereço está localizado[N:Bairro][G:o][S:S]',
  `Logradouro` VARCHAR(200) NOT NULL COMMENT 'Nome da rua ou avenida[N:Logradouro][G:o][S]',
  `CEP` VARCHAR(8) NOT NULL COMMENT 'Código dos correios para identificar a rua ou avenida[N:CEP][G:o][M:99999-999]',
  PRIMARY KEY (`ID`),
  UNIQUE INDEX `CEP_UNIQUE` (`CEP` ASC),
  INDEX `FK_Enderecos_Cidades_CidadeID_idx` (`CidadeID` ASC),
  INDEX `FK_Enderecos_Bairros_BairroID_idx` (`BairroID` ASC),
  UNIQUE INDEX `BairroID_Logradouro_UNIQUE` (`BairroID` ASC, `Logradouro` ASC),
  CONSTRAINT `FK_Enderecos_Cidades_CidadeID`
    FOREIGN KEY (`CidadeID`)
    REFERENCES `Cidades` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Enderecos_Bairros_BairroID`
    FOREIGN KEY (`BairroID`)
    REFERENCES `Bairros` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB
COMMENT = 'Endereços de ruas e avenidas com informação de CEP[N:Endereço|Endereços][G:o][L:CadastroBairros][K:MZ\\Location|MZ\\Location\\][H:SyncModel]';


-- -----------------------------------------------------
-- Table `Horarios`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Horarios` ;

CREATE TABLE IF NOT EXISTS `Horarios` (
  `ID` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador do horário[G:o]',
  `Modo` ENUM('Funcionamento', 'Operacao', 'Entrega') NOT NULL DEFAULT 'Funcionamento' COMMENT 'Modo de trabalho disponível nesse horário, Funcionamento: horário em que o estabelecimento estará aberto, Operação: quando aceitar novos pedidos locais, Entrega: quando aceita ainda pedidos para entrega[G:o][N:Modo][F:\'Funcionamento\'][E:Funcionamento|Operação|Entrega]',
  `FuncaoID` INT NULL COMMENT 'Permite informar o horário de acesso ao sistema para realizar essa função[G:a][N:Função]',
  `PrestadorID` INT NULL COMMENT 'Permite informar o horário de prestação de serviço para esse prestador[G:o][N:Prestador]',
  `IntegracaoID` INT NULL DEFAULT NULL COMMENT 'Permite informar o horário de atendimento para cada integração[G:a][N:Integração]',
  `Inicio` INT NOT NULL COMMENT 'Início do horário de funcionamento em minutos contando a partir de domingo até sábado[N:Início][G:o]',
  `Fim` INT NOT NULL COMMENT 'Horário final de funcionamento do estabelecimento contando em minutos a partir de domingo[N:Fim][G:o]',
  `Mensagem` VARCHAR(200) NULL DEFAULT NULL COMMENT 'Mensagem que será mostrada quando o estabelecimento estiver fechado por algum motivo[G:o][N:Mensagem]',
  `Fechado` ENUM('Y', 'N') NOT NULL DEFAULT 'N' COMMENT 'Informa se o estabelecimento estará fechado nesse horário programado, o início e fim será tempo no formato unix, quando verdadeiro tem prioridade sobre todos os horários[G:o][N:Fechado]',
  PRIMARY KEY (`ID`),
  INDEX `FK_Horarios_Integracoes_IntegracaoID_idx` (`IntegracaoID` ASC),
  INDEX `FK_Horarios_Prestadores_PrestadorID_idx` (`PrestadorID` ASC),
  INDEX `FK_Horarios_Funcoes_FuncaoID_idx` (`FuncaoID` ASC),
  CONSTRAINT `FK_Horarios_Integracoes_IntegracaoID`
    FOREIGN KEY (`IntegracaoID`)
    REFERENCES `Integracoes` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Horarios_Prestadores_PrestadorID`
    FOREIGN KEY (`PrestadorID`)
    REFERENCES `Prestadores` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Horarios_Funcoes_FuncaoID`
    FOREIGN KEY (`FuncaoID`)
    REFERENCES `Funcoes` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB
COMMENT = 'Informa o horário de funcionamento do estabelecimento[N:Horário|Horários][G:o][L:AlterarHorario][K:MZ\\Company|MZ\\Company\\][H:SyncModel]';


-- -----------------------------------------------------
-- Table `Valores_Nutricionais`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Valores_Nutricionais` ;

CREATE TABLE IF NOT EXISTS `Valores_Nutricionais` (
  `ID` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador do valor nutricional[G:o]',
  `InformacaoID` INT NOT NULL COMMENT 'Informe a que tabela nutricional este valor pertence[N:Informação][G:a][S:S]',
  `UnidadeID` INT NOT NULL COMMENT 'Unidade de medida do valor nutricional, geralmente grama, exceto para valor energético[N:Unidade][G:a]',
  `Nome` VARCHAR(100) NOT NULL COMMENT 'Nome do valor nutricional[N:Nome][G:o][S]',
  `Quantidade` DOUBLE NOT NULL COMMENT 'Quantidade do valor nutricional com base na porção[N:Quantidade][G:a]',
  `ValorDiario` DOUBLE NULL DEFAULT NULL COMMENT 'Valor diário em %[N:Valor diário][G:o]',
  PRIMARY KEY (`ID`),
  UNIQUE INDEX `InformacaoID_Nome_UNIQUE` (`InformacaoID` ASC, `Nome` ASC),
  INDEX `FK_Valores_Nutricionais_Unidades_UnidadeID_idx` (`UnidadeID` ASC),
  CONSTRAINT `FK_Valores_Nutricionais_Informacoes_InformacaoID`
    FOREIGN KEY (`InformacaoID`)
    REFERENCES `Informacoes` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Valores_Nutricionais_Unidades_UnidadeID`
    FOREIGN KEY (`UnidadeID`)
    REFERENCES `Unidades` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB
COMMENT = 'Informa todos os valores nutricionais da tabela nutricional[N:Valor nutricional|Valores nutricionais][G:o][L:CadastroProdutos][K:MZ\\Product|MZ\\Product\\][H:SyncModel]';


-- -----------------------------------------------------
-- Table `Transferencias`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Transferencias` ;

CREATE TABLE IF NOT EXISTS `Transferencias` (
  `ID` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador da transferência[G:o]',
  `PedidoID` INT NOT NULL COMMENT 'Identificador do pedido de origem[N:Pedido de origem][G:o][S][S:S]',
  `DestinoPedidoID` INT NOT NULL COMMENT 'Identificador do pedido de destino[N:Pedido de destino][G:o][S:S]',
  `Tipo` ENUM('Pedido', 'Produto') NOT NULL COMMENT 'Tipo de transferência, se de mesa/comanda ou de produto[N:Tipo][G:o]',
  `Modulo` ENUM('Mesa', 'Comanda') NOT NULL COMMENT 'Módulo de venda, se mesa ou comanda[N:Módulo][G:o][S:S]',
  `MesaID` INT NULL DEFAULT NULL COMMENT 'Identificador da mesa de origem[N:Mesa de origem][G:a][S:S]',
  `DestinoMesaID` INT NULL DEFAULT NULL COMMENT 'Mesa de destino da transferência[N:Mesa de destino][G:a][S:S]',
  `ComandaID` INT NULL DEFAULT NULL COMMENT 'Comanda de origem da transferência[N:Comanda de origem][G:a][S:S]',
  `DestinoComandaID` INT NULL DEFAULT NULL COMMENT 'Comanda de destino[N:Comanda de destino][G:a][S:S]',
  `ItemID` INT NULL DEFAULT NULL COMMENT 'Item que foi transferido[N:Item transferido][G:o][S:S]',
  `PrestadorID` INT NOT NULL COMMENT 'Prestador que transferiu esse pedido/produto[N:Prestador][G:o][S:S]',
  `DataHora` DATETIME NOT NULL COMMENT 'Data e hora da transferência[N:Data e hora][G:a][D]',
  PRIMARY KEY (`ID`),
  INDEX `FK_Transferencias_Pedidos_PedidoID_idx` (`PedidoID` ASC),
  INDEX `FK_Transferencias_Pedidos_DestinoPedidoID_idx` (`DestinoPedidoID` ASC),
  INDEX `FK_Transferencias_Mesas_MesaID_idx` (`MesaID` ASC),
  INDEX `FK_Transferencias_Mesas_DestinoMesaID_idx` (`DestinoMesaID` ASC),
  INDEX `FK_Transferencias_Prestadores_PrestadorID_idx` (`PrestadorID` ASC),
  INDEX `FK_Transferencias_Comandas_ComandaID_idx` (`ComandaID` ASC),
  INDEX `FK_Transferencias_Comandas_DestinoComandaID_idx` (`DestinoComandaID` ASC),
  INDEX `FK_Transferencias_Itens_ItemID_idx` (`ItemID` ASC),
  CONSTRAINT `FK_Transferencias_Pedidos_PedidoID`
    FOREIGN KEY (`PedidoID`)
    REFERENCES `Pedidos` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Transferencias_Pedidos_DestinoPedidoID`
    FOREIGN KEY (`DestinoPedidoID`)
    REFERENCES `Pedidos` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Transferencias_Mesas_MesaID`
    FOREIGN KEY (`MesaID`)
    REFERENCES `Mesas` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Transferencias_Mesas_DestinoMesaID`
    FOREIGN KEY (`DestinoMesaID`)
    REFERENCES `Mesas` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Transferencias_Prestadores_PrestadorID`
    FOREIGN KEY (`PrestadorID`)
    REFERENCES `Prestadores` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Transferencias_Comandas_ComandaID`
    FOREIGN KEY (`ComandaID`)
    REFERENCES `Comandas` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Transferencias_Comandas_DestinoComandaID`
    FOREIGN KEY (`DestinoComandaID`)
    REFERENCES `Comandas` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Transferencias_Itens_ItemID`
    FOREIGN KEY (`ItemID`)
    REFERENCES `Itens` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB
COMMENT = 'Informa a transferência de uma mesa / comanda para outra, ou de um produto para outra mesa / comanda[N:Transferência|Transferências][G:a][L:TransferirProdutos][K:MZ\\Sale|MZ\\Sale\\][H:SyncModel]';


-- -----------------------------------------------------
-- Table `Patrimonios`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Patrimonios` ;

CREATE TABLE IF NOT EXISTS `Patrimonios` (
  `ID` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador do bem[G:o]',
  `EmpresaID` INT NOT NULL COMMENT 'Empresa a que esse bem pertence[N:Empresa][G:a][S:S]',
  `FornecedorID` INT NULL DEFAULT NULL COMMENT 'Fornecedor do bem[N:Fornecedor][G:o][S:S]',
  `Numero` VARCHAR(45) NOT NULL COMMENT 'Número que identifica o bem[N:Número][G:o]',
  `Descricao` VARCHAR(200) NOT NULL COMMENT 'Descrição ou nome do bem[N:Descrição][G:a][S]',
  `Quantidade` DOUBLE NOT NULL COMMENT 'Quantidade do bem com as mesmas características[N:Quantidade][G:a]',
  `Altura` DOUBLE NOT NULL DEFAULT 0 COMMENT 'Altura do bem em metros[N:Altura][G:a]',
  `Largura` DOUBLE NOT NULL DEFAULT 0 COMMENT 'Largura do bem em metros[N:Largura][G:a]',
  `Comprimento` DOUBLE NOT NULL DEFAULT 0 COMMENT 'Comprimento do bem em metros[N:Comprimento][G:o]',
  `Estado` ENUM('Novo', 'Conservado', 'Ruim') NOT NULL DEFAULT 'Novo' COMMENT 'Estado de conservação do bem[N:Estado][G:o]',
  `Custo` DECIMAL(19,4) NOT NULL DEFAULT 0 COMMENT 'Valor de custo do bem[N:Custo][G:o]',
  `Valor` DECIMAL(19,4) NOT NULL DEFAULT 0 COMMENT 'Valor que o bem vale atualmente[N:Valor][G:o]',
  `Ativo` ENUM('Y', 'N') NOT NULL DEFAULT 'Y' COMMENT 'Informa se o bem está ativo e em uso[N:Ativo][G:o]',
  `ImagemAnexada` VARCHAR(200) NULL DEFAULT NULL COMMENT 'Caminho relativo da foto do bem[N:Foto do bem][G:a][I:512x512|patrimonio|patrimonio.png]',
  `DataAtualizacao` DATETIME NOT NULL COMMENT 'Data de atualização das informações do bem[N:Data de atualização][G:a][D]',
  PRIMARY KEY (`ID`),
  UNIQUE INDEX `Numero_Estado_UNIQUE` (`Numero` ASC, `Estado` ASC),
  INDEX `FK_Patrimonios_Fornecedores_FornecedorID_idx` (`FornecedorID` ASC),
  INDEX `FK_Patrimonios_Clientes_EmpresaID_idx` (`EmpresaID` ASC),
  CONSTRAINT `FK_Patrimonios_Fornecedores_FornecedorID`
    FOREIGN KEY (`FornecedorID`)
    REFERENCES `Fornecedores` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Patrimonios_Clientes_EmpresaID`
    FOREIGN KEY (`EmpresaID`)
    REFERENCES `Clientes` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB
COMMENT = 'Informa detalhadamente um bem da empresa[N:Patrimônio|Patrimônios][G:o][L:CadastroPatrimonio][K:MZ\\Environment|MZ\\Environment\\][H:SyncModel]';


-- -----------------------------------------------------
-- Table `Juncoes`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Juncoes` ;

CREATE TABLE IF NOT EXISTS `Juncoes` (
  `ID` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador da junção[G:o]',
  `MesaID` INT NOT NULL COMMENT 'Mesa que está junta ao pedido[N:Mesa][G:a][S]',
  `PedidoID` INT NOT NULL COMMENT 'Pedido a qual a mesa está junta, o pedido deve ser de uma mesa[N:Pedido][G:o][S:S]',
  `Estado` ENUM('Associado', 'Liberado', 'Cancelado') NOT NULL COMMENT 'Estado a junção da mesa. Associado: a mesa está junta ao pedido, Liberado: A mesa está livre, Cancelado: A mesa está liberada [N:Estado][G:o]',
  `DataMovimento` DATETIME NOT NULL COMMENT 'Data e hora da junção das mesas[N:Data do movimento][G:a]',
  PRIMARY KEY (`ID`),
  INDEX `FK_Juncoes_Mesas_MesaID_idx` (`MesaID` ASC),
  INDEX `FK_Juncoes_Pedidos_PedidoID_idx` (`PedidoID` ASC),
  INDEX `MesaEstado_INDEX` (`MesaID` ASC, `Estado` ASC),
  CONSTRAINT `FK_Juncoes_Mesas_MesaID`
    FOREIGN KEY (`MesaID`)
    REFERENCES `Mesas` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Juncoes_Pedidos_PedidoID`
    FOREIGN KEY (`PedidoID`)
    REFERENCES `Pedidos` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB
COMMENT = 'Junções de mesas, informa quais mesas estão juntas ao pedido[N:Junção|Junções][G:a][L:MudarDeMesa][K:MZ\\Sale|MZ\\Sale\\][H:SyncModel]';


-- -----------------------------------------------------
-- Table `Regimes`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Regimes` ;

CREATE TABLE IF NOT EXISTS `Regimes` (
  `ID` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador do regime tributário[G:o]',
  `Codigo` INT NOT NULL COMMENT 'Código do regime tributário[G:o][N:Código]',
  `Descricao` VARCHAR(200) NOT NULL COMMENT 'Descrição do regime tributário[G:a][N:Descrição]',
  PRIMARY KEY (`ID`),
  UNIQUE INDEX `Codigo_UNIQUE` (`Codigo` ASC))
ENGINE = InnoDB
COMMENT = 'Regimes tributários[N:Regime|Regimes][G:o][L:AlterarConfiguracoes][K:MZ\\Invoice|MZ\\Invoice\\][H:SyncModel]';


-- -----------------------------------------------------
-- Table `Emitentes`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Emitentes` ;

CREATE TABLE IF NOT EXISTS `Emitentes` (
  `ID` ENUM('1') NOT NULL DEFAULT '1' COMMENT 'Identificador do emitente, sempre 1[G:o]',
  `ContadorID` INT NULL DEFAULT NULL COMMENT 'Contador responsável pela contabilidade da empresa[N:Contador][G:o][S:S]',
  `RegimeID` INT NOT NULL COMMENT 'Regime tributário da empresa[N:Regime tributário][G:o]',
  `Ambiente` ENUM('Homologacao', 'Producao') NOT NULL COMMENT 'Ambiente de emissão das notas[N:Ambiente][G:o][E:Homologação|Produção]',
  `CSC` VARCHAR(100) NOT NULL COMMENT 'Código de segurança do contribuinte[G:o]',
  `Token` VARCHAR(10) NOT NULL COMMENT 'Token do código de segurança do contribuinte[N:Token][G:o]',
  `IBPT` VARCHAR(100) NULL DEFAULT NULL COMMENT 'Token da API do IBPT[N:Token IBPT][G:o]',
  `ChavePrivada` VARCHAR(100) NOT NULL COMMENT 'Nome do arquivo da chave privada[G:a][N:Chave privada]',
  `ChavePublica` VARCHAR(100) NOT NULL COMMENT 'Nome do arquivo da chave pública[G:a][N:Chave pública]',
  `DataExpiracao` DATETIME NOT NULL COMMENT 'Data de expiração do certificado[N:Data de expiração][G:a]',
  PRIMARY KEY (`ID`),
  INDEX `FK_Emitentes_Clientes_ContadorID_idx` (`ContadorID` ASC),
  INDEX `FK_Emitentes_Regimes_RegimeID_idx` (`RegimeID` ASC),
  CONSTRAINT `FK_Emitentes_Clientes_ContadorID`
    FOREIGN KEY (`ContadorID`)
    REFERENCES `Clientes` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Emitentes_Regimes_RegimeID`
    FOREIGN KEY (`RegimeID`)
    REFERENCES `Regimes` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB
COMMENT = 'Dados do emitente das notas fiscais[N:Emitente|Emitentes][G:o][L:AlterarConfiguracoes][K:MZ\\Invoice|MZ\\Invoice\\][H:SyncModel]';


-- -----------------------------------------------------
-- Table `Notas`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Notas` ;

CREATE TABLE IF NOT EXISTS `Notas` (
  `ID` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador da nota[G:o]',
  `Tipo` ENUM('Nota', 'Inutilizacao') NOT NULL COMMENT 'Tipo de registro se nota ou inutilização[G:o][E:Nota|Inutilização][N:Tipo]',
  `Ambiente` ENUM('Homologacao', 'Producao') NOT NULL COMMENT 'Ambiente em que a nota foi gerada[G:o][N:Ambiente][E:Homologação|Produção]',
  `Acao` ENUM('Autorizar', 'Cancelar', 'Inutilizar') NOT NULL COMMENT 'Ação que deve ser tomada sobre a nota fiscal[N:Ação][E:Autorizar|Cancelar|Inutilizar]',
  `Estado` ENUM('Aberto', 'Assinado', 'Pendente', 'Processamento', 'Denegado', 'Rejeitado', 'Cancelado', 'Inutilizado', 'Autorizado') NOT NULL COMMENT 'Estado da nota[G:o][N:Estado][E:Aberto|Assinado|Pendente|Em processamento|Denegado|Rejeitado|Cancelado|Inutilizado|Autorizado]',
  `UltimoEventoID` INT NULL DEFAULT NULL COMMENT 'Último evento da nota[G:o][N:Último evento]',
  `Serie` INT NOT NULL COMMENT 'Série da nota[G:a][N:Série]',
  `NumeroInicial` INT NOT NULL COMMENT 'Número inicial da nota[G:o][N:Número]',
  `NumeroFinal` INT NOT NULL COMMENT 'Número final da nota, igual ao número inicial quando for a nota de um pedido[G:o][N:Número final]',
  `Sequencia` INT NOT NULL COMMENT 'Permite iniciar o número da nota quando alcançar 999.999.999, deve ser incrementado sempre que alcançar[G:a][N:Sequência]',
  `Chave` VARCHAR(50) NULL DEFAULT NULL COMMENT 'Chave da nota fiscal[G:a][N:Chave]',
  `Recibo` VARCHAR(50) NULL DEFAULT NULL COMMENT 'Recibo de envio para consulta posterior[G:o][N:Recibo]',
  `Protocolo` VARCHAR(80) NULL DEFAULT NULL COMMENT 'Protocolo de autorização da nota fiscal[G:o][N:Protocolo]',
  `PedidoID` INT NULL DEFAULT NULL COMMENT 'Pedido da nota[N:Pedido][S:S]',
  `Motivo` VARCHAR(255) NULL DEFAULT NULL COMMENT 'Motivo do cancelamento, contingência ou inutilização[G:o][N:Motivo]',
  `Contingencia` ENUM('Y', 'N') NOT NULL COMMENT 'Informa se a nota está em contingência[G:a][N:Contingência]',
  `ConsultaURL` VARCHAR(255) NULL DEFAULT NULL COMMENT 'URL de consulta da nota fiscal[G:o][N:URL de consulta]',
  `QRCode` TEXT NULL DEFAULT NULL COMMENT 'Dados do QRCode da nota[G:o][N:QRCode]',
  `Tributos` DECIMAL(19,4) NULL DEFAULT NULL COMMENT 'Tributos totais da nota[G:o][N:Tributos]',
  `Detalhes` VARCHAR(255) NULL DEFAULT NULL COMMENT 'Informações de interesse do contribuinte[G:a][N:Informações de interesse do contribuinte]',
  `Corrigido` ENUM('Y', 'N') NOT NULL DEFAULT 'Y' COMMENT 'Informa se os erros já foram corrigidos para retomada do processamento[G:o][N:Corrigido]',
  `Concluido` ENUM('Y', 'N') NOT NULL DEFAULT 'N' COMMENT 'Informa se todos os processamentos da nota já foram realizados[G:o][N:Concluído]',
  `DataAutorizacao` DATETIME NULL DEFAULT NULL COMMENT 'Data de autorização da nota fiscal[G:a][N:Data de autorização]',
  `DataEmissao` DATETIME NOT NULL COMMENT 'Data de emissão da nota[G:a][N:Data de emissão]',
  `DataLancamento` DATETIME NOT NULL COMMENT 'Data de lançamento da nota no sistema[G:a][N:Data de lançamento]',
  PRIMARY KEY (`ID`),
  INDEX `FK_Notas_Pedidos_PedidoID_idx` (`PedidoID` ASC),
  INDEX `IDX_Chave` (`Chave` ASC),
  INDEX `FK_Notas_Eventos_UltimoEventoID_idx` (`UltimoEventoID` ASC),
  CONSTRAINT `FK_Notas_Pedidos_PedidoID`
    FOREIGN KEY (`PedidoID`)
    REFERENCES `Pedidos` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Notas_Eventos_UltimoEventoID`
    FOREIGN KEY (`UltimoEventoID`)
    REFERENCES `Eventos` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB
COMMENT = 'Notas fiscais e inutilizações[N:Nota|Notas][G:a][L:RelatorioPedidos][K:MZ\\Invoice|MZ\\Invoice\\][H:SyncModel]';


-- -----------------------------------------------------
-- Table `Eventos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Eventos` ;

CREATE TABLE IF NOT EXISTS `Eventos` (
  `ID` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador do evento[G:o]',
  `NotaID` INT NOT NULL COMMENT 'Nota a qual o evento foi criado[G:a][N:Nota][S:S]',
  `Estado` ENUM('Aberto', 'Assinado', 'Validado', 'Pendente', 'Processamento', 'Denegado', 'Cancelado', 'Rejeitado', 'Contingencia', 'Inutilizado', 'Autorizado') NOT NULL COMMENT 'Estado do evento[G:o][N:Estado][E:Aberto|Assinado|Validado|Pendente|Em processamento|Denegado|Cancelado|Rejeitado|Contingência|Inutilizado|Autorizado]',
  `Mensagem` TEXT NOT NULL COMMENT 'Mensagem do evento, descreve que aconteceu[G:a][N:Mensagem]',
  `Codigo` VARCHAR(20) NOT NULL COMMENT 'Código de status do evento, geralmente código de erro de uma exceção[G:o][N:Código]',
  `DataCriacao` DATETIME NOT NULL COMMENT 'Data de criação do evento[G:a][N:Data de criação]',
  PRIMARY KEY (`ID`),
  INDEX `FK_Eventos_Notas_NotaID_idx` (`NotaID` ASC),
  CONSTRAINT `FK_Eventos_Notas_NotaID`
    FOREIGN KEY (`NotaID`)
    REFERENCES `Notas` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB
COMMENT = 'Eventos de envio das notas[N:Evento|Eventos][G:o][L:RelatorioAuditoria][K:MZ\\Invoice|MZ\\Invoice\\][H:SyncModel]';


-- -----------------------------------------------------
-- Table `Mapeamentos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Mapeamentos` ;

CREATE TABLE IF NOT EXISTS `Mapeamentos` (
  `ID` BIGINT NOT NULL AUTO_INCREMENT COMMENT 'Identificador do mapeamento[G:o][N:Identificador]',
  `ServidorID` INT NOT NULL COMMENT 'Servidor de onde originou esse registro[G:o][N:Servidor]',
  `Tabela` VARCHAR(45) NOT NULL COMMENT 'Tabela em que o registro foi mapeado[G:a][N:Tabela]',
  `De` INT NOT NULL COMMENT 'ID de origem que será usado para identificar o ID local[G:o][N:ID de origem]',
  `Para` INT NOT NULL COMMENT 'ID local que será utilizado para realizar operações no banco[G:o][N:ID local]',
  PRIMARY KEY (`ID`),
  INDEX `FK_Mapeamentos_Servidores_ServidorID_idx` (`ServidorID` ASC),
  UNIQUE INDEX `ServidorID_Tabela_De_UNIQUE` (`ServidorID` ASC, `Tabela` ASC, `De` DESC),
  INDEX `IDX_Tabela_Para` (`Tabela` ASC, `Para` DESC),
  CONSTRAINT `FK_Mapeamentos_Servidores_ServidorID`
    FOREIGN KEY (`ServidorID`)
    REFERENCES `Servidores` (`ID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Informa qual é o id associado de outros servidores para esse servidor[N:Mapeamento|Mapeamentos][G:o][L:AlterarConfiguracoes][K:MZ\\Database|MZ\\Database\\][H:Model]';


-- -----------------------------------------------------
-- Table `Registros`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Registros` ;

CREATE TABLE IF NOT EXISTS `Registros` (
  `ID` BIGINT NOT NULL AUTO_INCREMENT COMMENT 'Identificador do registro[G:o]',
  `ServidorID` INT NOT NULL COMMENT 'Informa o servidor de onde originou esse registro, não enviar esses registros para o próprio servidor[G:o][N:Servidor]',
  `Tabela` VARCHAR(45) NOT NULL COMMENT 'Tabela em que ocorreu o evento no registro[G:a][N:Tabela]',
  `Linha` INT NOT NULL COMMENT 'ID do registro que ocorreu o evento[G:a][N:Linha]',
  `Evento` ENUM('Inserido', 'Atualizado', 'Deletado') NOT NULL COMMENT 'Tipo de evento que foi registrado[G:o][N:Evento][E:Inserido|Atualizado|Deletado]',
  `Momento` BIGINT NOT NULL COMMENT 'Tempo no formato UNIX que ocorreu esse evento[G:o][N:Momento]',
  PRIMARY KEY (`ID`),
  INDEX `FK_Registros_Servidores_ServidorID_idx` (`ServidorID` ASC),
  INDEX `IDX_Tabela_Linha` (`Tabela` ASC, `Linha` DESC),
  CONSTRAINT `FK_Registros_Servidores_ServidorID`
    FOREIGN KEY (`ServidorID`)
    REFERENCES `Servidores` (`ID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Registra qualquer alteração nas tabelas[N:Registro|Registros][G:o][L:AlterarConfiguracoes][K:MZ\\Database|MZ\\Database\\][H:Model]';


-- -----------------------------------------------------
-- Table `Empresas`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Empresas` ;

CREATE TABLE IF NOT EXISTS `Empresas` (
  `ID` ENUM('1') NOT NULL COMMENT 'Identificador único da empresa, valor 1[G:o]',
  `PaisID` INT NULL DEFAULT NULL COMMENT 'País em que a empresa está situada[N:País][G:o]',
  `EmpresaID` INT NULL DEFAULT NULL COMMENT 'Informa a empresa do cadastro de clientes, a empresa deve ser um cliente do tipo pessoa jurídica[N:Empresa][G:a][S:S]',
  `ParceiroID` INT NULL DEFAULT NULL COMMENT 'Informa quem realiza o suporte do sistema, deve ser um cliente do tipo empresa que possua um acionista como representante[N:Parceiro][G:o][S:S]',
  `Opcoes` TEXT NULL DEFAULT NULL COMMENT 'Opções gerais do sistema como opções de impressão e comportamento[N:Opções do sistema][G:a]',
  PRIMARY KEY (`ID`),
  INDEX `FK_Sistema_Clientes_EmpresaID_idx` (`EmpresaID` ASC),
  INDEX `FK_Sistema_Clientes_ParceiroID_idx` (`ParceiroID` ASC),
  INDEX `FK_Sistema_Paises_PaisID_idx` (`PaisID` ASC),
  CONSTRAINT `FK_Sistema_Clientes_EmpresaID0`
    FOREIGN KEY (`EmpresaID`)
    REFERENCES `Clientes` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Sistema_Clientes_ParceiroID0`
    FOREIGN KEY (`ParceiroID`)
    REFERENCES `Clientes` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Sistema_Paises_PaisID0`
    FOREIGN KEY (`PaisID`)
    REFERENCES `Paises` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB
COMMENT = 'Informações da empresa[N:Empresa|Empresas][G:a][L:AlterarConfiguracoes][K:MZ\\System|MZ\\System\\][H:SyncModel]';


-- -----------------------------------------------------
-- Table `Pontuacoes`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Pontuacoes` ;

CREATE TABLE IF NOT EXISTS `Pontuacoes` (
  `ID` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador da pontuação[G:o]',
  `PedidoID` INT NULL DEFAULT NULL COMMENT 'Informa se essa pontuação será usada apenas nesse pedido[G:o][N:Pedido]',
  `ItemID` INT NULL DEFAULT NULL COMMENT 'Informa qual venda originou esses pontos, tanto saída como entrada[G:o][N:Item]',
  `ClienteID` INT NULL DEFAULT NULL COMMENT 'Cliente que possui esses pontos, não informar quando tiver travado por pedido[G:o][N:Cliente]',
  `Quantidade` INT NOT NULL COMMENT 'Quantidade de pontos ganhos ou gastos[G:a][N:Quantidade]',
  `DataCadastro` DATETIME NOT NULL COMMENT 'Data de cadastro dos pontos[G:a][N:Data de cadastro]',
  PRIMARY KEY (`ID`),
  INDEX `FK_Pontuacoes_Pedidos_PedidoID_idx` (`PedidoID` ASC),
  INDEX `FK_Pontuacoes_Itens_ItemID_idx` (`ItemID` ASC),
  INDEX `FK_Pontuacoes_Clientes_ClienteID_idx` (`ClienteID` ASC),
  CONSTRAINT `FK_Pontuacoes_Pedidos_PedidoID`
    FOREIGN KEY (`PedidoID`)
    REFERENCES `Pedidos` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Pontuacoes_Itens_ItemID`
    FOREIGN KEY (`ItemID`)
    REFERENCES `Itens` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Pontuacoes_Clientes_ClienteID`
    FOREIGN KEY (`ClienteID`)
    REFERENCES `Clientes` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB
COMMENT = 'Informa os pontos ganhos e gastos por compras de produtos promocionais[N:Pontuação|Pontuações][G:a][L:CadastroProdutos][K:MZ\\Promotion|MZ\\Promotion\\][H:SyncModel]';


-- -----------------------------------------------------
-- Table `Telefones`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Telefones` ;

CREATE TABLE IF NOT EXISTS `Telefones` (
  `ID` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador do telefone[G:o]',
  `ClienteID` INT NOT NULL COMMENT 'Informa o cliente que possui esse número de telefone[G:o][N:Cliente]',
  `PaisID` INT NOT NULL COMMENT 'Informa o país desse número de telefone[G:o][N:País]',
  `Numero` VARCHAR(12) NOT NULL COMMENT 'Número de telefone com DDD[M:(99) 9999-9999?9][N:Número][G:o]',
  `Operadora` VARCHAR(45) NULL DEFAULT NULL COMMENT 'Informa qual a operadora desse telefone[G:a][N:Operadora]',
  `Servico` VARCHAR(45) NULL DEFAULT NULL COMMENT 'Informa qual serviço está associado à esse número, Ex: WhatsApp[G:o][N:Serviço]',
  `Principal` ENUM('Y', 'N') NOT NULL DEFAULT 'N' COMMENT 'Informa se o telefone é principal e exclusivo do cliente[G:o][N:Principal]',
  PRIMARY KEY (`ID`),
  INDEX `FK_Telefones_Clientes_ClienteID_idx` (`ClienteID` ASC),
  INDEX `IDX_Numero` (`Numero` ASC),
  CONSTRAINT `FK_Telefones_Clientes_ClienteID`
    FOREIGN KEY (`ClienteID`)
    REFERENCES `Clientes` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB
COMMENT = 'Telefones dos clientes, apenas o telefone principal deve ser único por cliente[N:Telefone|Telefones][G:o][L:CadastroClientes][K:MZ\\Account|MZ\\Account\\][H:SyncModel]';


-- -----------------------------------------------------
-- Table `Observacoes`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Observacoes` ;

CREATE TABLE IF NOT EXISTS `Observacoes` (
  `ID` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador da observação[G:o]',
  `ProdutoID` INT NOT NULL COMMENT 'Informa o produto que pode conter essa observação[G:o][N:Produto]',
  `Grupo` INT NOT NULL DEFAULT 0 COMMENT 'Informa o grupo de observações obrigatórias, se maior que zero, é obrigatório escolher pelo menos uma opção[F:0][G:o][N:Grupo]',
  `Descricao` VARCHAR(100) NOT NULL COMMENT 'Descrição da observação do produto[G:a][N:Descrição]',
  PRIMARY KEY (`ID`),
  INDEX `FK_Observacoes_Produtos_ProdutoID_idx` (`ProdutoID` ASC),
  UNIQUE INDEX `ProdutoID_Descricao_UNIQUE` (`ProdutoID` ASC, `Descricao` ASC),
  CONSTRAINT `FK_Observacoes_Produtos_ProdutoID`
    FOREIGN KEY (`ProdutoID`)
    REFERENCES `Produtos` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB
COMMENT = 'Observações e instruções de preparo de produto[N:Observação|Observações][G:a][L:CadastroProdutos][K:MZ\\Product|MZ\\Product\\][H:SyncModel]';


-- -----------------------------------------------------
-- Table `Cupons`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Cupons` ;

CREATE TABLE IF NOT EXISTS `Cupons` (
  `ID` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador do cupom[G:o]',
  `CupomID` INT NULL DEFAULT NULL COMMENT 'Informa de qual cupom foi usado[G:o][N:Cupom]',
  `PedidoID` INT NULL DEFAULT NULL COMMENT 'Informa qual pedido usou este cupom[G:o][N:Pedido]',
  `ClienteID` INT NULL DEFAULT NULL COMMENT 'Informa o cliente que possui e pode usar esse cupom[G:o][N:Cliente]',
  `Codigo` VARCHAR(20) NOT NULL COMMENT 'Código para uso do cupom[G:o][N:Código]',
  `Quantidade` INT NOT NULL COMMENT 'Quantidade de cupons disponíveis ou usados[G:a][N:Quantidade]',
  `TipoDesconto` ENUM('Valor', 'Porcentagem') NOT NULL COMMENT 'Informa se o desconto será por valor ou porcentagem[G:o][N:Tipo de desconto][E:Valor|Porcentagem]',
  `Valor` DECIMAL(19,4) NOT NULL COMMENT 'Valor do desconto que será aplicado no pedido[G:o][N:Valor do desconto]',
  `Porcentagem` DOUBLE NOT NULL COMMENT 'Porcentagem de desconto do pedido[G:a][N:Porcentagem]',
  `IncluirServicos` ENUM('Y', 'N') NOT NULL COMMENT 'Informa se o cupom também se aplica nos serviços[G:o][N:Contemplar serviços]',
  `LimitarPedidos` ENUM('Y', 'N') NOT NULL DEFAULT 'N' COMMENT 'Informa se deve limitar o cupom pela quantidade de pedidos válidos do cliente[G:o][N:Limitar por pedidos]',
  `FuncaoPedidos` ENUM('Menor', 'Igual', 'Maior') NOT NULL DEFAULT 'Maior' COMMENT 'Informa a regra para decidir se a quantidade de pedidos permite usar esse cupom[G:a][N:Função de limite por pedidos][E:Menor|Igual|Maior]',
  `PedidosLimite` INT NOT NULL DEFAULT 0 COMMENT 'Quantidade de pedidos válidos que permite usar esse cupom[G:a][N:Limite de pedidos]',
  `LimitarValor` ENUM('Y', 'N') NOT NULL DEFAULT 'N' COMMENT 'Informa se deve limitar o uso do cupom pelo valor do pedido[G:o][N:Limitar pelo valor]',
  `FuncaoValor` ENUM('Menor', 'Igual', 'Maior') NOT NULL DEFAULT 'Maior' COMMENT 'Informa a regra para decidir se o valor do pedido permite usar esse cupom[G:a][N:Função de limite por valor][E:Menor|Igual|Maior]',
  `ValorLimite` DECIMAL(19,4) NOT NULL DEFAULT 0 COMMENT 'Valor do pedido com os serviços que permite usar esse cupom[G:a][N:Limite de valor]',
  `Validade` DATETIME NOT NULL COMMENT 'Validade do cupom[G:a][N:Validade]',
  `DataRegistro` DATETIME NOT NULL COMMENT 'Data de registro do cupom ou do uso[G:a][N:Data de registro]',
  PRIMARY KEY (`ID`),
  INDEX `FK_Cupons_Cupons_CupomID_idx` (`CupomID` ASC),
  INDEX `FK_Cupons_Pedidos_PedidoID_idx` (`PedidoID` ASC),
  INDEX `FK_Cupons_Clientes_ClienteID_idx` (`ClienteID` ASC),
  CONSTRAINT `FK_Cupons_Cupons_CupomID`
    FOREIGN KEY (`CupomID`)
    REFERENCES `Cupons` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Cupons_Pedidos_PedidoID`
    FOREIGN KEY (`PedidoID`)
    REFERENCES `Pedidos` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Cupons_Clientes_ClienteID`
    FOREIGN KEY (`ClienteID`)
    REFERENCES `Clientes` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB
COMMENT = 'Informa os cupons de descontos e seus usos[N:Cupom|Cupons][G:o][L:CadastroProdutos][K:MZ\\Promotion|MZ\\Promotion\\][H:SyncModel]';


-- -----------------------------------------------------
-- Table `Metricas`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Metricas` ;

CREATE TABLE IF NOT EXISTS `Metricas` (
  `ID` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador da métrica[G:o]',
  `Nome` VARCHAR(100) NOT NULL COMMENT 'Nome da métrica[G:o][N:Nome]',
  `Descricao` VARCHAR(200) NULL DEFAULT NULL COMMENT 'Descreve o que deve ser avaliado pelo cliente[G:a][N:Descrição]',
  `Tipo` ENUM('Entrega', 'Atendimento', 'Producao', 'Apresentacao') NOT NULL COMMENT 'Tipo de métrica que pode ser velocidade de entrega, quantidade no atendimento, sabor da comida e apresentação do prato[G:o][N:Tipo de métrica][E:Entrega|Atendimento|Produção|Apresentação]',
  `Quantidade` INT NOT NULL COMMENT 'Quantidade das últimas avaliações para reavaliação da métrica[G:o][N:Quantidade][F:100]',
  `Avaliacao` DOUBLE NULL DEFAULT NULL COMMENT 'Média das avaliações para o período informado[G:a][N:Avaliação]',
  `DataProcessamento` DATETIME NULL DEFAULT NULL COMMENT 'Data do último processamento da avaliação[G:a][N:Data de processamento]',
  `DataArquivado` DATETIME NULL DEFAULT NULL COMMENT 'Data em que essa métrica foi arquivada[G:a][N:Data de arquivamento]',
  PRIMARY KEY (`ID`),
  UNIQUE INDEX `Nome_UNIQUE` (`Nome` ASC))
ENGINE = InnoDB
COMMENT = 'Métricas de avaliação do atendimento e outros serviços do estabelecimento[N:Métrica|Métricas][G:a][L:Pagamento][K:MZ\\Rating|MZ\\Rating\\][H:SyncModel]';


-- -----------------------------------------------------
-- Table `Avaliacoes`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Avaliacoes` ;

CREATE TABLE IF NOT EXISTS `Avaliacoes` (
  `ID` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador da avaliação[G:o]',
  `MetricaID` INT NOT NULL COMMENT 'Métrica de avaliação[G:a][N:Métrica]',
  `ClienteID` INT NULL DEFAULT NULL COMMENT 'Informa o cliente que avaliou esse pedido ou produto, obrigatório quando for avaliação de produto[G:o][N:Cliente]',
  `PedidoID` INT NULL DEFAULT NULL COMMENT 'Pedido que foi avaliado, quando nulo o produto deve ser informado[G:o][N:Pedido]',
  `ProdutoID` INT NULL DEFAULT NULL COMMENT 'Produto que foi avaliado[G:o][N:Produto]',
  `Estrelas` INT NOT NULL COMMENT 'Quantidade de estrelas de 1 a 5[G:a][N:Estrelas]',
  `Comentario` VARCHAR(255) NULL DEFAULT NULL COMMENT 'Comentário da avaliação[G:o][N:Comentário]',
  `DataAvaliacao` DATETIME NOT NULL COMMENT 'Data da avaliação[G:a][N:Data da avaliação]',
  PRIMARY KEY (`ID`),
  INDEX `FK_Avaliacoes_Clientes_ClienteID_idx` (`ClienteID` ASC),
  INDEX `FK_Avaliacoes_Metricas_MetricaID_idx` (`MetricaID` ASC),
  INDEX `FK_Avaliacoes_Pedidos_PedidoID_idx` (`PedidoID` ASC),
  INDEX `FK_Avaliacoes_Produtos_ProdutoID_idx` (`ProdutoID` ASC),
  CONSTRAINT `FK_Avaliacoes_Clientes_ClienteID`
    FOREIGN KEY (`ClienteID`)
    REFERENCES `Clientes` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Avaliacoes_Metricas_MetricaID`
    FOREIGN KEY (`MetricaID`)
    REFERENCES `Metricas` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Avaliacoes_Pedidos_PedidoID`
    FOREIGN KEY (`PedidoID`)
    REFERENCES `Pedidos` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_Avaliacoes_Produtos_ProdutoID`
    FOREIGN KEY (`ProdutoID`)
    REFERENCES `Produtos` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB
COMMENT = 'Avaliação de atendimento e outros serviços do estabelecimento[N:Avaliação|Avaliações][G:a][L:Pagamento][K:MZ\\Rating|MZ\\Rating\\][H:SyncModel]';


DELIMITER $$

DROP TRIGGER IF EXISTS `Setores_AFTER_INSERT` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Setores_AFTER_INSERT` AFTER INSERT ON `Setores` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Setores', NEW.ID, 'Inserido', UNIX_TIMESTAMP());
	INSERT INTO `Mapeamentos` (`ServidorID`, `Tabela`, `De`, `Para`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Setores', COALESCE(@FROM_ID, NEW.ID), NEW.ID);

END IF;
END $$

DROP TRIGGER IF EXISTS `Setores_AFTER_UPDATE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Setores_AFTER_UPDATE` AFTER UPDATE ON `Setores` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Setores', NEW.ID, 'Atualizado', UNIX_TIMESTAMP());

END IF;
END $$

DROP TRIGGER IF EXISTS `Setores_AFTER_DELETE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Setores_AFTER_DELETE` AFTER DELETE ON `Setores` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Setores', OLD.ID, 'Deletado', UNIX_TIMESTAMP());
	DELETE FROM `Mapeamentos`
		WHERE `Tabela` = 'Setores' AND `Para` = OLD.ID;

END IF;
END $$

DROP TRIGGER IF EXISTS `Mesas_AFTER_INSERT` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Mesas_AFTER_INSERT` AFTER INSERT ON `Mesas` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Mesas', NEW.ID, 'Inserido', UNIX_TIMESTAMP());
	INSERT INTO `Mapeamentos` (`ServidorID`, `Tabela`, `De`, `Para`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Mesas', COALESCE(@FROM_ID, NEW.ID), NEW.ID);

END IF;
END $$

DROP TRIGGER IF EXISTS `Mesas_AFTER_UPDATE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Mesas_AFTER_UPDATE` AFTER UPDATE ON `Mesas` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Mesas', NEW.ID, 'Atualizado', UNIX_TIMESTAMP());

END IF;
END $$

DROP TRIGGER IF EXISTS `Mesas_AFTER_DELETE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Mesas_AFTER_DELETE` AFTER DELETE ON `Mesas` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Mesas', OLD.ID, 'Deletado', UNIX_TIMESTAMP());
	DELETE FROM `Mapeamentos`
		WHERE `Tabela` = 'Mesas' AND `Para` = OLD.ID;

END IF;
END $$

DROP TRIGGER IF EXISTS `Sessoes_AFTER_INSERT` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Sessoes_AFTER_INSERT` AFTER INSERT ON `Sessoes` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Sessoes', NEW.ID, 'Inserido', UNIX_TIMESTAMP());
	INSERT INTO `Mapeamentos` (`ServidorID`, `Tabela`, `De`, `Para`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Sessoes', COALESCE(@FROM_ID, NEW.ID), NEW.ID);

END IF;
END $$

DROP TRIGGER IF EXISTS `Sessoes_AFTER_UPDATE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Sessoes_AFTER_UPDATE` AFTER UPDATE ON `Sessoes` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Sessoes', NEW.ID, 'Atualizado', UNIX_TIMESTAMP());

END IF;
END $$

DROP TRIGGER IF EXISTS `Sessoes_AFTER_DELETE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Sessoes_AFTER_DELETE` AFTER DELETE ON `Sessoes` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Sessoes', OLD.ID, 'Deletado', UNIX_TIMESTAMP());
	DELETE FROM `Mapeamentos`
		WHERE `Tabela` = 'Sessoes' AND `Para` = OLD.ID;

END IF;
END $$

DROP TRIGGER IF EXISTS `Bancos_AFTER_INSERT` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Bancos_AFTER_INSERT` AFTER INSERT ON `Bancos` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Bancos', NEW.ID, 'Inserido', UNIX_TIMESTAMP());
	INSERT INTO `Mapeamentos` (`ServidorID`, `Tabela`, `De`, `Para`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Bancos', COALESCE(@FROM_ID, NEW.ID), NEW.ID);

END IF;
END $$

DROP TRIGGER IF EXISTS `Bancos_AFTER_UPDATE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Bancos_AFTER_UPDATE` AFTER UPDATE ON `Bancos` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Bancos', NEW.ID, 'Atualizado', UNIX_TIMESTAMP());

END IF;
END $$

DROP TRIGGER IF EXISTS `Bancos_AFTER_DELETE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Bancos_AFTER_DELETE` AFTER DELETE ON `Bancos` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Bancos', OLD.ID, 'Deletado', UNIX_TIMESTAMP());
	DELETE FROM `Mapeamentos`
		WHERE `Tabela` = 'Bancos' AND `Para` = OLD.ID;

END IF;
END $$

DROP TRIGGER IF EXISTS `Carteiras_AFTER_INSERT` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Carteiras_AFTER_INSERT` AFTER INSERT ON `Carteiras` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Carteiras', NEW.ID, 'Inserido', UNIX_TIMESTAMP());
	INSERT INTO `Mapeamentos` (`ServidorID`, `Tabela`, `De`, `Para`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Carteiras', COALESCE(@FROM_ID, NEW.ID), NEW.ID);

END IF;
END $$

DROP TRIGGER IF EXISTS `Carteiras_AFTER_UPDATE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Carteiras_AFTER_UPDATE` AFTER UPDATE ON `Carteiras` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Carteiras', NEW.ID, 'Atualizado', UNIX_TIMESTAMP());

END IF;
END $$

DROP TRIGGER IF EXISTS `Carteiras_AFTER_DELETE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Carteiras_AFTER_DELETE` AFTER DELETE ON `Carteiras` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Carteiras', OLD.ID, 'Deletado', UNIX_TIMESTAMP());
	DELETE FROM `Mapeamentos`
		WHERE `Tabela` = 'Carteiras' AND `Para` = OLD.ID;

END IF;
END $$

DROP TRIGGER IF EXISTS `Caixas_AFTER_INSERT` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Caixas_AFTER_INSERT` AFTER INSERT ON `Caixas` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Caixas', NEW.ID, 'Inserido', UNIX_TIMESTAMP());
	INSERT INTO `Mapeamentos` (`ServidorID`, `Tabela`, `De`, `Para`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Caixas', COALESCE(@FROM_ID, NEW.ID), NEW.ID);

END IF;
END $$

DROP TRIGGER IF EXISTS `Caixas_AFTER_UPDATE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Caixas_AFTER_UPDATE` AFTER UPDATE ON `Caixas` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Caixas', NEW.ID, 'Atualizado', UNIX_TIMESTAMP());

END IF;
END $$

DROP TRIGGER IF EXISTS `Caixas_AFTER_DELETE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Caixas_AFTER_DELETE` AFTER DELETE ON `Caixas` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Caixas', OLD.ID, 'Deletado', UNIX_TIMESTAMP());
	DELETE FROM `Mapeamentos`
		WHERE `Tabela` = 'Caixas' AND `Para` = OLD.ID;

END IF;
END $$

DROP TRIGGER IF EXISTS `Integracoes_AFTER_INSERT` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Integracoes_AFTER_INSERT` AFTER INSERT ON `Integracoes` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Integracoes', NEW.ID, 'Inserido', UNIX_TIMESTAMP());
	INSERT INTO `Mapeamentos` (`ServidorID`, `Tabela`, `De`, `Para`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Integracoes', COALESCE(@FROM_ID, NEW.ID), NEW.ID);

END IF;
END $$

DROP TRIGGER IF EXISTS `Integracoes_AFTER_UPDATE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Integracoes_AFTER_UPDATE` AFTER UPDATE ON `Integracoes` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Integracoes', NEW.ID, 'Atualizado', UNIX_TIMESTAMP());

END IF;
END $$

DROP TRIGGER IF EXISTS `Integracoes_AFTER_DELETE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Integracoes_AFTER_DELETE` AFTER DELETE ON `Integracoes` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Integracoes', OLD.ID, 'Deletado', UNIX_TIMESTAMP());
	DELETE FROM `Mapeamentos`
		WHERE `Tabela` = 'Integracoes' AND `Para` = OLD.ID;

END IF;
END $$

DROP TRIGGER IF EXISTS `Formas_Pagto_AFTER_INSERT` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Formas_Pagto_AFTER_INSERT` AFTER INSERT ON `Formas_Pagto` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Formas_Pagto', NEW.ID, 'Inserido', UNIX_TIMESTAMP());
	INSERT INTO `Mapeamentos` (`ServidorID`, `Tabela`, `De`, `Para`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Formas_Pagto', COALESCE(@FROM_ID, NEW.ID), NEW.ID);

END IF;
END $$

DROP TRIGGER IF EXISTS `Formas_Pagto_AFTER_UPDATE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Formas_Pagto_AFTER_UPDATE` AFTER UPDATE ON `Formas_Pagto` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Formas_Pagto', NEW.ID, 'Atualizado', UNIX_TIMESTAMP());

END IF;
END $$

DROP TRIGGER IF EXISTS `Formas_Pagto_AFTER_DELETE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Formas_Pagto_AFTER_DELETE` AFTER DELETE ON `Formas_Pagto` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Formas_Pagto', OLD.ID, 'Deletado', UNIX_TIMESTAMP());
	DELETE FROM `Mapeamentos`
		WHERE `Tabela` = 'Formas_Pagto' AND `Para` = OLD.ID;

END IF;
END $$

DROP TRIGGER IF EXISTS `Cartoes_AFTER_INSERT` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Cartoes_AFTER_INSERT` AFTER INSERT ON `Cartoes` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Cartoes', NEW.ID, 'Inserido', UNIX_TIMESTAMP());
	INSERT INTO `Mapeamentos` (`ServidorID`, `Tabela`, `De`, `Para`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Cartoes', COALESCE(@FROM_ID, NEW.ID), NEW.ID);

END IF;
END $$

DROP TRIGGER IF EXISTS `Cartoes_AFTER_UPDATE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Cartoes_AFTER_UPDATE` AFTER UPDATE ON `Cartoes` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Cartoes', NEW.ID, 'Atualizado', UNIX_TIMESTAMP());

END IF;
END $$

DROP TRIGGER IF EXISTS `Cartoes_AFTER_DELETE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Cartoes_AFTER_DELETE` AFTER DELETE ON `Cartoes` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Cartoes', OLD.ID, 'Deletado', UNIX_TIMESTAMP());
	DELETE FROM `Mapeamentos`
		WHERE `Tabela` = 'Cartoes' AND `Para` = OLD.ID;

END IF;
END $$

DROP TRIGGER IF EXISTS `Funcoes_AFTER_INSERT` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Funcoes_AFTER_INSERT` AFTER INSERT ON `Funcoes` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Funcoes', NEW.ID, 'Inserido', UNIX_TIMESTAMP());
	INSERT INTO `Mapeamentos` (`ServidorID`, `Tabela`, `De`, `Para`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Funcoes', COALESCE(@FROM_ID, NEW.ID), NEW.ID);

END IF;
END $$

DROP TRIGGER IF EXISTS `Funcoes_AFTER_UPDATE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Funcoes_AFTER_UPDATE` AFTER UPDATE ON `Funcoes` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Funcoes', NEW.ID, 'Atualizado', UNIX_TIMESTAMP());

END IF;
END $$

DROP TRIGGER IF EXISTS `Funcoes_AFTER_DELETE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Funcoes_AFTER_DELETE` AFTER DELETE ON `Funcoes` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Funcoes', OLD.ID, 'Deletado', UNIX_TIMESTAMP());
	DELETE FROM `Mapeamentos`
		WHERE `Tabela` = 'Funcoes' AND `Para` = OLD.ID;

END IF;
END $$

DROP TRIGGER IF EXISTS `Clientes_AFTER_INSERT` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Clientes_AFTER_INSERT` AFTER INSERT ON `Clientes` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Clientes', NEW.ID, 'Inserido', UNIX_TIMESTAMP());
	INSERT INTO `Mapeamentos` (`ServidorID`, `Tabela`, `De`, `Para`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Clientes', COALESCE(@FROM_ID, NEW.ID), NEW.ID);

END IF;
END $$

DROP TRIGGER IF EXISTS `Clientes_AFTER_UPDATE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Clientes_AFTER_UPDATE` AFTER UPDATE ON `Clientes` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Clientes', NEW.ID, 'Atualizado', UNIX_TIMESTAMP());

END IF;
END $$

DROP TRIGGER IF EXISTS `Clientes_AFTER_DELETE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Clientes_AFTER_DELETE` AFTER DELETE ON `Clientes` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Clientes', OLD.ID, 'Deletado', UNIX_TIMESTAMP());
	DELETE FROM `Mapeamentos`
		WHERE `Tabela` = 'Clientes' AND `Para` = OLD.ID;

END IF;
END $$

DROP TRIGGER IF EXISTS `Prestadores_AFTER_INSERT` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Prestadores_AFTER_INSERT` AFTER INSERT ON `Prestadores` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Prestadores', NEW.ID, 'Inserido', UNIX_TIMESTAMP());
	INSERT INTO `Mapeamentos` (`ServidorID`, `Tabela`, `De`, `Para`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Prestadores', COALESCE(@FROM_ID, NEW.ID), NEW.ID);

END IF;
END $$

DROP TRIGGER IF EXISTS `Prestadores_AFTER_UPDATE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Prestadores_AFTER_UPDATE` AFTER UPDATE ON `Prestadores` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Prestadores', NEW.ID, 'Atualizado', UNIX_TIMESTAMP());

END IF;
END $$

DROP TRIGGER IF EXISTS `Prestadores_AFTER_DELETE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Prestadores_AFTER_DELETE` AFTER DELETE ON `Prestadores` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Prestadores', OLD.ID, 'Deletado', UNIX_TIMESTAMP());
	DELETE FROM `Mapeamentos`
		WHERE `Tabela` = 'Prestadores' AND `Para` = OLD.ID;

END IF;
END $$

DROP TRIGGER IF EXISTS `Moedas_AFTER_INSERT` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Moedas_AFTER_INSERT` AFTER INSERT ON `Moedas` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Moedas', NEW.ID, 'Inserido', UNIX_TIMESTAMP());
	INSERT INTO `Mapeamentos` (`ServidorID`, `Tabela`, `De`, `Para`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Moedas', COALESCE(@FROM_ID, NEW.ID), NEW.ID);

END IF;
END $$

DROP TRIGGER IF EXISTS `Moedas_AFTER_UPDATE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Moedas_AFTER_UPDATE` AFTER UPDATE ON `Moedas` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Moedas', NEW.ID, 'Atualizado', UNIX_TIMESTAMP());

END IF;
END $$

DROP TRIGGER IF EXISTS `Moedas_AFTER_DELETE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Moedas_AFTER_DELETE` AFTER DELETE ON `Moedas` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Moedas', OLD.ID, 'Deletado', UNIX_TIMESTAMP());
	DELETE FROM `Mapeamentos`
		WHERE `Tabela` = 'Moedas' AND `Para` = OLD.ID;

END IF;
END $$

DROP TRIGGER IF EXISTS `Paises_AFTER_INSERT` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Paises_AFTER_INSERT` AFTER INSERT ON `Paises` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Paises', NEW.ID, 'Inserido', UNIX_TIMESTAMP());
	INSERT INTO `Mapeamentos` (`ServidorID`, `Tabela`, `De`, `Para`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Paises', COALESCE(@FROM_ID, NEW.ID), NEW.ID);

END IF;
END $$

DROP TRIGGER IF EXISTS `Paises_AFTER_UPDATE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Paises_AFTER_UPDATE` AFTER UPDATE ON `Paises` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Paises', NEW.ID, 'Atualizado', UNIX_TIMESTAMP());

END IF;
END $$

DROP TRIGGER IF EXISTS `Paises_AFTER_DELETE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Paises_AFTER_DELETE` AFTER DELETE ON `Paises` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Paises', OLD.ID, 'Deletado', UNIX_TIMESTAMP());
	DELETE FROM `Mapeamentos`
		WHERE `Tabela` = 'Paises' AND `Para` = OLD.ID;

END IF;
END $$

DROP TRIGGER IF EXISTS `Estados_AFTER_INSERT` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Estados_AFTER_INSERT` AFTER INSERT ON `Estados` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Estados', NEW.ID, 'Inserido', UNIX_TIMESTAMP());
	INSERT INTO `Mapeamentos` (`ServidorID`, `Tabela`, `De`, `Para`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Estados', COALESCE(@FROM_ID, NEW.ID), NEW.ID);

END IF;
END $$

DROP TRIGGER IF EXISTS `Estados_AFTER_UPDATE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Estados_AFTER_UPDATE` AFTER UPDATE ON `Estados` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Estados', NEW.ID, 'Atualizado', UNIX_TIMESTAMP());

END IF;
END $$

DROP TRIGGER IF EXISTS `Estados_AFTER_DELETE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Estados_AFTER_DELETE` AFTER DELETE ON `Estados` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Estados', OLD.ID, 'Deletado', UNIX_TIMESTAMP());
	DELETE FROM `Mapeamentos`
		WHERE `Tabela` = 'Estados' AND `Para` = OLD.ID;

END IF;
END $$

DROP TRIGGER IF EXISTS `Cidades_AFTER_INSERT` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Cidades_AFTER_INSERT` AFTER INSERT ON `Cidades` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Cidades', NEW.ID, 'Inserido', UNIX_TIMESTAMP());
	INSERT INTO `Mapeamentos` (`ServidorID`, `Tabela`, `De`, `Para`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Cidades', COALESCE(@FROM_ID, NEW.ID), NEW.ID);

END IF;
END $$

DROP TRIGGER IF EXISTS `Cidades_AFTER_UPDATE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Cidades_AFTER_UPDATE` AFTER UPDATE ON `Cidades` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Cidades', NEW.ID, 'Atualizado', UNIX_TIMESTAMP());

END IF;
END $$

DROP TRIGGER IF EXISTS `Cidades_AFTER_DELETE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Cidades_AFTER_DELETE` AFTER DELETE ON `Cidades` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Cidades', OLD.ID, 'Deletado', UNIX_TIMESTAMP());
	DELETE FROM `Mapeamentos`
		WHERE `Tabela` = 'Cidades' AND `Para` = OLD.ID;

END IF;
END $$

DROP TRIGGER IF EXISTS `Bairros_AFTER_INSERT` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Bairros_AFTER_INSERT` AFTER INSERT ON `Bairros` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Bairros', NEW.ID, 'Inserido', UNIX_TIMESTAMP());
	INSERT INTO `Mapeamentos` (`ServidorID`, `Tabela`, `De`, `Para`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Bairros', COALESCE(@FROM_ID, NEW.ID), NEW.ID);

END IF;
END $$

DROP TRIGGER IF EXISTS `Bairros_AFTER_UPDATE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Bairros_AFTER_UPDATE` AFTER UPDATE ON `Bairros` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Bairros', NEW.ID, 'Atualizado', UNIX_TIMESTAMP());

END IF;
END $$

DROP TRIGGER IF EXISTS `Bairros_AFTER_DELETE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Bairros_AFTER_DELETE` AFTER DELETE ON `Bairros` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Bairros', OLD.ID, 'Deletado', UNIX_TIMESTAMP());
	DELETE FROM `Mapeamentos`
		WHERE `Tabela` = 'Bairros' AND `Para` = OLD.ID;

END IF;
END $$

DROP TRIGGER IF EXISTS `Zonas_AFTER_INSERT` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Zonas_AFTER_INSERT` AFTER INSERT ON `Zonas` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Zonas', NEW.ID, 'Inserido', UNIX_TIMESTAMP());
	INSERT INTO `Mapeamentos` (`ServidorID`, `Tabela`, `De`, `Para`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Zonas', COALESCE(@FROM_ID, NEW.ID), NEW.ID);

END IF;
END $$

DROP TRIGGER IF EXISTS `Zonas_AFTER_UPDATE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Zonas_AFTER_UPDATE` AFTER UPDATE ON `Zonas` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Zonas', NEW.ID, 'Atualizado', UNIX_TIMESTAMP());

END IF;
END $$

DROP TRIGGER IF EXISTS `Zonas_AFTER_DELETE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Zonas_AFTER_DELETE` AFTER DELETE ON `Zonas` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Zonas', OLD.ID, 'Deletado', UNIX_TIMESTAMP());
	DELETE FROM `Mapeamentos`
		WHERE `Tabela` = 'Zonas' AND `Para` = OLD.ID;

END IF;
END $$

DROP TRIGGER IF EXISTS `Localizacoes_AFTER_INSERT` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Localizacoes_AFTER_INSERT` AFTER INSERT ON `Localizacoes` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Localizacoes', NEW.ID, 'Inserido', UNIX_TIMESTAMP());
	INSERT INTO `Mapeamentos` (`ServidorID`, `Tabela`, `De`, `Para`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Localizacoes', COALESCE(@FROM_ID, NEW.ID), NEW.ID);

END IF;
END $$

DROP TRIGGER IF EXISTS `Localizacoes_AFTER_UPDATE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Localizacoes_AFTER_UPDATE` AFTER UPDATE ON `Localizacoes` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Localizacoes', NEW.ID, 'Atualizado', UNIX_TIMESTAMP());

END IF;
END $$

DROP TRIGGER IF EXISTS `Localizacoes_AFTER_DELETE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Localizacoes_AFTER_DELETE` AFTER DELETE ON `Localizacoes` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Localizacoes', OLD.ID, 'Deletado', UNIX_TIMESTAMP());
	DELETE FROM `Mapeamentos`
		WHERE `Tabela` = 'Localizacoes' AND `Para` = OLD.ID;

END IF;
END $$

DROP TRIGGER IF EXISTS `Comandas_AFTER_INSERT` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Comandas_AFTER_INSERT` AFTER INSERT ON `Comandas` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Comandas', NEW.ID, 'Inserido', UNIX_TIMESTAMP());
	INSERT INTO `Mapeamentos` (`ServidorID`, `Tabela`, `De`, `Para`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Comandas', COALESCE(@FROM_ID, NEW.ID), NEW.ID);

END IF;
END $$

DROP TRIGGER IF EXISTS `Comandas_AFTER_UPDATE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Comandas_AFTER_UPDATE` AFTER UPDATE ON `Comandas` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Comandas', NEW.ID, 'Atualizado', UNIX_TIMESTAMP());

END IF;
END $$

DROP TRIGGER IF EXISTS `Comandas_AFTER_DELETE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Comandas_AFTER_DELETE` AFTER DELETE ON `Comandas` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Comandas', OLD.ID, 'Deletado', UNIX_TIMESTAMP());
	DELETE FROM `Mapeamentos`
		WHERE `Tabela` = 'Comandas' AND `Para` = OLD.ID;

END IF;
END $$

DROP TRIGGER IF EXISTS `Viagens_AFTER_INSERT` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Viagens_AFTER_INSERT` AFTER INSERT ON `Viagens` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Viagens', NEW.ID, 'Inserido', UNIX_TIMESTAMP());
	INSERT INTO `Mapeamentos` (`ServidorID`, `Tabela`, `De`, `Para`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Viagens', COALESCE(@FROM_ID, NEW.ID), NEW.ID);

END IF;
END $$

DROP TRIGGER IF EXISTS `Viagens_AFTER_UPDATE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Viagens_AFTER_UPDATE` AFTER UPDATE ON `Viagens` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Viagens', NEW.ID, 'Atualizado', UNIX_TIMESTAMP());

END IF;
END $$

DROP TRIGGER IF EXISTS `Viagens_AFTER_DELETE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Viagens_AFTER_DELETE` AFTER DELETE ON `Viagens` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Viagens', OLD.ID, 'Deletado', UNIX_TIMESTAMP());
	DELETE FROM `Mapeamentos`
		WHERE `Tabela` = 'Viagens' AND `Para` = OLD.ID;

END IF;
END $$

DROP TRIGGER IF EXISTS `Pedidos_AFTER_INSERT` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Pedidos_AFTER_INSERT` AFTER INSERT ON `Pedidos` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Pedidos', NEW.ID, 'Inserido', UNIX_TIMESTAMP());
	INSERT INTO `Mapeamentos` (`ServidorID`, `Tabela`, `De`, `Para`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Pedidos', COALESCE(@FROM_ID, NEW.ID), NEW.ID);

END IF;
END $$

DROP TRIGGER IF EXISTS `Pedidos_AFTER_UPDATE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Pedidos_AFTER_UPDATE` AFTER UPDATE ON `Pedidos` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Pedidos', NEW.ID, 'Atualizado', UNIX_TIMESTAMP());

END IF;
END $$

DROP TRIGGER IF EXISTS `Pedidos_AFTER_DELETE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Pedidos_AFTER_DELETE` AFTER DELETE ON `Pedidos` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Pedidos', OLD.ID, 'Deletado', UNIX_TIMESTAMP());
	DELETE FROM `Mapeamentos`
		WHERE `Tabela` = 'Pedidos' AND `Para` = OLD.ID;

END IF;
END $$

DROP TRIGGER IF EXISTS `Categorias_AFTER_INSERT` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Categorias_AFTER_INSERT` AFTER INSERT ON `Categorias` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Categorias', NEW.ID, 'Inserido', UNIX_TIMESTAMP());
	INSERT INTO `Mapeamentos` (`ServidorID`, `Tabela`, `De`, `Para`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Categorias', COALESCE(@FROM_ID, NEW.ID), NEW.ID);

END IF;
END $$

DROP TRIGGER IF EXISTS `Categorias_AFTER_UPDATE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Categorias_AFTER_UPDATE` AFTER UPDATE ON `Categorias` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Categorias', NEW.ID, 'Atualizado', UNIX_TIMESTAMP());

END IF;
END $$

DROP TRIGGER IF EXISTS `Categorias_AFTER_DELETE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Categorias_AFTER_DELETE` AFTER DELETE ON `Categorias` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Categorias', OLD.ID, 'Deletado', UNIX_TIMESTAMP());
	DELETE FROM `Mapeamentos`
		WHERE `Tabela` = 'Categorias' AND `Para` = OLD.ID;

END IF;
END $$

DROP TRIGGER IF EXISTS `Unidades_AFTER_INSERT` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Unidades_AFTER_INSERT` AFTER INSERT ON `Unidades` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Unidades', NEW.ID, 'Inserido', UNIX_TIMESTAMP());
	INSERT INTO `Mapeamentos` (`ServidorID`, `Tabela`, `De`, `Para`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Unidades', COALESCE(@FROM_ID, NEW.ID), NEW.ID);

END IF;
END $$

DROP TRIGGER IF EXISTS `Unidades_AFTER_UPDATE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Unidades_AFTER_UPDATE` AFTER UPDATE ON `Unidades` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Unidades', NEW.ID, 'Atualizado', UNIX_TIMESTAMP());

END IF;
END $$

DROP TRIGGER IF EXISTS `Unidades_AFTER_DELETE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Unidades_AFTER_DELETE` AFTER DELETE ON `Unidades` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Unidades', OLD.ID, 'Deletado', UNIX_TIMESTAMP());
	DELETE FROM `Mapeamentos`
		WHERE `Tabela` = 'Unidades' AND `Para` = OLD.ID;

END IF;
END $$

DROP TRIGGER IF EXISTS `Origens_AFTER_INSERT` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Origens_AFTER_INSERT` AFTER INSERT ON `Origens` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Origens', NEW.ID, 'Inserido', UNIX_TIMESTAMP());
	INSERT INTO `Mapeamentos` (`ServidorID`, `Tabela`, `De`, `Para`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Origens', COALESCE(@FROM_ID, NEW.ID), NEW.ID);

END IF;
END $$

DROP TRIGGER IF EXISTS `Origens_AFTER_UPDATE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Origens_AFTER_UPDATE` AFTER UPDATE ON `Origens` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Origens', NEW.ID, 'Atualizado', UNIX_TIMESTAMP());

END IF;
END $$

DROP TRIGGER IF EXISTS `Origens_AFTER_DELETE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Origens_AFTER_DELETE` AFTER DELETE ON `Origens` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Origens', OLD.ID, 'Deletado', UNIX_TIMESTAMP());
	DELETE FROM `Mapeamentos`
		WHERE `Tabela` = 'Origens' AND `Para` = OLD.ID;

END IF;
END $$

DROP TRIGGER IF EXISTS `Operacoes_AFTER_INSERT` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Operacoes_AFTER_INSERT` AFTER INSERT ON `Operacoes` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Operacoes', NEW.ID, 'Inserido', UNIX_TIMESTAMP());
	INSERT INTO `Mapeamentos` (`ServidorID`, `Tabela`, `De`, `Para`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Operacoes', COALESCE(@FROM_ID, NEW.ID), NEW.ID);

END IF;
END $$

DROP TRIGGER IF EXISTS `Operacoes_AFTER_UPDATE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Operacoes_AFTER_UPDATE` AFTER UPDATE ON `Operacoes` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Operacoes', NEW.ID, 'Atualizado', UNIX_TIMESTAMP());

END IF;
END $$

DROP TRIGGER IF EXISTS `Operacoes_AFTER_DELETE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Operacoes_AFTER_DELETE` AFTER DELETE ON `Operacoes` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Operacoes', OLD.ID, 'Deletado', UNIX_TIMESTAMP());
	DELETE FROM `Mapeamentos`
		WHERE `Tabela` = 'Operacoes' AND `Para` = OLD.ID;

END IF;
END $$

DROP TRIGGER IF EXISTS `Impostos_AFTER_INSERT` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Impostos_AFTER_INSERT` AFTER INSERT ON `Impostos` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Impostos', NEW.ID, 'Inserido', UNIX_TIMESTAMP());
	INSERT INTO `Mapeamentos` (`ServidorID`, `Tabela`, `De`, `Para`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Impostos', COALESCE(@FROM_ID, NEW.ID), NEW.ID);

END IF;
END $$

DROP TRIGGER IF EXISTS `Impostos_AFTER_UPDATE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Impostos_AFTER_UPDATE` AFTER UPDATE ON `Impostos` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Impostos', NEW.ID, 'Atualizado', UNIX_TIMESTAMP());

END IF;
END $$

DROP TRIGGER IF EXISTS `Impostos_AFTER_DELETE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Impostos_AFTER_DELETE` AFTER DELETE ON `Impostos` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Impostos', OLD.ID, 'Deletado', UNIX_TIMESTAMP());
	DELETE FROM `Mapeamentos`
		WHERE `Tabela` = 'Impostos' AND `Para` = OLD.ID;

END IF;
END $$

DROP TRIGGER IF EXISTS `Tributacoes_AFTER_INSERT` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Tributacoes_AFTER_INSERT` AFTER INSERT ON `Tributacoes` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Tributacoes', NEW.ID, 'Inserido', UNIX_TIMESTAMP());
	INSERT INTO `Mapeamentos` (`ServidorID`, `Tabela`, `De`, `Para`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Tributacoes', COALESCE(@FROM_ID, NEW.ID), NEW.ID);

END IF;
END $$

DROP TRIGGER IF EXISTS `Tributacoes_AFTER_UPDATE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Tributacoes_AFTER_UPDATE` AFTER UPDATE ON `Tributacoes` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Tributacoes', NEW.ID, 'Atualizado', UNIX_TIMESTAMP());

END IF;
END $$

DROP TRIGGER IF EXISTS `Tributacoes_AFTER_DELETE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Tributacoes_AFTER_DELETE` AFTER DELETE ON `Tributacoes` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Tributacoes', OLD.ID, 'Deletado', UNIX_TIMESTAMP());
	DELETE FROM `Mapeamentos`
		WHERE `Tabela` = 'Tributacoes' AND `Para` = OLD.ID;

END IF;
END $$

DROP TRIGGER IF EXISTS `Produtos_AFTER_INSERT` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Produtos_AFTER_INSERT` AFTER INSERT ON `Produtos` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Produtos', NEW.ID, 'Inserido', UNIX_TIMESTAMP());
	INSERT INTO `Mapeamentos` (`ServidorID`, `Tabela`, `De`, `Para`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Produtos', COALESCE(@FROM_ID, NEW.ID), NEW.ID);

END IF;
END $$

DROP TRIGGER IF EXISTS `Produtos_AFTER_UPDATE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Produtos_AFTER_UPDATE` AFTER UPDATE ON `Produtos` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Produtos', NEW.ID, 'Atualizado', UNIX_TIMESTAMP());

END IF;
END $$

DROP TRIGGER IF EXISTS `Produtos_AFTER_DELETE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Produtos_AFTER_DELETE` AFTER DELETE ON `Produtos` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Produtos', OLD.ID, 'Deletado', UNIX_TIMESTAMP());
	DELETE FROM `Mapeamentos`
		WHERE `Tabela` = 'Produtos' AND `Para` = OLD.ID;

END IF;
END $$

DROP TRIGGER IF EXISTS `Servicos_AFTER_INSERT` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Servicos_AFTER_INSERT` AFTER INSERT ON `Servicos` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Servicos', NEW.ID, 'Inserido', UNIX_TIMESTAMP());
	INSERT INTO `Mapeamentos` (`ServidorID`, `Tabela`, `De`, `Para`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Servicos', COALESCE(@FROM_ID, NEW.ID), NEW.ID);

END IF;
END $$

DROP TRIGGER IF EXISTS `Servicos_AFTER_UPDATE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Servicos_AFTER_UPDATE` AFTER UPDATE ON `Servicos` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Servicos', NEW.ID, 'Atualizado', UNIX_TIMESTAMP());

END IF;
END $$

DROP TRIGGER IF EXISTS `Servicos_AFTER_DELETE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Servicos_AFTER_DELETE` AFTER DELETE ON `Servicos` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Servicos', OLD.ID, 'Deletado', UNIX_TIMESTAMP());
	DELETE FROM `Mapeamentos`
		WHERE `Tabela` = 'Servicos' AND `Para` = OLD.ID;

END IF;
END $$

DROP TRIGGER IF EXISTS `Classificacoes_AFTER_INSERT` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Classificacoes_AFTER_INSERT` AFTER INSERT ON `Classificacoes` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Classificacoes', NEW.ID, 'Inserido', UNIX_TIMESTAMP());
	INSERT INTO `Mapeamentos` (`ServidorID`, `Tabela`, `De`, `Para`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Classificacoes', COALESCE(@FROM_ID, NEW.ID), NEW.ID);

END IF;
END $$

DROP TRIGGER IF EXISTS `Classificacoes_AFTER_UPDATE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Classificacoes_AFTER_UPDATE` AFTER UPDATE ON `Classificacoes` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Classificacoes', NEW.ID, 'Atualizado', UNIX_TIMESTAMP());

END IF;
END $$

DROP TRIGGER IF EXISTS `Classificacoes_AFTER_DELETE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Classificacoes_AFTER_DELETE` AFTER DELETE ON `Classificacoes` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Classificacoes', OLD.ID, 'Deletado', UNIX_TIMESTAMP());
	DELETE FROM `Mapeamentos`
		WHERE `Tabela` = 'Classificacoes' AND `Para` = OLD.ID;

END IF;
END $$

DROP TRIGGER IF EXISTS `Contas_AFTER_INSERT` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Contas_AFTER_INSERT` AFTER INSERT ON `Contas` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Contas', NEW.ID, 'Inserido', UNIX_TIMESTAMP());
	INSERT INTO `Mapeamentos` (`ServidorID`, `Tabela`, `De`, `Para`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Contas', COALESCE(@FROM_ID, NEW.ID), NEW.ID);

END IF;
END $$

DROP TRIGGER IF EXISTS `Contas_AFTER_UPDATE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Contas_AFTER_UPDATE` AFTER UPDATE ON `Contas` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Contas', NEW.ID, 'Atualizado', UNIX_TIMESTAMP());

END IF;
END $$

DROP TRIGGER IF EXISTS `Contas_AFTER_DELETE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Contas_AFTER_DELETE` AFTER DELETE ON `Contas` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Contas', OLD.ID, 'Deletado', UNIX_TIMESTAMP());
	DELETE FROM `Mapeamentos`
		WHERE `Tabela` = 'Contas' AND `Para` = OLD.ID;

END IF;
END $$

DROP TRIGGER IF EXISTS `Movimentacoes_AFTER_INSERT` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Movimentacoes_AFTER_INSERT` AFTER INSERT ON `Movimentacoes` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Movimentacoes', NEW.ID, 'Inserido', UNIX_TIMESTAMP());
	INSERT INTO `Mapeamentos` (`ServidorID`, `Tabela`, `De`, `Para`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Movimentacoes', COALESCE(@FROM_ID, NEW.ID), NEW.ID);

END IF;
END $$

DROP TRIGGER IF EXISTS `Movimentacoes_AFTER_UPDATE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Movimentacoes_AFTER_UPDATE` AFTER UPDATE ON `Movimentacoes` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Movimentacoes', NEW.ID, 'Atualizado', UNIX_TIMESTAMP());

END IF;
END $$

DROP TRIGGER IF EXISTS `Movimentacoes_AFTER_DELETE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Movimentacoes_AFTER_DELETE` AFTER DELETE ON `Movimentacoes` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Movimentacoes', OLD.ID, 'Deletado', UNIX_TIMESTAMP());
	DELETE FROM `Mapeamentos`
		WHERE `Tabela` = 'Movimentacoes' AND `Para` = OLD.ID;

END IF;
END $$

DROP TRIGGER IF EXISTS `Creditos_AFTER_INSERT` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Creditos_AFTER_INSERT` AFTER INSERT ON `Creditos` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Creditos', NEW.ID, 'Inserido', UNIX_TIMESTAMP());
	INSERT INTO `Mapeamentos` (`ServidorID`, `Tabela`, `De`, `Para`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Creditos', COALESCE(@FROM_ID, NEW.ID), NEW.ID);

END IF;
END $$

DROP TRIGGER IF EXISTS `Creditos_AFTER_UPDATE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Creditos_AFTER_UPDATE` AFTER UPDATE ON `Creditos` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Creditos', NEW.ID, 'Atualizado', UNIX_TIMESTAMP());

END IF;
END $$

DROP TRIGGER IF EXISTS `Creditos_AFTER_DELETE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Creditos_AFTER_DELETE` AFTER DELETE ON `Creditos` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Creditos', OLD.ID, 'Deletado', UNIX_TIMESTAMP());
	DELETE FROM `Mapeamentos`
		WHERE `Tabela` = 'Creditos' AND `Para` = OLD.ID;

END IF;
END $$

DROP TRIGGER IF EXISTS `Cheques_AFTER_INSERT` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Cheques_AFTER_INSERT` AFTER INSERT ON `Cheques` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Cheques', NEW.ID, 'Inserido', UNIX_TIMESTAMP());
	INSERT INTO `Mapeamentos` (`ServidorID`, `Tabela`, `De`, `Para`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Cheques', COALESCE(@FROM_ID, NEW.ID), NEW.ID);

END IF;
END $$

DROP TRIGGER IF EXISTS `Cheques_AFTER_UPDATE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Cheques_AFTER_UPDATE` AFTER UPDATE ON `Cheques` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Cheques', NEW.ID, 'Atualizado', UNIX_TIMESTAMP());

END IF;
END $$

DROP TRIGGER IF EXISTS `Cheques_AFTER_DELETE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Cheques_AFTER_DELETE` AFTER DELETE ON `Cheques` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Cheques', OLD.ID, 'Deletado', UNIX_TIMESTAMP());
	DELETE FROM `Mapeamentos`
		WHERE `Tabela` = 'Cheques' AND `Para` = OLD.ID;

END IF;
END $$

DROP TRIGGER IF EXISTS `Pagamentos_AFTER_INSERT` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Pagamentos_AFTER_INSERT` AFTER INSERT ON `Pagamentos` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Pagamentos', NEW.ID, 'Inserido', UNIX_TIMESTAMP());
	INSERT INTO `Mapeamentos` (`ServidorID`, `Tabela`, `De`, `Para`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Pagamentos', COALESCE(@FROM_ID, NEW.ID), NEW.ID);

END IF;
END $$

DROP TRIGGER IF EXISTS `Pagamentos_AFTER_UPDATE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Pagamentos_AFTER_UPDATE` AFTER UPDATE ON `Pagamentos` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Pagamentos', NEW.ID, 'Atualizado', UNIX_TIMESTAMP());

END IF;
END $$

DROP TRIGGER IF EXISTS `Pagamentos_AFTER_DELETE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Pagamentos_AFTER_DELETE` AFTER DELETE ON `Pagamentos` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Pagamentos', OLD.ID, 'Deletado', UNIX_TIMESTAMP());
	DELETE FROM `Mapeamentos`
		WHERE `Tabela` = 'Pagamentos' AND `Para` = OLD.ID;

END IF;
END $$

DROP TRIGGER IF EXISTS `Itens_AFTER_INSERT` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Itens_AFTER_INSERT` AFTER INSERT ON `Itens` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Itens', NEW.ID, 'Inserido', UNIX_TIMESTAMP());
	INSERT INTO `Mapeamentos` (`ServidorID`, `Tabela`, `De`, `Para`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Itens', COALESCE(@FROM_ID, NEW.ID), NEW.ID);

END IF;
END $$

DROP TRIGGER IF EXISTS `Itens_AFTER_UPDATE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Itens_AFTER_UPDATE` AFTER UPDATE ON `Itens` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Itens', NEW.ID, 'Atualizado', UNIX_TIMESTAMP());

END IF;
END $$

DROP TRIGGER IF EXISTS `Itens_AFTER_DELETE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Itens_AFTER_DELETE` AFTER DELETE ON `Itens` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Itens', OLD.ID, 'Deletado', UNIX_TIMESTAMP());
	DELETE FROM `Mapeamentos`
		WHERE `Tabela` = 'Itens' AND `Para` = OLD.ID;

END IF;
END $$

DROP TRIGGER IF EXISTS `Funcionalidades_AFTER_INSERT` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Funcionalidades_AFTER_INSERT` AFTER INSERT ON `Funcionalidades` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Funcionalidades', NEW.ID, 'Inserido', UNIX_TIMESTAMP());
	INSERT INTO `Mapeamentos` (`ServidorID`, `Tabela`, `De`, `Para`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Funcionalidades', COALESCE(@FROM_ID, NEW.ID), NEW.ID);

END IF;
END $$

DROP TRIGGER IF EXISTS `Funcionalidades_AFTER_UPDATE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Funcionalidades_AFTER_UPDATE` AFTER UPDATE ON `Funcionalidades` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Funcionalidades', NEW.ID, 'Atualizado', UNIX_TIMESTAMP());

END IF;
END $$

DROP TRIGGER IF EXISTS `Funcionalidades_AFTER_DELETE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Funcionalidades_AFTER_DELETE` AFTER DELETE ON `Funcionalidades` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Funcionalidades', OLD.ID, 'Deletado', UNIX_TIMESTAMP());
	DELETE FROM `Mapeamentos`
		WHERE `Tabela` = 'Funcionalidades' AND `Para` = OLD.ID;

END IF;
END $$

DROP TRIGGER IF EXISTS `Modulos_AFTER_INSERT` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Modulos_AFTER_INSERT` AFTER INSERT ON `Modulos` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Modulos', NEW.ID, 'Inserido', UNIX_TIMESTAMP());
	INSERT INTO `Mapeamentos` (`ServidorID`, `Tabela`, `De`, `Para`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Modulos', COALESCE(@FROM_ID, NEW.ID), NEW.ID);

END IF;
END $$

DROP TRIGGER IF EXISTS `Modulos_AFTER_UPDATE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Modulos_AFTER_UPDATE` AFTER UPDATE ON `Modulos` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Modulos', NEW.ID, 'Atualizado', UNIX_TIMESTAMP());

END IF;
END $$

DROP TRIGGER IF EXISTS `Modulos_AFTER_DELETE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Modulos_AFTER_DELETE` AFTER DELETE ON `Modulos` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Modulos', OLD.ID, 'Deletado', UNIX_TIMESTAMP());
	DELETE FROM `Mapeamentos`
		WHERE `Tabela` = 'Modulos' AND `Para` = OLD.ID;

END IF;
END $$

DROP TRIGGER IF EXISTS `Permissoes_AFTER_INSERT` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Permissoes_AFTER_INSERT` AFTER INSERT ON `Permissoes` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Permissoes', NEW.ID, 'Inserido', UNIX_TIMESTAMP());
	INSERT INTO `Mapeamentos` (`ServidorID`, `Tabela`, `De`, `Para`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Permissoes', COALESCE(@FROM_ID, NEW.ID), NEW.ID);

END IF;
END $$

DROP TRIGGER IF EXISTS `Permissoes_AFTER_UPDATE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Permissoes_AFTER_UPDATE` AFTER UPDATE ON `Permissoes` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Permissoes', NEW.ID, 'Atualizado', UNIX_TIMESTAMP());

END IF;
END $$

DROP TRIGGER IF EXISTS `Permissoes_AFTER_DELETE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Permissoes_AFTER_DELETE` AFTER DELETE ON `Permissoes` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Permissoes', OLD.ID, 'Deletado', UNIX_TIMESTAMP());
	DELETE FROM `Mapeamentos`
		WHERE `Tabela` = 'Permissoes' AND `Para` = OLD.ID;

END IF;
END $$

DROP TRIGGER IF EXISTS `Auditoria_AFTER_INSERT` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Auditoria_AFTER_INSERT` AFTER INSERT ON `Auditoria` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Auditoria', NEW.ID, 'Inserido', UNIX_TIMESTAMP());
	INSERT INTO `Mapeamentos` (`ServidorID`, `Tabela`, `De`, `Para`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Auditoria', COALESCE(@FROM_ID, NEW.ID), NEW.ID);

END IF;
END $$

DROP TRIGGER IF EXISTS `Auditoria_AFTER_UPDATE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Auditoria_AFTER_UPDATE` AFTER UPDATE ON `Auditoria` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Auditoria', NEW.ID, 'Atualizado', UNIX_TIMESTAMP());

END IF;
END $$

DROP TRIGGER IF EXISTS `Auditoria_AFTER_DELETE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Auditoria_AFTER_DELETE` AFTER DELETE ON `Auditoria` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Auditoria', OLD.ID, 'Deletado', UNIX_TIMESTAMP());
	DELETE FROM `Mapeamentos`
		WHERE `Tabela` = 'Auditoria' AND `Para` = OLD.ID;

END IF;
END $$

DROP TRIGGER IF EXISTS `Composicoes_AFTER_INSERT` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Composicoes_AFTER_INSERT` AFTER INSERT ON `Composicoes` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Composicoes', NEW.ID, 'Inserido', UNIX_TIMESTAMP());
	INSERT INTO `Mapeamentos` (`ServidorID`, `Tabela`, `De`, `Para`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Composicoes', COALESCE(@FROM_ID, NEW.ID), NEW.ID);

END IF;
END $$

DROP TRIGGER IF EXISTS `Composicoes_AFTER_UPDATE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Composicoes_AFTER_UPDATE` AFTER UPDATE ON `Composicoes` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Composicoes', NEW.ID, 'Atualizado', UNIX_TIMESTAMP());

END IF;
END $$

DROP TRIGGER IF EXISTS `Composicoes_AFTER_DELETE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Composicoes_AFTER_DELETE` AFTER DELETE ON `Composicoes` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Composicoes', OLD.ID, 'Deletado', UNIX_TIMESTAMP());
	DELETE FROM `Mapeamentos`
		WHERE `Tabela` = 'Composicoes' AND `Para` = OLD.ID;

END IF;
END $$

DROP TRIGGER IF EXISTS `Fornecedores_AFTER_INSERT` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Fornecedores_AFTER_INSERT` AFTER INSERT ON `Fornecedores` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Fornecedores', NEW.ID, 'Inserido', UNIX_TIMESTAMP());
	INSERT INTO `Mapeamentos` (`ServidorID`, `Tabela`, `De`, `Para`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Fornecedores', COALESCE(@FROM_ID, NEW.ID), NEW.ID);

END IF;
END $$

DROP TRIGGER IF EXISTS `Fornecedores_AFTER_UPDATE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Fornecedores_AFTER_UPDATE` AFTER UPDATE ON `Fornecedores` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Fornecedores', NEW.ID, 'Atualizado', UNIX_TIMESTAMP());

END IF;
END $$

DROP TRIGGER IF EXISTS `Fornecedores_AFTER_DELETE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Fornecedores_AFTER_DELETE` AFTER DELETE ON `Fornecedores` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Fornecedores', OLD.ID, 'Deletado', UNIX_TIMESTAMP());
	DELETE FROM `Mapeamentos`
		WHERE `Tabela` = 'Fornecedores' AND `Para` = OLD.ID;

END IF;
END $$

DROP TRIGGER IF EXISTS `Listas_AFTER_INSERT` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Listas_AFTER_INSERT` AFTER INSERT ON `Listas` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Listas', NEW.ID, 'Inserido', UNIX_TIMESTAMP());
	INSERT INTO `Mapeamentos` (`ServidorID`, `Tabela`, `De`, `Para`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Listas', COALESCE(@FROM_ID, NEW.ID), NEW.ID);

END IF;
END $$

DROP TRIGGER IF EXISTS `Listas_AFTER_UPDATE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Listas_AFTER_UPDATE` AFTER UPDATE ON `Listas` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Listas', NEW.ID, 'Atualizado', UNIX_TIMESTAMP());

END IF;
END $$

DROP TRIGGER IF EXISTS `Listas_AFTER_DELETE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Listas_AFTER_DELETE` AFTER DELETE ON `Listas` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Listas', OLD.ID, 'Deletado', UNIX_TIMESTAMP());
	DELETE FROM `Mapeamentos`
		WHERE `Tabela` = 'Listas' AND `Para` = OLD.ID;

END IF;
END $$

DROP TRIGGER IF EXISTS `Compras_AFTER_INSERT` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Compras_AFTER_INSERT` AFTER INSERT ON `Compras` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Compras', NEW.ID, 'Inserido', UNIX_TIMESTAMP());
	INSERT INTO `Mapeamentos` (`ServidorID`, `Tabela`, `De`, `Para`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Compras', COALESCE(@FROM_ID, NEW.ID), NEW.ID);

END IF;
END $$

DROP TRIGGER IF EXISTS `Compras_AFTER_UPDATE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Compras_AFTER_UPDATE` AFTER UPDATE ON `Compras` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Compras', NEW.ID, 'Atualizado', UNIX_TIMESTAMP());

END IF;
END $$

DROP TRIGGER IF EXISTS `Compras_AFTER_DELETE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Compras_AFTER_DELETE` AFTER DELETE ON `Compras` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Compras', OLD.ID, 'Deletado', UNIX_TIMESTAMP());
	DELETE FROM `Mapeamentos`
		WHERE `Tabela` = 'Compras' AND `Para` = OLD.ID;

END IF;
END $$

DROP TRIGGER IF EXISTS `Requisitos_AFTER_INSERT` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Requisitos_AFTER_INSERT` AFTER INSERT ON `Requisitos` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Requisitos', NEW.ID, 'Inserido', UNIX_TIMESTAMP());
	INSERT INTO `Mapeamentos` (`ServidorID`, `Tabela`, `De`, `Para`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Requisitos', COALESCE(@FROM_ID, NEW.ID), NEW.ID);

END IF;
END $$

DROP TRIGGER IF EXISTS `Requisitos_AFTER_UPDATE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Requisitos_AFTER_UPDATE` AFTER UPDATE ON `Requisitos` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Requisitos', NEW.ID, 'Atualizado', UNIX_TIMESTAMP());

END IF;
END $$

DROP TRIGGER IF EXISTS `Requisitos_AFTER_DELETE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Requisitos_AFTER_DELETE` AFTER DELETE ON `Requisitos` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Requisitos', OLD.ID, 'Deletado', UNIX_TIMESTAMP());
	DELETE FROM `Mapeamentos`
		WHERE `Tabela` = 'Requisitos' AND `Para` = OLD.ID;

END IF;
END $$

DROP TRIGGER IF EXISTS `Estoque_AFTER_INSERT` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Estoque_AFTER_INSERT` AFTER INSERT ON `Estoque` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Estoque', NEW.ID, 'Inserido', UNIX_TIMESTAMP());
	INSERT INTO `Mapeamentos` (`ServidorID`, `Tabela`, `De`, `Para`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Estoque', COALESCE(@FROM_ID, NEW.ID), NEW.ID);

END IF;
END $$

DROP TRIGGER IF EXISTS `Estoque_AFTER_UPDATE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Estoque_AFTER_UPDATE` AFTER UPDATE ON `Estoque` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Estoque', NEW.ID, 'Atualizado', UNIX_TIMESTAMP());

END IF;
END $$

DROP TRIGGER IF EXISTS `Estoque_AFTER_DELETE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Estoque_AFTER_DELETE` AFTER DELETE ON `Estoque` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Estoque', OLD.ID, 'Deletado', UNIX_TIMESTAMP());
	DELETE FROM `Mapeamentos`
		WHERE `Tabela` = 'Estoque' AND `Para` = OLD.ID;

END IF;
END $$

DROP TRIGGER IF EXISTS `Grupos_AFTER_INSERT` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Grupos_AFTER_INSERT` AFTER INSERT ON `Grupos` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Grupos', NEW.ID, 'Inserido', UNIX_TIMESTAMP());
	INSERT INTO `Mapeamentos` (`ServidorID`, `Tabela`, `De`, `Para`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Grupos', COALESCE(@FROM_ID, NEW.ID), NEW.ID);

END IF;
END $$

DROP TRIGGER IF EXISTS `Grupos_AFTER_UPDATE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Grupos_AFTER_UPDATE` AFTER UPDATE ON `Grupos` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Grupos', NEW.ID, 'Atualizado', UNIX_TIMESTAMP());

END IF;
END $$

DROP TRIGGER IF EXISTS `Grupos_AFTER_DELETE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Grupos_AFTER_DELETE` AFTER DELETE ON `Grupos` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Grupos', OLD.ID, 'Deletado', UNIX_TIMESTAMP());
	DELETE FROM `Mapeamentos`
		WHERE `Tabela` = 'Grupos' AND `Para` = OLD.ID;

END IF;
END $$

DROP TRIGGER IF EXISTS `Propriedades_AFTER_INSERT` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Propriedades_AFTER_INSERT` AFTER INSERT ON `Propriedades` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Propriedades', NEW.ID, 'Inserido', UNIX_TIMESTAMP());
	INSERT INTO `Mapeamentos` (`ServidorID`, `Tabela`, `De`, `Para`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Propriedades', COALESCE(@FROM_ID, NEW.ID), NEW.ID);

END IF;
END $$

DROP TRIGGER IF EXISTS `Propriedades_AFTER_UPDATE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Propriedades_AFTER_UPDATE` AFTER UPDATE ON `Propriedades` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Propriedades', NEW.ID, 'Atualizado', UNIX_TIMESTAMP());

END IF;
END $$

DROP TRIGGER IF EXISTS `Propriedades_AFTER_DELETE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Propriedades_AFTER_DELETE` AFTER DELETE ON `Propriedades` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Propriedades', OLD.ID, 'Deletado', UNIX_TIMESTAMP());
	DELETE FROM `Mapeamentos`
		WHERE `Tabela` = 'Propriedades' AND `Para` = OLD.ID;

END IF;
END $$

DROP TRIGGER IF EXISTS `Pacotes_AFTER_INSERT` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Pacotes_AFTER_INSERT` AFTER INSERT ON `Pacotes` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Pacotes', NEW.ID, 'Inserido', UNIX_TIMESTAMP());
	INSERT INTO `Mapeamentos` (`ServidorID`, `Tabela`, `De`, `Para`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Pacotes', COALESCE(@FROM_ID, NEW.ID), NEW.ID);

END IF;
END $$

DROP TRIGGER IF EXISTS `Pacotes_AFTER_UPDATE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Pacotes_AFTER_UPDATE` AFTER UPDATE ON `Pacotes` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Pacotes', NEW.ID, 'Atualizado', UNIX_TIMESTAMP());

END IF;
END $$

DROP TRIGGER IF EXISTS `Pacotes_AFTER_DELETE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Pacotes_AFTER_DELETE` AFTER DELETE ON `Pacotes` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Pacotes', OLD.ID, 'Deletado', UNIX_TIMESTAMP());
	DELETE FROM `Mapeamentos`
		WHERE `Tabela` = 'Pacotes' AND `Para` = OLD.ID;

END IF;
END $$

DROP TRIGGER IF EXISTS `Dispositivos_AFTER_INSERT` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Dispositivos_AFTER_INSERT` AFTER INSERT ON `Dispositivos` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Dispositivos', NEW.ID, 'Inserido', UNIX_TIMESTAMP());
	INSERT INTO `Mapeamentos` (`ServidorID`, `Tabela`, `De`, `Para`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Dispositivos', COALESCE(@FROM_ID, NEW.ID), NEW.ID);

END IF;
END $$

DROP TRIGGER IF EXISTS `Dispositivos_AFTER_UPDATE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Dispositivos_AFTER_UPDATE` AFTER UPDATE ON `Dispositivos` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Dispositivos', NEW.ID, 'Atualizado', UNIX_TIMESTAMP());

END IF;
END $$

DROP TRIGGER IF EXISTS `Dispositivos_AFTER_DELETE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Dispositivos_AFTER_DELETE` AFTER DELETE ON `Dispositivos` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Dispositivos', OLD.ID, 'Deletado', UNIX_TIMESTAMP());
	DELETE FROM `Mapeamentos`
		WHERE `Tabela` = 'Dispositivos' AND `Para` = OLD.ID;

END IF;
END $$

DROP TRIGGER IF EXISTS `Impressoras_AFTER_INSERT` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Impressoras_AFTER_INSERT` AFTER INSERT ON `Impressoras` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Impressoras', NEW.ID, 'Inserido', UNIX_TIMESTAMP());
	INSERT INTO `Mapeamentos` (`ServidorID`, `Tabela`, `De`, `Para`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Impressoras', COALESCE(@FROM_ID, NEW.ID), NEW.ID);

END IF;
END $$

DROP TRIGGER IF EXISTS `Impressoras_AFTER_UPDATE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Impressoras_AFTER_UPDATE` AFTER UPDATE ON `Impressoras` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Impressoras', NEW.ID, 'Atualizado', UNIX_TIMESTAMP());

END IF;
END $$

DROP TRIGGER IF EXISTS `Impressoras_AFTER_DELETE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Impressoras_AFTER_DELETE` AFTER DELETE ON `Impressoras` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Impressoras', OLD.ID, 'Deletado', UNIX_TIMESTAMP());
	DELETE FROM `Mapeamentos`
		WHERE `Tabela` = 'Impressoras' AND `Para` = OLD.ID;

END IF;
END $$

DROP TRIGGER IF EXISTS `Promocoes_AFTER_INSERT` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Promocoes_AFTER_INSERT` AFTER INSERT ON `Promocoes` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Promocoes', NEW.ID, 'Inserido', UNIX_TIMESTAMP());
	INSERT INTO `Mapeamentos` (`ServidorID`, `Tabela`, `De`, `Para`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Promocoes', COALESCE(@FROM_ID, NEW.ID), NEW.ID);

END IF;
END $$

DROP TRIGGER IF EXISTS `Promocoes_AFTER_UPDATE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Promocoes_AFTER_UPDATE` AFTER UPDATE ON `Promocoes` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Promocoes', NEW.ID, 'Atualizado', UNIX_TIMESTAMP());

END IF;
END $$

DROP TRIGGER IF EXISTS `Promocoes_AFTER_DELETE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Promocoes_AFTER_DELETE` AFTER DELETE ON `Promocoes` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Promocoes', OLD.ID, 'Deletado', UNIX_TIMESTAMP());
	DELETE FROM `Mapeamentos`
		WHERE `Tabela` = 'Promocoes' AND `Para` = OLD.ID;

END IF;
END $$

DROP TRIGGER IF EXISTS `Acessos_AFTER_INSERT` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Acessos_AFTER_INSERT` AFTER INSERT ON `Acessos` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Acessos', NEW.ID, 'Inserido', UNIX_TIMESTAMP());
	INSERT INTO `Mapeamentos` (`ServidorID`, `Tabela`, `De`, `Para`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Acessos', COALESCE(@FROM_ID, NEW.ID), NEW.ID);

END IF;
END $$

DROP TRIGGER IF EXISTS `Acessos_AFTER_UPDATE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Acessos_AFTER_UPDATE` AFTER UPDATE ON `Acessos` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Acessos', NEW.ID, 'Atualizado', UNIX_TIMESTAMP());

END IF;
END $$

DROP TRIGGER IF EXISTS `Acessos_AFTER_DELETE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Acessos_AFTER_DELETE` AFTER DELETE ON `Acessos` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Acessos', OLD.ID, 'Deletado', UNIX_TIMESTAMP());
	DELETE FROM `Mapeamentos`
		WHERE `Tabela` = 'Acessos' AND `Para` = OLD.ID;

END IF;
END $$

DROP TRIGGER IF EXISTS `Catalogos_AFTER_INSERT` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Catalogos_AFTER_INSERT` AFTER INSERT ON `Catalogos` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Catalogos', NEW.ID, 'Inserido', UNIX_TIMESTAMP());
	INSERT INTO `Mapeamentos` (`ServidorID`, `Tabela`, `De`, `Para`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Catalogos', COALESCE(@FROM_ID, NEW.ID), NEW.ID);

END IF;
END $$

DROP TRIGGER IF EXISTS `Catalogos_AFTER_UPDATE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Catalogos_AFTER_UPDATE` AFTER UPDATE ON `Catalogos` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Catalogos', NEW.ID, 'Atualizado', UNIX_TIMESTAMP());

END IF;
END $$

DROP TRIGGER IF EXISTS `Catalogos_AFTER_DELETE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Catalogos_AFTER_DELETE` AFTER DELETE ON `Catalogos` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Catalogos', OLD.ID, 'Deletado', UNIX_TIMESTAMP());
	DELETE FROM `Mapeamentos`
		WHERE `Tabela` = 'Catalogos' AND `Para` = OLD.ID;

END IF;
END $$

DROP TRIGGER IF EXISTS `Informacoes_AFTER_INSERT` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Informacoes_AFTER_INSERT` AFTER INSERT ON `Informacoes` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Informacoes', NEW.ID, 'Inserido', UNIX_TIMESTAMP());
	INSERT INTO `Mapeamentos` (`ServidorID`, `Tabela`, `De`, `Para`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Informacoes', COALESCE(@FROM_ID, NEW.ID), NEW.ID);

END IF;
END $$

DROP TRIGGER IF EXISTS `Informacoes_AFTER_UPDATE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Informacoes_AFTER_UPDATE` AFTER UPDATE ON `Informacoes` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Informacoes', NEW.ID, 'Atualizado', UNIX_TIMESTAMP());

END IF;
END $$

DROP TRIGGER IF EXISTS `Informacoes_AFTER_DELETE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Informacoes_AFTER_DELETE` AFTER DELETE ON `Informacoes` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Informacoes', OLD.ID, 'Deletado', UNIX_TIMESTAMP());
	DELETE FROM `Mapeamentos`
		WHERE `Tabela` = 'Informacoes' AND `Para` = OLD.ID;

END IF;
END $$

DROP TRIGGER IF EXISTS `Resumos_AFTER_INSERT` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Resumos_AFTER_INSERT` AFTER INSERT ON `Resumos` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Resumos', NEW.ID, 'Inserido', UNIX_TIMESTAMP());
	INSERT INTO `Mapeamentos` (`ServidorID`, `Tabela`, `De`, `Para`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Resumos', COALESCE(@FROM_ID, NEW.ID), NEW.ID);

END IF;
END $$

DROP TRIGGER IF EXISTS `Resumos_AFTER_UPDATE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Resumos_AFTER_UPDATE` AFTER UPDATE ON `Resumos` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Resumos', NEW.ID, 'Atualizado', UNIX_TIMESTAMP());

END IF;
END $$

DROP TRIGGER IF EXISTS `Resumos_AFTER_DELETE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Resumos_AFTER_DELETE` AFTER DELETE ON `Resumos` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Resumos', OLD.ID, 'Deletado', UNIX_TIMESTAMP());
	DELETE FROM `Mapeamentos`
		WHERE `Tabela` = 'Resumos' AND `Para` = OLD.ID;

END IF;
END $$

DROP TRIGGER IF EXISTS `Formacoes_AFTER_INSERT` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Formacoes_AFTER_INSERT` AFTER INSERT ON `Formacoes` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Formacoes', NEW.ID, 'Inserido', UNIX_TIMESTAMP());
	INSERT INTO `Mapeamentos` (`ServidorID`, `Tabela`, `De`, `Para`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Formacoes', COALESCE(@FROM_ID, NEW.ID), NEW.ID);

END IF;
END $$

DROP TRIGGER IF EXISTS `Formacoes_AFTER_UPDATE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Formacoes_AFTER_UPDATE` AFTER UPDATE ON `Formacoes` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Formacoes', NEW.ID, 'Atualizado', UNIX_TIMESTAMP());

END IF;
END $$

DROP TRIGGER IF EXISTS `Formacoes_AFTER_DELETE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Formacoes_AFTER_DELETE` AFTER DELETE ON `Formacoes` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Formacoes', OLD.ID, 'Deletado', UNIX_TIMESTAMP());
	DELETE FROM `Mapeamentos`
		WHERE `Tabela` = 'Formacoes' AND `Para` = OLD.ID;

END IF;
END $$

DROP TRIGGER IF EXISTS `Enderecos_AFTER_INSERT` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Enderecos_AFTER_INSERT` AFTER INSERT ON `Enderecos` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Enderecos', NEW.ID, 'Inserido', UNIX_TIMESTAMP());
	INSERT INTO `Mapeamentos` (`ServidorID`, `Tabela`, `De`, `Para`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Enderecos', COALESCE(@FROM_ID, NEW.ID), NEW.ID);

END IF;
END $$

DROP TRIGGER IF EXISTS `Enderecos_AFTER_UPDATE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Enderecos_AFTER_UPDATE` AFTER UPDATE ON `Enderecos` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Enderecos', NEW.ID, 'Atualizado', UNIX_TIMESTAMP());

END IF;
END $$

DROP TRIGGER IF EXISTS `Enderecos_AFTER_DELETE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Enderecos_AFTER_DELETE` AFTER DELETE ON `Enderecos` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Enderecos', OLD.ID, 'Deletado', UNIX_TIMESTAMP());
	DELETE FROM `Mapeamentos`
		WHERE `Tabela` = 'Enderecos' AND `Para` = OLD.ID;

END IF;
END $$

DROP TRIGGER IF EXISTS `Horarios_AFTER_INSERT` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Horarios_AFTER_INSERT` AFTER INSERT ON `Horarios` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Horarios', NEW.ID, 'Inserido', UNIX_TIMESTAMP());
	INSERT INTO `Mapeamentos` (`ServidorID`, `Tabela`, `De`, `Para`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Horarios', COALESCE(@FROM_ID, NEW.ID), NEW.ID);

END IF;
END $$

DROP TRIGGER IF EXISTS `Horarios_AFTER_UPDATE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Horarios_AFTER_UPDATE` AFTER UPDATE ON `Horarios` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Horarios', NEW.ID, 'Atualizado', UNIX_TIMESTAMP());

END IF;
END $$

DROP TRIGGER IF EXISTS `Horarios_AFTER_DELETE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Horarios_AFTER_DELETE` AFTER DELETE ON `Horarios` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Horarios', OLD.ID, 'Deletado', UNIX_TIMESTAMP());
	DELETE FROM `Mapeamentos`
		WHERE `Tabela` = 'Horarios' AND `Para` = OLD.ID;

END IF;
END $$

DROP TRIGGER IF EXISTS `Valores_Nutricionais_AFTER_INSERT` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Valores_Nutricionais_AFTER_INSERT` AFTER INSERT ON `Valores_Nutricionais` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Valores_Nutricionais', NEW.ID, 'Inserido', UNIX_TIMESTAMP());
	INSERT INTO `Mapeamentos` (`ServidorID`, `Tabela`, `De`, `Para`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Valores_Nutricionais', COALESCE(@FROM_ID, NEW.ID), NEW.ID);

END IF;
END $$

DROP TRIGGER IF EXISTS `Valores_Nutricionais_AFTER_UPDATE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Valores_Nutricionais_AFTER_UPDATE` AFTER UPDATE ON `Valores_Nutricionais` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Valores_Nutricionais', NEW.ID, 'Atualizado', UNIX_TIMESTAMP());

END IF;
END $$

DROP TRIGGER IF EXISTS `Valores_Nutricionais_AFTER_DELETE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Valores_Nutricionais_AFTER_DELETE` AFTER DELETE ON `Valores_Nutricionais` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Valores_Nutricionais', OLD.ID, 'Deletado', UNIX_TIMESTAMP());
	DELETE FROM `Mapeamentos`
		WHERE `Tabela` = 'Valores_Nutricionais' AND `Para` = OLD.ID;

END IF;
END $$

DROP TRIGGER IF EXISTS `Transferencias_AFTER_INSERT` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Transferencias_AFTER_INSERT` AFTER INSERT ON `Transferencias` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Transferencias', NEW.ID, 'Inserido', UNIX_TIMESTAMP());
	INSERT INTO `Mapeamentos` (`ServidorID`, `Tabela`, `De`, `Para`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Transferencias', COALESCE(@FROM_ID, NEW.ID), NEW.ID);

END IF;
END $$

DROP TRIGGER IF EXISTS `Transferencias_AFTER_UPDATE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Transferencias_AFTER_UPDATE` AFTER UPDATE ON `Transferencias` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Transferencias', NEW.ID, 'Atualizado', UNIX_TIMESTAMP());

END IF;
END $$

DROP TRIGGER IF EXISTS `Transferencias_AFTER_DELETE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Transferencias_AFTER_DELETE` AFTER DELETE ON `Transferencias` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Transferencias', OLD.ID, 'Deletado', UNIX_TIMESTAMP());
	DELETE FROM `Mapeamentos`
		WHERE `Tabela` = 'Transferencias' AND `Para` = OLD.ID;

END IF;
END $$

DROP TRIGGER IF EXISTS `Patrimonios_AFTER_INSERT` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Patrimonios_AFTER_INSERT` AFTER INSERT ON `Patrimonios` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Patrimonios', NEW.ID, 'Inserido', UNIX_TIMESTAMP());
	INSERT INTO `Mapeamentos` (`ServidorID`, `Tabela`, `De`, `Para`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Patrimonios', COALESCE(@FROM_ID, NEW.ID), NEW.ID);

END IF;
END $$

DROP TRIGGER IF EXISTS `Patrimonios_AFTER_UPDATE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Patrimonios_AFTER_UPDATE` AFTER UPDATE ON `Patrimonios` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Patrimonios', NEW.ID, 'Atualizado', UNIX_TIMESTAMP());

END IF;
END $$

DROP TRIGGER IF EXISTS `Patrimonios_AFTER_DELETE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Patrimonios_AFTER_DELETE` AFTER DELETE ON `Patrimonios` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Patrimonios', OLD.ID, 'Deletado', UNIX_TIMESTAMP());
	DELETE FROM `Mapeamentos`
		WHERE `Tabela` = 'Patrimonios' AND `Para` = OLD.ID;

END IF;
END $$

DROP TRIGGER IF EXISTS `Juncoes_AFTER_INSERT` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Juncoes_AFTER_INSERT` AFTER INSERT ON `Juncoes` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Juncoes', NEW.ID, 'Inserido', UNIX_TIMESTAMP());
	INSERT INTO `Mapeamentos` (`ServidorID`, `Tabela`, `De`, `Para`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Juncoes', COALESCE(@FROM_ID, NEW.ID), NEW.ID);

END IF;
END $$

DROP TRIGGER IF EXISTS `Juncoes_AFTER_UPDATE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Juncoes_AFTER_UPDATE` AFTER UPDATE ON `Juncoes` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Juncoes', NEW.ID, 'Atualizado', UNIX_TIMESTAMP());

END IF;
END $$

DROP TRIGGER IF EXISTS `Juncoes_AFTER_DELETE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Juncoes_AFTER_DELETE` AFTER DELETE ON `Juncoes` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Juncoes', OLD.ID, 'Deletado', UNIX_TIMESTAMP());
	DELETE FROM `Mapeamentos`
		WHERE `Tabela` = 'Juncoes' AND `Para` = OLD.ID;

END IF;
END $$

DROP TRIGGER IF EXISTS `Regimes_AFTER_INSERT` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Regimes_AFTER_INSERT` AFTER INSERT ON `Regimes` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Regimes', NEW.ID, 'Inserido', UNIX_TIMESTAMP());
	INSERT INTO `Mapeamentos` (`ServidorID`, `Tabela`, `De`, `Para`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Regimes', COALESCE(@FROM_ID, NEW.ID), NEW.ID);

END IF;
END $$

DROP TRIGGER IF EXISTS `Regimes_AFTER_UPDATE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Regimes_AFTER_UPDATE` AFTER UPDATE ON `Regimes` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Regimes', NEW.ID, 'Atualizado', UNIX_TIMESTAMP());

END IF;
END $$

DROP TRIGGER IF EXISTS `Regimes_AFTER_DELETE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Regimes_AFTER_DELETE` AFTER DELETE ON `Regimes` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Regimes', OLD.ID, 'Deletado', UNIX_TIMESTAMP());
	DELETE FROM `Mapeamentos`
		WHERE `Tabela` = 'Regimes' AND `Para` = OLD.ID;

END IF;
END $$

DROP TRIGGER IF EXISTS `Emitentes_AFTER_INSERT` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Emitentes_AFTER_INSERT` AFTER INSERT ON `Emitentes` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Emitentes', NEW.ID, 'Inserido', UNIX_TIMESTAMP());
	INSERT INTO `Mapeamentos` (`ServidorID`, `Tabela`, `De`, `Para`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Emitentes', COALESCE(@FROM_ID, NEW.ID), NEW.ID);

END IF;
END $$

DROP TRIGGER IF EXISTS `Emitentes_AFTER_UPDATE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Emitentes_AFTER_UPDATE` AFTER UPDATE ON `Emitentes` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Emitentes', NEW.ID, 'Atualizado', UNIX_TIMESTAMP());

END IF;
END $$

DROP TRIGGER IF EXISTS `Emitentes_AFTER_DELETE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Emitentes_AFTER_DELETE` AFTER DELETE ON `Emitentes` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Emitentes', OLD.ID, 'Deletado', UNIX_TIMESTAMP());
	DELETE FROM `Mapeamentos`
		WHERE `Tabela` = 'Emitentes' AND `Para` = OLD.ID;

END IF;
END $$

DROP TRIGGER IF EXISTS `Notas_AFTER_INSERT` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Notas_AFTER_INSERT` AFTER INSERT ON `Notas` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Notas', NEW.ID, 'Inserido', UNIX_TIMESTAMP());
	INSERT INTO `Mapeamentos` (`ServidorID`, `Tabela`, `De`, `Para`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Notas', COALESCE(@FROM_ID, NEW.ID), NEW.ID);

END IF;
END $$

DROP TRIGGER IF EXISTS `Notas_AFTER_UPDATE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Notas_AFTER_UPDATE` AFTER UPDATE ON `Notas` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Notas', NEW.ID, 'Atualizado', UNIX_TIMESTAMP());

END IF;
END $$

DROP TRIGGER IF EXISTS `Notas_AFTER_DELETE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Notas_AFTER_DELETE` AFTER DELETE ON `Notas` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Notas', OLD.ID, 'Deletado', UNIX_TIMESTAMP());
	DELETE FROM `Mapeamentos`
		WHERE `Tabela` = 'Notas' AND `Para` = OLD.ID;

END IF;
END $$

DROP TRIGGER IF EXISTS `Eventos_AFTER_INSERT` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Eventos_AFTER_INSERT` AFTER INSERT ON `Eventos` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Eventos', NEW.ID, 'Inserido', UNIX_TIMESTAMP());
	INSERT INTO `Mapeamentos` (`ServidorID`, `Tabela`, `De`, `Para`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Eventos', COALESCE(@FROM_ID, NEW.ID), NEW.ID);

END IF;
END $$

DROP TRIGGER IF EXISTS `Eventos_AFTER_UPDATE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Eventos_AFTER_UPDATE` AFTER UPDATE ON `Eventos` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Eventos', NEW.ID, 'Atualizado', UNIX_TIMESTAMP());

END IF;
END $$

DROP TRIGGER IF EXISTS `Eventos_AFTER_DELETE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Eventos_AFTER_DELETE` AFTER DELETE ON `Eventos` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Eventos', OLD.ID, 'Deletado', UNIX_TIMESTAMP());
	DELETE FROM `Mapeamentos`
		WHERE `Tabela` = 'Eventos' AND `Para` = OLD.ID;

END IF;
END $$

DROP TRIGGER IF EXISTS `Empresas_AFTER_INSERT` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Empresas_AFTER_INSERT` AFTER INSERT ON `Empresas` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Empresas', NEW.ID, 'Inserido', UNIX_TIMESTAMP());
	INSERT INTO `Mapeamentos` (`ServidorID`, `Tabela`, `De`, `Para`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Empresas', COALESCE(@FROM_ID, NEW.ID), NEW.ID);

END IF;
END $$

DROP TRIGGER IF EXISTS `Empresas_AFTER_UPDATE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Empresas_AFTER_UPDATE` AFTER UPDATE ON `Empresas` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Empresas', NEW.ID, 'Atualizado', UNIX_TIMESTAMP());

END IF;
END $$

DROP TRIGGER IF EXISTS `Empresas_AFTER_DELETE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Empresas_AFTER_DELETE` AFTER DELETE ON `Empresas` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Empresas', OLD.ID, 'Deletado', UNIX_TIMESTAMP());
	DELETE FROM `Mapeamentos`
		WHERE `Tabela` = 'Empresas' AND `Para` = OLD.ID;

END IF;
END $$

DROP TRIGGER IF EXISTS `Pontuacoes_AFTER_INSERT` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Pontuacoes_AFTER_INSERT` AFTER INSERT ON `Pontuacoes` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Pontuacoes', NEW.ID, 'Inserido', UNIX_TIMESTAMP());
	INSERT INTO `Mapeamentos` (`ServidorID`, `Tabela`, `De`, `Para`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Pontuacoes', COALESCE(@FROM_ID, NEW.ID), NEW.ID);

END IF;
END $$

DROP TRIGGER IF EXISTS `Pontuacoes_AFTER_UPDATE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Pontuacoes_AFTER_UPDATE` AFTER UPDATE ON `Pontuacoes` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Pontuacoes', NEW.ID, 'Atualizado', UNIX_TIMESTAMP());

END IF;
END $$

DROP TRIGGER IF EXISTS `Pontuacoes_AFTER_DELETE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Pontuacoes_AFTER_DELETE` AFTER DELETE ON `Pontuacoes` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Pontuacoes', OLD.ID, 'Deletado', UNIX_TIMESTAMP());
	DELETE FROM `Mapeamentos`
		WHERE `Tabela` = 'Pontuacoes' AND `Para` = OLD.ID;

END IF;
END $$

DROP TRIGGER IF EXISTS `Telefones_AFTER_INSERT` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Telefones_AFTER_INSERT` AFTER INSERT ON `Telefones` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Telefones', NEW.ID, 'Inserido', UNIX_TIMESTAMP());
	INSERT INTO `Mapeamentos` (`ServidorID`, `Tabela`, `De`, `Para`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Telefones', COALESCE(@FROM_ID, NEW.ID), NEW.ID);

END IF;
END $$

DROP TRIGGER IF EXISTS `Telefones_AFTER_UPDATE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Telefones_AFTER_UPDATE` AFTER UPDATE ON `Telefones` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Telefones', NEW.ID, 'Atualizado', UNIX_TIMESTAMP());

END IF;
END $$

DROP TRIGGER IF EXISTS `Telefones_AFTER_DELETE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Telefones_AFTER_DELETE` AFTER DELETE ON `Telefones` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Telefones', OLD.ID, 'Deletado', UNIX_TIMESTAMP());
	DELETE FROM `Mapeamentos`
		WHERE `Tabela` = 'Telefones' AND `Para` = OLD.ID;

END IF;
END $$

DROP TRIGGER IF EXISTS `Observacoes_AFTER_INSERT` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Observacoes_AFTER_INSERT` AFTER INSERT ON `Observacoes` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Observacoes', NEW.ID, 'Inserido', UNIX_TIMESTAMP());
	INSERT INTO `Mapeamentos` (`ServidorID`, `Tabela`, `De`, `Para`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Observacoes', COALESCE(@FROM_ID, NEW.ID), NEW.ID);

END IF;
END $$

DROP TRIGGER IF EXISTS `Observacoes_AFTER_UPDATE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Observacoes_AFTER_UPDATE` AFTER UPDATE ON `Observacoes` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Observacoes', NEW.ID, 'Atualizado', UNIX_TIMESTAMP());

END IF;
END $$

DROP TRIGGER IF EXISTS `Observacoes_AFTER_DELETE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Observacoes_AFTER_DELETE` AFTER DELETE ON `Observacoes` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Observacoes', OLD.ID, 'Deletado', UNIX_TIMESTAMP());
	DELETE FROM `Mapeamentos`
		WHERE `Tabela` = 'Observacoes' AND `Para` = OLD.ID;

END IF;
END $$

DROP TRIGGER IF EXISTS `Cupons_AFTER_INSERT` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Cupons_AFTER_INSERT` AFTER INSERT ON `Cupons` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Cupons', NEW.ID, 'Inserido', UNIX_TIMESTAMP());
	INSERT INTO `Mapeamentos` (`ServidorID`, `Tabela`, `De`, `Para`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Cupons', COALESCE(@FROM_ID, NEW.ID), NEW.ID);

END IF;
END $$

DROP TRIGGER IF EXISTS `Cupons_AFTER_UPDATE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Cupons_AFTER_UPDATE` AFTER UPDATE ON `Cupons` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Cupons', NEW.ID, 'Atualizado', UNIX_TIMESTAMP());

END IF;
END $$

DROP TRIGGER IF EXISTS `Cupons_AFTER_DELETE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Cupons_AFTER_DELETE` AFTER DELETE ON `Cupons` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Cupons', OLD.ID, 'Deletado', UNIX_TIMESTAMP());
	DELETE FROM `Mapeamentos`
		WHERE `Tabela` = 'Cupons' AND `Para` = OLD.ID;

END IF;
END $$

DROP TRIGGER IF EXISTS `Metricas_AFTER_INSERT` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Metricas_AFTER_INSERT` AFTER INSERT ON `Metricas` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Metricas', NEW.ID, 'Inserido', UNIX_TIMESTAMP());
	INSERT INTO `Mapeamentos` (`ServidorID`, `Tabela`, `De`, `Para`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Metricas', COALESCE(@FROM_ID, NEW.ID), NEW.ID);

END IF;
END $$

DROP TRIGGER IF EXISTS `Metricas_AFTER_UPDATE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Metricas_AFTER_UPDATE` AFTER UPDATE ON `Metricas` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Metricas', NEW.ID, 'Atualizado', UNIX_TIMESTAMP());

END IF;
END $$

DROP TRIGGER IF EXISTS `Metricas_AFTER_DELETE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Metricas_AFTER_DELETE` AFTER DELETE ON `Metricas` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Metricas', OLD.ID, 'Deletado', UNIX_TIMESTAMP());
	DELETE FROM `Mapeamentos`
		WHERE `Tabela` = 'Metricas' AND `Para` = OLD.ID;

END IF;
END $$

DROP TRIGGER IF EXISTS `Avaliacoes_AFTER_INSERT` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Avaliacoes_AFTER_INSERT` AFTER INSERT ON `Avaliacoes` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Avaliacoes', NEW.ID, 'Inserido', UNIX_TIMESTAMP());
	INSERT INTO `Mapeamentos` (`ServidorID`, `Tabela`, `De`, `Para`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Avaliacoes', COALESCE(@FROM_ID, NEW.ID), NEW.ID);

END IF;
END $$

DROP TRIGGER IF EXISTS `Avaliacoes_AFTER_UPDATE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Avaliacoes_AFTER_UPDATE` AFTER UPDATE ON `Avaliacoes` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Avaliacoes', NEW.ID, 'Atualizado', UNIX_TIMESTAMP());

END IF;
END $$

DROP TRIGGER IF EXISTS `Avaliacoes_AFTER_DELETE` $$
CREATE DEFINER = CURRENT_USER TRIGGER `Avaliacoes_AFTER_DELETE` AFTER DELETE ON `Avaliacoes` FOR EACH ROW
BEGIN
	DECLARE LOCAL_ID INT;
IF @@FOREIGN_KEY_CHECKS THEN

	SELECT ServidorID INTO LOCAL_ID FROM Sistema WHERE ID = '1';
	INSERT INTO `Registros` (`ServidorID`, `Tabela`, `Linha`, `Evento`, `Momento`) VALUES
		(COALESCE(@SERVER_ID, LOCAL_ID), 'Avaliacoes', OLD.ID, 'Deletado', UNIX_TIMESTAMP());
	DELETE FROM `Mapeamentos`
		WHERE `Tabela` = 'Avaliacoes' AND `Para` = OLD.ID;

END IF;
END $$

DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
