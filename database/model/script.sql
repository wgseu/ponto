-- MySQL Script generated by MySQL Workbench
-- Tue 19 Nov 2019 07:44:16 PM -03
-- Model: GrandChef Model    Version: 2.0.0.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema GrandChef
-- -----------------------------------------------------
-- Armazena todas as informações do sistema GrandChef, exceto configurações de janelas, conexão e lembrete de sessão

-- -----------------------------------------------------
-- Table `setores`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `setores` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador do setor[G:o]',
  `setor_id` INT NULL DEFAULT NULL COMMENT 'Informa o setor que abrange esse subsetor[G:o][N:Setor superior]',
  `nome` VARCHAR(50) NOT NULL COMMENT 'Nome do setor, único em todo o sistema[N:Nome][G:o][S]',
  `descricao` VARCHAR(70) NULL DEFAULT NULL COMMENT 'Descreve a utilização do setor[N:Descrição][G:a]',
  PRIMARY KEY (`id`),
  UNIQUE INDEX `nome_UNIQUE` (`nome` ASC),
  INDEX `FK_setores_setor_id_idx` (`setor_id` ASC),
  CONSTRAINT `FK_setores_setor_id`
    FOREIGN KEY (`setor_id`)
    REFERENCES `setores` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Setor de impressão e de estoque[N:Setor|Setores][G:o][K:App\\Models|Models\\][H:Model][L:null][ID:71]';


-- -----------------------------------------------------
-- Table `mesas`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mesas` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Número da mesa[N:Número][G:o]',
  `setor_id` INT NOT NULL COMMENT 'Setor em que a mesa está localizada[G:o][N:Setor]',
  `numero` INT NOT NULL COMMENT 'Número da mesa[G:o][N:Número]',
  `nome` VARCHAR(50) NOT NULL COMMENT 'Nome da mesa[N:Nome][G:o][S]',
  `ativa` ENUM('Y', 'N') NOT NULL DEFAULT 'Y' COMMENT 'Informa se a mesa está disponível para lançamento de pedidos[N:Ativa][G:a][F:true]',
  PRIMARY KEY (`id`),
  UNIQUE INDEX `nome_UNIQUE` (`nome` ASC),
  INDEX `FK_mesas_setor_id_idx` (`setor_id` ASC),
  UNIQUE INDEX `numero_UNIQUE` (`numero` ASC),
  CONSTRAINT `FK_mesas_setor_id`
    FOREIGN KEY (`setor_id`)
    REFERENCES `setores` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Mesas para lançamento de pedidos[N:Mesa|Mesas][G:a][K:App\\Models|Models\\][H:Model][L:1][ID:46]';


-- -----------------------------------------------------
-- Table `sessoes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sessoes` (
  `ID` INT NOT NULL AUTO_INCREMENT COMMENT 'Código da sessão[G:o]',
  `data_inicio` DATETIME NOT NULL COMMENT 'Data de início da sessão[N:Data de início][G:a]',
  `data_termino` DATETIME NULL DEFAULT NULL COMMENT 'Data de fechamento da sessão[N:Data de termíno][G:a]',
  `aberta` ENUM('Y', 'N') NOT NULL DEFAULT 'Y' COMMENT 'Informa se a sessão está aberta[N:Aberta][G:a][F:true]',
  PRIMARY KEY (`ID`),
  INDEX `aberta_INDEX` (`aberta` DESC),
  INDEX `data_inicio_INDEX` (`data_inicio` DESC),
  INDEX `data_termino_INDEX` (`data_termino` DESC))
ENGINE = InnoDB
COMMENT = 'Sessão de trabalho do dia, permite que vários caixas sejam abertos utilizando uma mesma sessão[N:Sessão|Sessões][G:a][K:App\\Models|Models\\][H:Model][L:null][ID:70]';


-- -----------------------------------------------------
-- Table `bancos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bancos` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador do banco[G:o]',
  `numero` VARCHAR(40) NOT NULL COMMENT 'Número do banco[N:Número][G:o]',
  `fantasia` VARCHAR(200) NOT NULL COMMENT 'Nome fantasia do banco[G:o][N:Fantasia][S]',
  `razao_social` VARCHAR(200) NOT NULL COMMENT 'Razão social do banco[N:Razão social][G:a][S]',
  `agencia_mascara` VARCHAR(45) NULL DEFAULT NULL COMMENT 'Mascara para formatação do número da agência[N:Máscara da agência][G:a]',
  `conta_mascara` VARCHAR(45) NULL DEFAULT NULL COMMENT 'Máscara para formatação do número da conta[N:Máscara da conta][G:a]',
  PRIMARY KEY (`id`),
  UNIQUE INDEX `razao_social_UNIQUE` (`razao_social` ASC),
  UNIQUE INDEX `numero_UNIQUE` (`numero` ASC),
  UNIQUE INDEX `fantasia_UNIQUE` (`fantasia` ASC))
ENGINE = InnoDB
COMMENT = 'Bancos disponíveis no país[N:Banco|Bancos][G:o][K:App\\Models|Models\\][H:Model][L:null][ID:6]';


-- -----------------------------------------------------
-- Table `carteiras`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `carteiras` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Código local da carteira[G:o]',
  `tipo` ENUM('bancaria', 'financeira', 'credito', 'local') NOT NULL COMMENT 'Tipo de carteira, Bancaria: para conta bancária, Financeira: para carteira financeira da empresa ou de sites de pagamentos, Credito: para cartão de crédito e Local: para caixas e cofres locais[N:Tipo][G:o][S:S][E:Bancária|Financeira|Crédito|Local]',
  `carteira_id` INT NULL DEFAULT NULL COMMENT 'Informa a carteira superior, exemplo: Banco e cartões como subcarteira[G:a][N:Carteira superior]',
  `banco_id` INT NULL DEFAULT NULL COMMENT 'Código local do banco quando a carteira for bancária[N:Banco][G:o][S:S]',
  `descricao` VARCHAR(100) NOT NULL COMMENT 'Descrição da carteira, nome dado a carteira cadastrada[N:Descrição][G:a][S]',
  `conta` VARCHAR(100) NULL DEFAULT NULL COMMENT 'Número da conta bancária ou usuário da conta de acesso da carteira[N:Conta][G:a]',
  `agencia` VARCHAR(200) NULL DEFAULT NULL COMMENT 'Número da agência da conta bancária ou site da carteira financeira[N:Agência][G:a]',
  `transacao` DECIMAL(19,4) NOT NULL DEFAULT 0 COMMENT 'Valor cobrado pela operadora de pagamento para cada transação[N:Transação][G:a][F:0]',
  `limite` DECIMAL(19,4) NULL DEFAULT NULL COMMENT 'Limite de crédito[G:o][N:Limite de crédito]',
  `token` VARCHAR(250) NULL DEFAULT NULL COMMENT 'Token para integração de pagamentos[G:o][N:Token]',
  `ambiente` ENUM('teste', 'producao') NULL DEFAULT NULL COMMENT 'Ambiente de execução da API usando o token[G:o][N:Ambiente][E:Teste|Produção]',
  `logo_url` VARCHAR(100) NULL DEFAULT NULL COMMENT 'Logo do gateway de pagamento[N:Logo][G:o][I:256x256|carteira|carteira.png]',
  `cor` VARCHAR(20) NULL DEFAULT NULL COMMENT 'Cor predominante da marca da instituição[G:a][N:Cor]',
  `ativa` ENUM('Y', 'N') NOT NULL DEFAULT 'Y' COMMENT 'Informa se a carteira ou conta bancária está ativa[N:Ativa][G:a][F:true]',
  `data_desativada` DATETIME NULL DEFAULT NULL COMMENT 'Data em que a carteira foi desativada[G:a][N:Data de desativação]',
  PRIMARY KEY (`id`),
  INDEX `FK_carteiras_banco_id_idx` (`banco_id` ASC),
  INDEX `FK_carteiras_carteira_id_idx` (`carteira_id` ASC),
  CONSTRAINT `FK_carteiras_banco_id`
    FOREIGN KEY (`banco_id`)
    REFERENCES `bancos` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `FK_carteiras_carteira_id`
    FOREIGN KEY (`carteira_id`)
    REFERENCES `carteiras` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Informa uma conta bancária ou uma carteira financeira[N:Carteira|Carteiras][G:a][K:App\\Models|Models\\][H:Model][L:null][ID:9]';


-- -----------------------------------------------------
-- Table `caixas`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `caixas` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador do caixa[G:o]',
  `carteira_id` INT NOT NULL COMMENT 'Carteira que representa a gaveta de dinheiro do caixa[G:a][N:Carteira do caixa]',
  `descricao` VARCHAR(50) NOT NULL COMMENT 'Descrição do caixa[N:Descrição][G:a][S]',
  `serie` INT NOT NULL DEFAULT 1 COMMENT 'Série do caixa[N:Série][G:a][F:1]',
  `numero_inicial` INT NOT NULL DEFAULT 1 COMMENT 'Número inicial na geração da nota, será usado quando maior que o último número utilizado[N:Número inicial][G:o][F:1]',
  `ativa` ENUM('Y', 'N') NOT NULL DEFAULT 'Y' COMMENT 'Informa se o caixa está ativo[G:a][N:Ativo][F:true]',
  `data_desativada` DATETIME NULL DEFAULT NULL COMMENT 'Informa se o caixa está ativo[N:Data da desativação][G:o]',
  PRIMARY KEY (`id`),
  UNIQUE INDEX `descricao_UNIQUE` (`descricao` ASC),
  UNIQUE INDEX `carteira_id_UNIQUE` (`carteira_id` ASC),
  CONSTRAINT `FK_caixas_carteira_id`
    FOREIGN KEY (`carteira_id`)
    REFERENCES `carteiras` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Caixas de movimentação financeira[N:Caixa|Caixas][G:o][K:App\\Models|Models\\][H:Model][L:null][ID:7]';


-- -----------------------------------------------------
-- Table `formas`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `formas` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador da forma de pagamento[G:o]',
  `tipo` ENUM('dinheiro', 'credito', 'debito', 'vale', 'cheque', 'crediario', 'saldo') NOT NULL COMMENT 'Tipo de pagamento[N:Tipo][G:o][E:Dinheiro|Cartão de credito|Cartão de débito|Vale|Cheque|Crediário|Saldo][S:S]',
  `carteira_id` INT NOT NULL COMMENT 'Carteira que será usada para entrada de valores no caixa[N:Carteira de entrada][G:a]',
  `descricao` VARCHAR(50) NOT NULL COMMENT 'Descrição da forma de pagamento[N:Descrição][G:a][S]',
  `min_parcelas` INT NOT NULL DEFAULT 1 COMMENT 'Quantidade mínima de parcelas[N:Minimo de parcelas][G:a][F:1]',
  `max_parcelas` INT NOT NULL DEFAULT 1 COMMENT 'Quantidade máxima de parcelas[N:Máximo de parcelas][G:o][F:1]',
  `parcelas_sem_juros` INT NOT NULL DEFAULT 1 COMMENT 'Quantidade de parcelas em que não será cobrado juros[N:Parcelas sem juros][G:a][F:1]',
  `juros` DOUBLE NOT NULL DEFAULT 0 COMMENT 'Juros cobrado ao cliente no parcelamento[N:Juros][G:o][F:0]',
  `ativa` ENUM('Y', 'N') NOT NULL DEFAULT 'Y' COMMENT 'Informa se a forma de pagamento está ativa[N:Ativa][G:a][F:true]',
  PRIMARY KEY (`id`),
  UNIQUE INDEX `descricao_UNIQUE` (`descricao` ASC),
  INDEX `FK_formas_carteira_id_idx` (`carteira_id` ASC),
  CONSTRAINT `FK_formas_carteira_id`
    FOREIGN KEY (`carteira_id`)
    REFERENCES `carteiras` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Formas de pagamento disponíveis para pedido e contas[N:Forma de pagamento|Formas de pagamento][G:a][K:App\\Models|Models\\][H:Model][L:null][ID:33]';


-- -----------------------------------------------------
-- Table `cartoes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cartoes` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador do cartão[G:o]',
  `forma_id` INT NOT NULL COMMENT 'Forma de pagamento associada à esse cartão ou vale[G:a][N:Forma de pagamento]',
  `carteira_id` INT NULL DEFAULT NULL COMMENT 'Carteira de entrada de valores no caixa[N:Carteira de entrada][G:a]',
  `bandeira` VARCHAR(50) NOT NULL COMMENT 'Nome da bandeira do cartão[N:Bandeira][G:a][S]',
  `taxa` DOUBLE NOT NULL DEFAULT 0 COMMENT 'Taxa em porcentagem cobrado sobre o total do pagamento, valores de 0 a 100[N:Taxa][G:a][F:0]',
  `dias_repasse` INT UNSIGNED NOT NULL DEFAULT 30 COMMENT 'Quantidade de dias para repasse do valor[N:Dias para repasse][G:o][F:30]',
  `taxa_antecipacao` DOUBLE NOT NULL DEFAULT 0 COMMENT 'Taxa em porcentagem para antecipação de recebimento de parcelas[N:Taxa de antecipação][G:a][F:0]',
  `imagem_url` VARCHAR(100) NULL DEFAULT NULL COMMENT 'Imagem do cartão[N:Imagem][G:a][I:256x256|cartao|cartao.png]',
  `ativo` ENUM('Y', 'N') NOT NULL DEFAULT 'Y' COMMENT 'Informa se o cartão está ativo[N:Ativo][G:o][F:true]',
  PRIMARY KEY (`id`),
  UNIQUE INDEX `forma_id_bandeira_UNIQUE` (`forma_id` ASC, `bandeira` ASC),
  INDEX `FK_cartoes_carteira_id_idx` (`carteira_id` ASC),
  CONSTRAINT `FK_cartoes_carteira_id`
    FOREIGN KEY (`carteira_id`)
    REFERENCES `carteiras` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `FK_cartoes_forma_id`
    FOREIGN KEY (`forma_id`)
    REFERENCES `formas` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Cartões utilizados na forma de pagamento em cartão[N:Cartão|Cartões][G:o][K:App\\Models|Models\\][H:Model][L:null][ID:10]';


-- -----------------------------------------------------
-- Table `funcoes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `funcoes` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador da função[G:o]',
  `descricao` VARCHAR(45) NOT NULL COMMENT 'Descreve o nome da função[N:Descrição][G:a][S]',
  `remuneracao` DECIMAL(19,4) NOT NULL COMMENT 'Remuneracao pelas atividades exercidas, não está incluso comissões[N:Remuneração][G:a]',
  PRIMARY KEY (`id`),
  UNIQUE INDEX `descricao_UNIQUE` (`descricao` ASC))
ENGINE = InnoDB
COMMENT = 'Função ou atribuição de tarefas à um prestador[N:Função|Funções][G:a][K:App\\Models|Models\\][H:Model][L:null][ID:36]';


-- -----------------------------------------------------
-- Table `clientes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `clientes` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador do cliente[G:o]',
  `tipo` ENUM('fisica', 'juridica') NOT NULL DEFAULT 'fisica' COMMENT 'Informa o tipo de pessoa, que pode ser física ou jurídica[N:Tipo][G:o][E:Física|Jurídica][S:S][F:self::TIPO_FISICA]',
  `empresa_id` INT NULL DEFAULT NULL COMMENT 'Informa se esse cliente faz parte da empresa informada[N:Empresa][G:o][S:S]',
  `login` VARCHAR(50) NULL COMMENT 'Nome de usuário utilizado para entrar no sistema, aplicativo ou site[N:Login][G:o]',
  `senha` VARCHAR(255) NULL DEFAULT NULL COMMENT 'Senha embaralhada do cliente[N:Senha][G:a][P]',
  `nome` VARCHAR(100) NOT NULL COMMENT 'Primeiro nome da pessoa física ou nome fantasia da empresa[N:Nome][G:o][S]',
  `sobrenome` VARCHAR(100) NULL DEFAULT NULL COMMENT 'Restante do nome da pessoa física ou Razão social da empresa[N:Sobrenome][G:o]',
  `genero` ENUM('masculino', 'feminino') NULL DEFAULT NULL COMMENT 'Informa o gênero do cliente do tipo pessoa física[N:Gênero][G:o][S:S][R]',
  `cpf` VARCHAR(20) NULL DEFAULT NULL COMMENT 'Cadastro de Pessoa Física(CPF) ou Cadastro Nacional de Pessoa Jurídica(CNPJ)[M:999.999.999-99][N:CPF][G:o]',
  `rg` VARCHAR(20) NULL DEFAULT NULL COMMENT 'Registro Geral(RG) ou Inscrição Estadual (IE)[N:Registro Geral][G:o]',
  `im` VARCHAR(20) NULL DEFAULT NULL COMMENT 'Inscrição municipal da empresa[N:Inscrição municipal][G:a]',
  `email` VARCHAR(100) NULL DEFAULT NULL COMMENT 'E-mail do cliente ou da empresa[N:E-mail][G:o]',
  `data_nascimento` DATE NULL DEFAULT NULL COMMENT 'Data de aniversário ou data de fundação[N:Data de aniversário][G:a] ',
  `slogan` VARCHAR(100) NULL DEFAULT NULL COMMENT 'Slogan ou detalhes do cliente[N:Observação][G:a]',
  `status` ENUM('inativo', 'ativo', 'bloqueado') NOT NULL DEFAULT 'inativo' COMMENT 'Informa o estado da conta do cliente[G:o][N:Status][F:self::STATUS_INATIVO]',
  `limite_compra` DECIMAL(19,4) NULL DEFAULT NULL COMMENT 'Limite de compra utilizando a forma de pagamento Conta[N:Limite de compra][G:o]',
  `instagram` VARCHAR(200) NULL DEFAULT NULL COMMENT 'URL para acessar a página do Instagram do cliente[N:Instagram][G:o]',
  `facebook_url` VARCHAR(200) NULL DEFAULT NULL COMMENT 'URL para acessar a página do Facebook do cliente[N:Facebook][G:o]',
  `imagem_url` VARCHAR(100) NULL DEFAULT NULL COMMENT 'Foto do cliente ou logo da empresa[I:256x256|cliente|cliente.png][N:Foto][G:a]',
  `linguagem` VARCHAR(20) NULL DEFAULT NULL COMMENT 'Código da linguagem utilizada pelo cliente para visualizar o aplicativo e o site, Ex: pt-BR[N:Linguagem][G:a]',
  `ip` VARCHAR(60) NULL DEFAULT NULL COMMENT 'IP do usuário que realizou o cadastro, usado para bloquear multiplos cadastros[G:o][N:IP]',
  `data_envio` DATETIME NULL DEFAULT NULL COMMENT 'Data do envio do e-mail de validação ou recuperação de conta[G:a][N:Data do envio]',
  `data_atualizacao` DATETIME NULL DEFAULT NULL COMMENT 'Data de atualização das informações do cliente[N:Data de atualização][G:a][D]',
  `data_cadastro` DATETIME NOT NULL COMMENT 'Data de cadastro do cliente[N:Data de cadastro][G:a][D]',
  PRIMARY KEY (`id`),
  UNIQUE INDEX `email_UNIQUE` (`email` ASC),
  UNIQUE INDEX `cpf_UNIQUE` (`cpf` ASC),
  UNIQUE INDEX `login_UNIQUE` (`login` ASC),
  INDEX `FK_clientes_empresa_id_idx` (`empresa_id` ASC),
  INDEX `nome_INDEX` (`nome` ASC),
  CONSTRAINT `FK_clientes_empresa_id`
    FOREIGN KEY (`empresa_id`)
    REFERENCES `clientes` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Informações de cliente físico ou jurídico. Clientes, empresas, funcionários, fornecedores e parceiros são cadastrados aqui[N:Cliente|Clientes][G:o][K:App\\Models|Models\\][H:Model][L:null][ID:16]';


-- -----------------------------------------------------
-- Table `prestadores`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `prestadores` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador do prestador[G:o]',
  `codigo` VARCHAR(100) NOT NULL COMMENT 'Código do prestador, podendo ser de barras[N:Código][G:o]',
  `pin` VARCHAR(200) NULL DEFAULT NULL COMMENT 'Código pin para acesso rápido[G:o][N:Pin] ',
  `funcao_id` INT NOT NULL COMMENT 'Função do prestada na empresa[N:Função][G:a][S:S]',
  `cliente_id` INT NOT NULL COMMENT 'Cliente que representa esse prestador, único no cadastro de prestadores[N:Cliente][G:o][S]',
  `empresa_id` INT NULL DEFAULT NULL COMMENT 'Informa a empresa que gerencia os colaboradores, nulo para a empresa do próprio estabelecimento[G:o][N:Empresa]',
  `vinculo` ENUM('funcionario', 'prestador', 'autonomo') NOT NULL DEFAULT 'funcionario' COMMENT 'Vínculo empregatício com a empresa, funcionário e autônomo são pessoas físicas, prestador é pessoa jurídica[G:o][N:Vínculo][E:Funcionário|Prestador|Autônomo][F:self::VINCULO_FUNCIONARIO]',
  `porcentagem` DOUBLE NOT NULL DEFAULT 0 COMMENT 'Porcentagem cobrada pelo funcionário ou autônomo ao cliente, Ex.: Comissão de 10% [N:Comissão][G:a][F:0]',
  `pontuacao` INT NOT NULL DEFAULT 0 COMMENT 'Define a distribuição da porcentagem pela parcela de pontos[N:Pontuação][G:a][F:0]',
  `remuneracao` DECIMAL(19,4) NOT NULL DEFAULT 0 COMMENT 'Remuneracao pelas atividades exercidas, não está incluso comissões[N:Remuneração][G:a][F:0]',
  `data_termino` DATETIME NULL DEFAULT NULL COMMENT 'Data de término de contrato, informado apenas quando ativo for não[N:Data de término de contrato][G:a][D]',
  `data_cadastro` DATETIME NOT NULL COMMENT 'Data em que o prestador de serviços foi cadastrado no sistema[N:Data de cadastro][G:a][D]',
  PRIMARY KEY (`id`),
  INDEX `FK_prestadores_funcao_id_idx` (`funcao_id` ASC),
  UNIQUE INDEX `cliente_id_UNIQUE` (`cliente_id` ASC),
  INDEX `FK_prestadores_prestador_id_idx` (`empresa_id` ASC),
  UNIQUE INDEX `codigo_UNIQUE` (`codigo` ASC),
  CONSTRAINT `FK_prestadores_funcao_id`
    FOREIGN KEY (`funcao_id`)
    REFERENCES `funcoes` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `FK_prestadores_cliente_id`
    FOREIGN KEY (`cliente_id`)
    REFERENCES `clientes` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `FK_prestadores_prestador_id`
    FOREIGN KEY (`empresa_id`)
    REFERENCES `prestadores` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Prestador de serviço que realiza alguma tarefa na empresa[N:Prestador|Prestadores][G:o][K:App\\Models|Models\\][H:Model][L:null][ID:62]';


-- -----------------------------------------------------
-- Table `moedas`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `moedas` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador da moeda[G:o]',
  `nome` VARCHAR(45) NOT NULL COMMENT 'Nome da moeda[N:Nome][G:o][S]',
  `simbolo` VARCHAR(10) NOT NULL COMMENT 'Símbolo da moeda, Ex.: R$, $[N:Símbolo][G:o]',
  `codigo` VARCHAR(45) NOT NULL COMMENT 'Código internacional da moeda, Ex.: USD, BRL[N:Código][G:o]',
  `divisao` INT NOT NULL COMMENT 'Informa o número fracionário para determinar a quantidade de casas decimais, Ex: 100 para 0,00. 10 para 0,0[N:Divisão][G:a]',
  `fracao` VARCHAR(45) NULL DEFAULT NULL COMMENT 'Informa o nome da fração, Ex.: Centavo[N:Nome da fração][G:o]',
  `formato` VARCHAR(45) NOT NULL COMMENT 'Formado de exibição do valor, Ex: $ %s, para $ 3,00[N:Formato][G:o]',
  `conversao` DOUBLE NULL DEFAULT NULL COMMENT 'Multiplicador para conversão para a moeda principal[G:a][N:Conversão]',
  `data_atualizacao` DATETIME NULL DEFAULT NULL COMMENT 'Data da última atualização do fator de conversão[G:a][N:Data de atualização]',
  `Ativa` ENUM('Y', 'N') NOT NULL DEFAULT 'N' COMMENT 'Informa se a moeda é recebida pela empresa, a moeda do país mesmo desativada sempre é aceita[G:a][N:Ativa][F:false]',
  PRIMARY KEY (`id`),
  UNIQUE INDEX `codigo_UNIQUE` (`codigo` ASC))
ENGINE = InnoDB
COMMENT = 'Moedas financeiras de um país[N:Moeda|Moedas][G:a][K:App\\Models|Models\\][H:Model][L:null][ID:49]';


-- -----------------------------------------------------
-- Table `paises`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `paises` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador do país[G:o]',
  `nome` VARCHAR(100) NOT NULL COMMENT 'Nome do país[N:Nome][G:o][S]',
  `sigla` VARCHAR(10) NOT NULL COMMENT 'Abreviação do nome do país[N:Sigla][G:a]',
  `codigo` VARCHAR(10) NOT NULL COMMENT 'Código do país com 2 letras[G:o][N:Código]',
  `moeda_id` INT NOT NULL COMMENT 'Informa a moeda principal do país[N:Moeda][G:a]',
  `idioma` VARCHAR(10) NOT NULL COMMENT 'Idioma nativo do país[N:Código do idioma][G:o]',
  `prefixo` VARCHAR(45) NULL DEFAULT NULL COMMENT 'Prefixo de telefone para ligações internacionais[G:o][N:Prefixo]',
  `entradas` TEXT NULL DEFAULT NULL COMMENT 'Frases, nomes de campos e máscaras específicas do país[N:Entrada][G:a]',
  `unitario` ENUM('Y', 'N') NOT NULL DEFAULT 'N' COMMENT 'Informa se o país tem apenas um estado federativo[N:Unitário][G:o][F:false]',
  PRIMARY KEY (`id`),
  UNIQUE INDEX `nome_UNIQUE` (`nome` ASC),
  INDEX `FK_paises_moeda_id_idx` (`moeda_id` ASC),
  UNIQUE INDEX `sigla_UNIQUE` (`sigla` ASC),
  UNIQUE INDEX `codigo_UNIQUE` (`codigo` ASC),
  CONSTRAINT `FK_paises_moeda_id`
    FOREIGN KEY (`moeda_id`)
    REFERENCES `moedas` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Informações de um páis com sua moeda e língua nativa[N:País|Paises][G:o][K:App\\Models|Models\\][H:Model][L:null][ID:57]';


-- -----------------------------------------------------
-- Table `estados`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `estados` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador do estado[G:o]',
  `pais_id` INT NOT NULL COMMENT 'País a qual esse estado pertence[N:País][G:o][S:S]',
  `nome` VARCHAR(64) NOT NULL COMMENT 'Nome do estado[N:Nome][G:o][S]',
  `uf` VARCHAR(48) NOT NULL COMMENT 'Sigla do estado[N:UF]',
  PRIMARY KEY (`id`),
  UNIQUE INDEX `pais_id_nome_UNIQUE` (`pais_id` ASC, `nome` ASC),
  UNIQUE INDEX `pais_id_uf_UNIQUE` (`pais_id` ASC, `uf` ASC),
  CONSTRAINT `FK_estados_pais_id`
    FOREIGN KEY (`pais_id`)
    REFERENCES `paises` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Estado federativo de um país[N:Estado|Estados][G:o][K:App\\Models|Models\\][H:Model][L:null][ID:29]';


-- -----------------------------------------------------
-- Table `cidades`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cidades` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Código que identifica a cidade[G:o]',
  `estado_id` INT NOT NULL COMMENT 'Informa a qual estado a cidade pertence[N:Estado][G:o]',
  `nome` VARCHAR(100) NOT NULL COMMENT 'Nome da cidade, é único para cada estado[S][N:Nome][G:o]',
  `cep` VARCHAR(8) NULL DEFAULT NULL COMMENT 'Código dos correios para identificação da cidade[M:99999-999][G:o][N:CEP]',
  PRIMARY KEY (`id`),
  UNIQUE INDEX `estado_id_nome_UNIQUE` (`estado_id` ASC, `nome` ASC),
  UNIQUE INDEX `cep_UNIQUE` (`cep` ASC),
  CONSTRAINT `FK_cidades_estado_id`
    FOREIGN KEY (`estado_id`)
    REFERENCES `estados` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Cidade de um estado, contém bairros[N:Cidade|Cidades][G:a][K:App\\Models|Models\\][H:Model][L:null][ID:14]';


-- -----------------------------------------------------
-- Table `bairros`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bairros` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador do bairro[G:o]',
  `cidade_id` INT NOT NULL COMMENT 'Cidade a qual o bairro pertence[N:Cidade][G:a][S:S]',
  `nome` VARCHAR(100) NOT NULL COMMENT 'Nome do bairro[N:Nome][G:o][S]',
  `valor_entrega` DECIMAL(19,4) NOT NULL COMMENT 'Valor cobrado para entregar um pedido nesse bairro[N:Valor da entrega][G:o]',
  `disponivel` ENUM('Y', 'N') NOT NULL DEFAULT 'Y' COMMENT 'Informa se o bairro está disponível para entrega de pedidos[N:Disponível][G:o][F:true]',
  `mapeado` ENUM('Y', 'N') NOT NULL DEFAULT 'N' COMMENT 'Informa se o bairro está mapeado por zonas e se é obrigatório selecionar uma zona[G:o][N:Mapeado][F:false]',
  `entrega_minima` INT NULL DEFAULT NULL COMMENT 'Tempo mínimo de entrega para esse bairro, sobrescreve o tempo por dia[N:Tempo mínimo de entrega][G:o]',
  `entrega_maxima` INT NULL DEFAULT NULL COMMENT 'Tempo máximo de entrega para esse bairro, sobrescreve o tempo por dia[N:Tempo máximo de entrega][G:o]',
  PRIMARY KEY (`id`),
  UNIQUE INDEX `cidade_id_nome_UNIQUE` (`cidade_id` ASC, `nome` ASC),
  CONSTRAINT `FK_bairros_cidade_id`
    FOREIGN KEY (`cidade_id`)
    REFERENCES `cidades` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Bairro de uma cidade[N:Bairro|Bairros][G:o][K:App\\Models|Models\\][H:Model][L:null][ID:5]';


-- -----------------------------------------------------
-- Table `zonas`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `zonas` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador da zona[G:o]',
  `bairro_id` INT NOT NULL COMMENT 'Bairro em que essa zona está localizada[G:o][N:Bairro]',
  `nome` VARCHAR(45) NOT NULL COMMENT 'Nome da zona, Ex. Sul, Leste, Começo, Fim[G:o][N:Nome]',
  `adicional_entrega` DECIMAL(19,4) NOT NULL COMMENT 'Taxa adicional para entrega nessa zona, será somado com a taxa para esse bairro[G:o][N:Adicional de entrega]',
  `disponivel` ENUM('Y', 'N') NOT NULL DEFAULT 'Y' COMMENT 'Informa se a zona está disponível para entrega de pedidos[N:Disponível][G:o][F:true]',
  `area` TEXT NULL DEFAULT NULL COMMENT 'Área de cobertura para entrega[G:a][N:Área de entrega]',
  `entrega_minima` INT NULL DEFAULT NULL COMMENT 'Tempo mínimo para entrega nessa zona, sobrescreve o tempo de entrega para o bairro[N:Tempo mínimo de entrega][G:o]',
  `entrega_maxima` INT NULL DEFAULT NULL COMMENT 'Tempo máximo para entrega nessa zona, sobrescreve o tempo de entrega para o bairro[N:Tempo máximo de entrega][G:o]',
  PRIMARY KEY (`id`),
  UNIQUE INDEX `bairro_id_nome_UNIQUE` (`bairro_id` ASC, `nome` ASC),
  CONSTRAINT `FK_zonas_bairro_id`
    FOREIGN KEY (`bairro_id`)
    REFERENCES `bairros` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Zonas de um bairro[N:Zona|Zonas][G:a][K:App\\Models|Models\\][H:Model][L:null][ID:77]';


-- -----------------------------------------------------
-- Table `localizacoes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `localizacoes` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador do endereço[G:o]',
  `cliente_id` INT NOT NULL COMMENT 'Cliente a qual esse endereço pertence[N:Cliente][G:o][S:S]',
  `bairro_id` INT NOT NULL COMMENT 'Bairro do endereço[N:Bairro][G:o][S:S]',
  `zona_id` INT NULL DEFAULT NULL COMMENT 'Informa a zona do bairro',
  `cep` VARCHAR(8) NULL DEFAULT NULL COMMENT 'Código dos correios para identificar um logradouro[M:99999-999][N:CEP][G:o]',
  `logradouro` VARCHAR(100) NOT NULL COMMENT 'Nome da rua ou avenida[N:Logradouro][G:o][S]',
  `numero` VARCHAR(20) NOT NULL COMMENT 'Número da casa ou do condomínio[N:Número][G:o]',
  `tipo` ENUM('casa', 'apartamento', 'condominio') NOT NULL DEFAULT 'casa' COMMENT 'Tipo de endereço Casa ou Apartamento[N:Tipo][G:o][F:self::TIPO_CASA][E:Casa|Apartamento|Condomínio][F:self::TIPO_CASA]',
  `complemento` VARCHAR(100) NULL DEFAULT NULL COMMENT 'Complemento do endereço, Ex.: Loteamento Sul[N:Complemento][G:o]',
  `condominio` VARCHAR(100) NULL DEFAULT NULL COMMENT 'Nome do condomínio[N:Condomínio][G:o]',
  `bloco` VARCHAR(20) NULL DEFAULT NULL COMMENT 'Número do bloco quando for apartamento[N:Bloco][G:o]',
  `apartamento` VARCHAR(20) NULL DEFAULT NULL COMMENT 'Número do apartamento[N:Apartamento][G:o]',
  `referencia` VARCHAR(200) NULL DEFAULT NULL COMMENT 'Ponto de referência para chegar ao local[N:Referência][G:a]',
  `latitude` DOUBLE NULL DEFAULT NULL COMMENT 'Ponto latitudinal para localização em um mapa[N:Latitude][G:a]',
  `longitude` DOUBLE NULL DEFAULT NULL COMMENT 'Ponto longitudinal para localização em um mapa[N:Longitude][G:a]',
  `apelido` VARCHAR(45) NULL DEFAULT NULL COMMENT 'Ex.: Minha Casa, Casa da Amiga[N:Apelido][G:o]',
  `data_arquivado` DATETIME NULL DEFAULT NULL COMMENT 'Informa a data que essa localização foi removida[G:a][N:Data de arquivamento]',
  PRIMARY KEY (`id`),
  INDEX `FK_localizacoes_bairro_id_idx` (`bairro_id` ASC),
  INDEX `FK_localizacoes_zona_id_idx` (`zona_id` ASC),
  CONSTRAINT `FK_localizacoes_cliente_id`
    FOREIGN KEY (`cliente_id`)
    REFERENCES `clientes` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_localizacoes_bairro_id`
    FOREIGN KEY (`bairro_id`)
    REFERENCES `bairros` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `FK_localizacoes_zona_id`
    FOREIGN KEY (`zona_id`)
    REFERENCES `zonas` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Endereço detalhado de um cliente[N:Localização|Localizações][G:a][K:App\\Models|Models\\][H:Model][L:null][ID:45]';


-- -----------------------------------------------------
-- Table `comandas`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `comandas` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Número da comanda[N:Número][G:o]',
  `numero` INT NOT NULL COMMENT 'Número da comanda[G:o][N:Número]',
  `nome` VARCHAR(50) NOT NULL COMMENT 'Nome da comanda[N:Nome][G:o][S]',
  `ativa` ENUM('Y', 'N') NOT NULL DEFAULT 'Y' COMMENT 'Informa se a comanda está diponível para ser usada nas vendas[N:Ativa][G:a][F:true]',
  PRIMARY KEY (`id`),
  UNIQUE INDEX `nome_UNIQUE` (`nome` ASC),
  UNIQUE INDEX `numero_UNIQUE` (`numero` ASC))
ENGINE = InnoDB
COMMENT = 'Comanda individual, permite lançar pedidos em cartões de consumo[N:Comanda|Comandas][G:a][K:App\\Models|Models\\][H:Model][L:2][ID:17]';


-- -----------------------------------------------------
-- Table `viagens`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `viagens` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador da viagem[G:o]',
  `responsavel_id` INT NOT NULL COMMENT 'Responsável pela entrega ou compra[N:Responsável][G:o][S:S]',
  `latitude` DOUBLE NULL DEFAULT NULL COMMENT 'Ponto latitudinal para localização do responsável em tempo real[N:Latitude][G:a]',
  `longitude` DOUBLE NULL DEFAULT NULL COMMENT 'Ponto longitudinal para localização do responsável em tempo real[N:Longitude][G:a]',
  `quilometragem` DOUBLE NULL DEFAULT NULL COMMENT 'Quilometragem no veículo antes de iniciar a viagem[G:a][N:Quilometragem]',
  `distancia` DOUBLE NULL DEFAULT NULL COMMENT 'Distância percorrida até chegar de volta ao ponto de partida[G:a][N:Distância]',
  `data_atualizacao` DATETIME NULL DEFAULT NULL COMMENT 'Data de atualização da localização do responsável[G:a][N:Data de atualização]',
  `data_chegada` DATETIME NULL DEFAULT NULL COMMENT 'Data de chegada no estabelecimento[G:a][N:Data de chegada]',
  `data_saida` DATETIME NOT NULL COMMENT 'Data e hora que o responsável saiu para entregar o pedido ou fazer as compras[N:Data de saida][G:a]',
  PRIMARY KEY (`id`),
  INDEX `FK_viagens_responsavel_id_idx` (`responsavel_id` ASC),
  CONSTRAINT `FK_viagens_responsavel_id`
    FOREIGN KEY (`responsavel_id`)
    REFERENCES `prestadores` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Registro de viagem de uma entrega ou compra de insumos[N:Viagem|Viagens][G:a][K:App\\Models|Models\\][H:Model][L:null][ID:76]';


-- -----------------------------------------------------
-- Table `integracoes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `integracoes` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador da integração[N:ID][G:o]',
  `nome` VARCHAR(45) NOT NULL COMMENT 'Nome do módulo de integração[G:o][N:Nome]',
  `descricao` VARCHAR(200) NULL DEFAULT NULL COMMENT 'Descrição do módulo integrador[G:a][N:Descrição]',
  `icone_url` VARCHAR(200) NULL DEFAULT NULL COMMENT 'Nome do ícone do módulo integrador[G:o][N:Ícone][I:128x128|integracao|integracao.png]',
  `login` VARCHAR(200) NULL DEFAULT NULL COMMENT 'Login de acesso à API de sincronização[N:Login][G:o]',
  `secret` VARCHAR(200) NULL DEFAULT NULL COMMENT 'Chave secreta para acesso à API[G:a][N:Chave secreta]',
  `opcoes` TEXT NULL DEFAULT NULL COMMENT 'Opções da integração, estados e tokens da loja[G:a][N:Opções]',
  `associacoes` TEXT NULL DEFAULT NULL COMMENT 'Associações de produtos e cartões[G:a][N:Associações]',
  `ativo` ENUM('Y', 'N') NOT NULL DEFAULT 'N' COMMENT 'Informa de o módulo de integração está habilitado[G:o][N:Habilitado][F:false]',
  `data_atualizacao` DATETIME NULL DEFAULT NULL COMMENT 'Data de atualização dos dados do módulo de integração[G:a][N:Data de atualização]',
  PRIMARY KEY (`id`),
  UNIQUE INDEX `nome_UNIQUE` (`nome` ASC))
ENGINE = InnoDB
COMMENT = 'Informa quais integrações estão disponíveis[N:Integração|Integrações][G:a][K:App\\Models|Models\\][H:Model][L:null][ID:41]';


-- -----------------------------------------------------
-- Table `associacoes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `associacoes` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador da associação no banco de dados[G:o]',
  `integracao_id` INT NOT NULL COMMENT 'Integração a qual essa associação de pedido deve ser realizada[G:a][N:Integração]',
  `entrega_id` INT NULL COMMENT 'Entrega que foi realizada[N:Entrega][G:o]',
  `codigo` VARCHAR(50) NOT NULL COMMENT 'Código curto do pedido vindo da plataforma[G:o][N:Código]',
  `cliente` VARCHAR(255) NOT NULL COMMENT 'Nome do cliente que fez o pedido[G:o][N:Cliente]',
  `chave` VARCHAR(100) NOT NULL COMMENT 'Dado chave do cliente, esperado telefone, e-mail ou CPF[G:a][N:Chave]',
  `pedido` TEXT NOT NULL COMMENT 'Pedido no formato JSON para exibição na lista de pedidos e posterior integração[G:o][N:Pedido]',
  `endereco` VARCHAR(255) NULL COMMENT 'Endereço para ser entregue o pedido, nulo para o cliente vir buscar no restaurante[G:o][N:Endereço do cliente]',
  `quantidade` DOUBLE NOT NULL COMMENT 'Quantidade de produtos no pedido[G:a][N:Quantidade de produtos]',
  `servicos` DECIMAL(19,4) NOT NULL COMMENT 'Total dos serviços, geralmente só taxa de entrega[G:o][N:Serviços]',
  `produtos` DECIMAL(19,4) NOT NULL COMMENT 'Total dos produtos[G:o][N:Produtos]',
  `descontos` DECIMAL(19,4) NOT NULL COMMENT 'Total dos descontos[G:o][N:Descontos]',
  `pago` DECIMAL(19,4) NOT NULL COMMENT 'Total que foi pago incluindo o troco[G:o][N:Pago]',
  `status` ENUM('agendado', 'aberto', 'entrega', 'concluido', 'cancelado') NOT NULL COMMENT 'Status do pedido que não foi integrado ainda[G:o][N:Status][F:self::STATUS_AGENDADO]',
  `motivo` VARCHAR(200) NULL COMMENT 'Informa o motivo do cancelamento[G:o][N:Motivo]',
  `mensagem` VARCHAR(255) NULL COMMENT 'Mensagem de erro que foi gerada ao tentar integrar automaticamente[G:a][N:Mensagem]',
  `sincronizado` ENUM('Y', 'N') NOT NULL COMMENT 'Informa se a associação já foi sincronizada com a plataforma[G:o][N:Sincronizado]',
  `integrado` ENUM('Y', 'N') NOT NULL COMMENT 'Informa se a associação já foi integrada no sistema[G:o][N:Integrado]',
  `data_confirmacao` DATETIME NULL COMMENT 'Data e hora que o pedido foi confirmado e impresso na produção[G:a][N:Data de confirmação]',
  `data_pedido` DATETIME NOT NULL COMMENT 'Data e hora que o pedido foi criado na plataforma que o gerou[G:a][N:Data do pedido]',
  PRIMARY KEY (`id`),
  INDEX `FK_associacoes_integracao_id_idx` (`integracao_id` ASC),
  INDEX `FK_associacoes_entrega_id_idx` (`entrega_id` ASC),
  CONSTRAINT `FK_associacoes_integracao_id`
    FOREIGN KEY (`integracao_id`)
    REFERENCES `integracoes` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_associacoes_entrega_id`
    FOREIGN KEY (`entrega_id`)
    REFERENCES `viagens` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Lista de pedidos que não foram integrados ainda e devem ser associados ao sistema[N:Associação|Associações][G:a][K:App\\Models|Models\\][H:Model][L:5][ID:2]';


-- -----------------------------------------------------
-- Table `pedidos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `pedidos` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Código do pedido[N:Código][G:o]',
  `pedido_id` INT NULL DEFAULT NULL COMMENT 'Informa o pedido da mesa / comanda principal quando as mesas / comandas forem agrupadas[G:o][N:Pedido principal]',
  `mesa_id` INT NULL DEFAULT NULL COMMENT 'Identificador da mesa, único quando o pedido não está fechado[N:Mesa][G:a][S:S]',
  `comanda_id` INT NULL DEFAULT NULL COMMENT 'Identificador da comanda, único quando o pedido não está fechado[N:Comanda][G:a][S:S]',
  `sessao_id` INT NULL DEFAULT NULL COMMENT 'Identificador da sessão de vendas[N:Sessão][G:a][S:S]',
  `prestador_id` INT NULL DEFAULT NULL COMMENT 'Prestador que criou esse pedido[N:Prestador][G:o][S:S]',
  `cliente_id` INT NULL DEFAULT NULL COMMENT 'Identificador do cliente do pedido[N:Cliente][G:o][S:S]',
  `localizacao_id` INT NULL DEFAULT NULL COMMENT 'Endereço de entrega do pedido, se não informado na venda entrega, o pedido será para viagem[N:Localização][G:a][S:S]',
  `entrega_id` INT NULL DEFAULT NULL COMMENT 'Informa em qual entrega esse pedido foi despachado[G:a][N:Entrega]',
  `associacao_id` INT NULL DEFAULT NULL COMMENT 'Informa se o pedido veio de uma integração e se está associado[G:a][N:Associação]',
  `tipo` ENUM('mesa', 'comanda', 'balcao', 'entrega') NOT NULL DEFAULT 'balcao' COMMENT 'Tipo de venda[N:Tipo][G:o][E:Mesa|Comanda|Balcão|Entrega][S:S][F:self::TIPO_BALCAO]',
  `estado` ENUM('agendado', 'aberto', 'entrega', 'fechado', 'concluido', 'cancelado') NOT NULL DEFAULT 'aberto' COMMENT 'Estado do pedido, Agendado: O pedido deve ser processado na data de agendamento. Aberto: O pedido deve ser processado. Entrega: O pedido saiu para entrega. Fechado: O cliente pediu a conta e está pronto para pagar. Concluído: O pedido foi pago e concluído, Cancelado: O pedido foi cancelado com os itens e pagamentos[N:Estado][G:o][F:self::ESTADO_ABERTO]',
  `servicos` DECIMAL(19,4) NOT NULL DEFAULT 0 COMMENT 'Valor total dos serviços desse pedido[G:o][N:Total dos serviços][F:0]',
  `produtos` DECIMAL(19,4) NOT NULL DEFAULT 0 COMMENT 'Valor total dos produtos do pedido sem a comissão[G:o][N:Total dos produtos][F:0]',
  `comissao` DECIMAL(19,4) NOT NULL DEFAULT 0 COMMENT 'Valor total da comissão desse pedido[G:o][N:Total da comissão][F:0]',
  `subtotal` DECIMAL(19,4) NOT NULL DEFAULT 0 COMMENT 'Subtotal do pedido sem os descontos[G:o][N:Subtotal][F:0]',
  `descontos` DECIMAL(19,4) NOT NULL DEFAULT 0 COMMENT 'Total de descontos realizado nesse pedido[G:o][N:Descontos][F:0]',
  `total` DECIMAL(19,4) NOT NULL DEFAULT 0 COMMENT 'Total do pedido já com descontos[G:o][N:Total][F:0]',
  `pago` DECIMAL(19,4) NOT NULL DEFAULT 0 COMMENT 'Valor já pago do pedido[G:o][N:Total pago][F:0]',
  `troco` DECIMAL(19,4) NOT NULL DEFAULT 0 COMMENT 'Troco do cliente[G:o][N:Troco][F:0]',
  `lancado` DECIMAL(19,4) NOT NULL DEFAULT 0 COMMENT 'Valor lançado para pagar, mas não foi pago ainda[G:o][N:Total lançado][F:0]',
  `pessoas` INT NOT NULL DEFAULT 1 COMMENT 'Informa quantas pessoas estão na mesa[N:Pessoas][G:a][F:1]',
  `cpf` VARCHAR(20) NULL DEFAULT NULL COMMENT 'CPF/CNPJ na nota[G:o][N:CPF/CNPJ]',
  `email` VARCHAR(100) NULL DEFAULT NULL COMMENT 'E-mail para envio do XML e Danfe[G:o][N:E-mail]',
  `descricao` VARCHAR(255) NULL DEFAULT NULL COMMENT 'Detalhes da reserva ou do pedido[N:Descrição][G:a]',
  `fechador_id` INT NULL DEFAULT NULL COMMENT 'Informa quem fechou o pedido e imprimiu a conta[N:Fechador do pedido][G:o][S:S]',
  `data_impressao` DATETIME NULL DEFAULT NULL COMMENT 'Data de impressão da conta do cliente[N:Data de impressão][G:a]',
  `motivo` VARCHAR(200) NULL DEFAULT NULL COMMENT 'Informa o motivo do cancelamento[G:o][N:Motivo]',
  `data_entrega` DATETIME NULL DEFAULT NULL COMMENT 'Data e hora que o pedido foi entregue ao cliente[N:Data de entrega][G:a]',
  `data_agendamento` DATETIME NULL DEFAULT NULL COMMENT 'Data de agendamento do pedido[N:Data de agendamento][G:a]',
  `data_conclusao` DATETIME NULL DEFAULT NULL COMMENT 'Data de finalização do pedido[N:Data de conclusão][G:a]',
  `data_criacao` DATETIME NOT NULL COMMENT 'Data de criação do pedido[N:Data de criação][G:a]',
  PRIMARY KEY (`id`),
  INDEX `FK_pedidos_mesa_id_idx` (`mesa_id` ASC),
  INDEX `FK_pedidos_sessao_id_idx` (`sessao_id` ASC),
  INDEX `FK_pedidos_prestador_id_idx` (`prestador_id` ASC),
  INDEX `FK_pedidos_cliente_id_idx` (`cliente_id` ASC),
  INDEX `tipo_estado_INDEX` (`tipo` ASC, `estado` ASC),
  INDEX `FK_pedidos_localizacao_id_idx` (`localizacao_id` ASC),
  INDEX `FK_pedidos_comanda_id_idx` (`comanda_id` ASC),
  INDEX `FK_pedidos_fechador_id_idx` (`fechador_id` ASC),
  INDEX `FK_pedidos_entrega_id_idx` (`entrega_id` ASC),
  INDEX `data_criacao_INDEX` (`data_criacao` DESC),
  INDEX `FK_pedidos_pedido_id_idx` (`pedido_id` ASC),
  UNIQUE INDEX `associacao_id_UNIQUE` (`associacao_id` ASC),
  CONSTRAINT `FK_pedidos_mesa_id`
    FOREIGN KEY (`mesa_id`)
    REFERENCES `mesas` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `FK_pedidos_sessao_id`
    FOREIGN KEY (`sessao_id`)
    REFERENCES `sessoes` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `FK_pedidos_prestador_id`
    FOREIGN KEY (`prestador_id`)
    REFERENCES `prestadores` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `FK_pedidos_cliente_id`
    FOREIGN KEY (`cliente_id`)
    REFERENCES `clientes` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `FK_pedidos_localizacao_id`
    FOREIGN KEY (`localizacao_id`)
    REFERENCES `localizacoes` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `FK_pedidos_comanda_id`
    FOREIGN KEY (`comanda_id`)
    REFERENCES `comandas` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `FK_pedidos_fechador_id`
    FOREIGN KEY (`fechador_id`)
    REFERENCES `prestadores` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `FK_pedidos_entrega_id`
    FOREIGN KEY (`entrega_id`)
    REFERENCES `viagens` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `FK_pedidos_pedido_id`
    FOREIGN KEY (`pedido_id`)
    REFERENCES `pedidos` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `FK_pedidos_associacao_id`
    FOREIGN KEY (`associacao_id`)
    REFERENCES `associacoes` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Informações do pedido de venda[N:Pedido|Pedidos][G:o][K:App\\Models|Models\\][H:Model][L:null][ID:59]';


-- -----------------------------------------------------
-- Table `categorias`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `categorias` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador da categoria[G:o]',
  `categoria_id` INT NULL DEFAULT NULL COMMENT 'Informa a categoria pai da categoria atual, a categoria atual é uma subcategoria[N:Categoria superior][G:a][S:S]',
  `descricao` VARCHAR(45) NOT NULL COMMENT 'Descrição da categoria. Ex.: Refrigerantes, Salgados[N:Descrição][G:a][S]',
  `detalhes` VARCHAR(200) NULL DEFAULT NULL COMMENT 'Informa os detalhes gerais dos produtos dessa categoria[G:o][N:Detalhes]',
  `imagem_url` VARCHAR(100) NULL DEFAULT NULL COMMENT 'Imagem representativa da categoria[N:Imagem][G:a][I:256x256|categoria|categoria.png]',
  `ordem` INT NOT NULL DEFAULT 0 COMMENT 'Informa a ordem de exibição das categorias nas vendas[G:a][N:Ordem][F:0]',
  `data_atualizacao` DATETIME NULL DEFAULT NULL COMMENT 'Data de atualização das informações da categoria[N:Data de atualização][G:a]',
  `data_arquivado` DATETIME NULL DEFAULT NULL COMMENT 'Data em que a categoria foi arquivada e não será mais usada[G:a][N:Data de arquivação]',
  PRIMARY KEY (`id`),
  UNIQUE INDEX `descricao_UNIQUE` (`descricao` ASC),
  INDEX `FK_categorias_categoria_id_idx` (`categoria_id` ASC),
  CONSTRAINT `FK_categorias_categoria_id`
    FOREIGN KEY (`categoria_id`)
    REFERENCES `categorias` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Informa qual a categoria dos produtos e permite a rápida localização dos mesmos[N:Categoria|Categorias][G:a][K:App\\Models|Models\\][H:Model][L:null][ID:12]';


-- -----------------------------------------------------
-- Table `unidades`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `unidades` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador da unidade[G:o]',
  `nome` VARCHAR(45) NOT NULL COMMENT 'Nome da unidade de medida, Ex.: Grama, Quilo[N:Nome][G:o][S]',
  `descricao` VARCHAR(45) NULL DEFAULT NULL COMMENT 'Detalhes sobre a unidade de medida[N:Descrição][G:a]',
  `sigla` VARCHAR(10) NOT NULL COMMENT 'Sigla da unidade de medida, Ex.: UN, L, g[N:Sigla][G:a]',
  PRIMARY KEY (`id`),
  UNIQUE INDEX `sigla_UNIQUE` (`sigla` ASC))
ENGINE = InnoDB
COMMENT = 'Unidades de medidas aplicadas aos produtos[N:Unidade|Unidades][G:a][K:App\\Models|Models\\][H:Model][L:null][ID:75]';


-- -----------------------------------------------------
-- Table `origens`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `origens` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador da origem[G:o]',
  `codigo` INT NOT NULL COMMENT 'Código da origem da mercadoria[G:o][N:Código]',
  `descricao` VARCHAR(200) NOT NULL COMMENT 'Descrição da origem da mercadoria[G:a][N:Descrição]',
  PRIMARY KEY (`id`),
  UNIQUE INDEX `codigo_UNIQUE` (`codigo` ASC))
ENGINE = InnoDB
COMMENT = 'Origem da mercadoria[N:Origem|Origens][G:a][K:App\\Models|Models\\][H:Model][L:7][ID:54]';


-- -----------------------------------------------------
-- Table `operacoes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `operacoes` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador da operação[G:o]',
  `codigo` INT NOT NULL COMMENT 'Código CFOP sem pontuação[G:o][N:Código]',
  `descricao` VARCHAR(255) NOT NULL COMMENT 'Descrição da operação[G:a][N:Descrição]',
  `detalhes` TEXT NULL DEFAULT NULL COMMENT 'Detalhes da operação (Opcional)[G:o][N:Detalhes]',
  PRIMARY KEY (`id`),
  UNIQUE INDEX `codigo_UNIQUE` (`codigo` ASC))
ENGINE = InnoDB
COMMENT = 'Código Fiscal de Operações e Prestações (CFOP)[N:Operação|Operações][G:a][K:App\\Models|Models\\][H:Model][L:7][ID:53]';


-- -----------------------------------------------------
-- Table `impostos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `impostos` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador do imposto[G:o]',
  `grupo` ENUM('icms', 'pis', 'cofins', 'ipi', 'ii') NOT NULL COMMENT 'Grupo do imposto[G:o][N:Grupo]',
  `simples` ENUM('Y', 'N') NOT NULL COMMENT 'Informa se o imposto é do simples nacional[G:o][N:Simples nacional]',
  `substituicao` ENUM('Y', 'N') NOT NULL COMMENT 'Informa se o imposto é por substituição tributária[G:a][N:Substituição tributária]',
  `codigo` INT NOT NULL COMMENT 'Informa o código do imposto[G:o][N:Código]',
  `descricao` VARCHAR(255) NOT NULL COMMENT 'Descrição do imposto[G:a][N:Descrição]',
  PRIMARY KEY (`id`),
  UNIQUE INDEX `grupo_simples_substituicao_codigo_UNIQUE` (`grupo` ASC, `simples` ASC, `substituicao` ASC, `codigo` ASC))
ENGINE = InnoDB
COMMENT = 'Impostos disponíveis para informar no produto[N:Imposto|Impostos][G:o][K:App\\Models|Models\\][H:Model][L:7][ID:39]';


-- -----------------------------------------------------
-- Table `tributacoes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `tributacoes` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador da tributação[G:o]',
  `ncm` VARCHAR(10) NOT NULL COMMENT 'Código NCM (Nomenclatura Comum do Mercosul) do produto[G:o][N:NCM]',
  `cest` VARCHAR(20) NULL DEFAULT NULL COMMENT 'Código CEST do produto (Opcional)[G:o][N:CEST]',
  `origem_id` INT NOT NULL COMMENT 'Origem do produto[G:a][N:Origem]',
  `operacao_id` INT NOT NULL COMMENT 'CFOP do produto[G:o][N:CFOP]',
  `imposto_id` INT NOT NULL COMMENT 'Imposto do produto[G:o][N:Imposto]',
  PRIMARY KEY (`id`),
  INDEX `FK_tributacoes_origem_id_idx` (`origem_id` ASC),
  INDEX `FK_tributacoes_operacao_id_idx` (`operacao_id` ASC),
  INDEX `FK_tributacoes_imposto_id_idx` (`imposto_id` ASC),
  CONSTRAINT `FK_tributacoes_origem_id`
    FOREIGN KEY (`origem_id`)
    REFERENCES `origens` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `FK_tributacoes_operacao_id`
    FOREIGN KEY (`operacao_id`)
    REFERENCES `operacoes` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `FK_tributacoes_imposto_id`
    FOREIGN KEY (`imposto_id`)
    REFERENCES `impostos` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Informação tributária dos produtos[N:Tributação|Tributações][G:a][K:App\\Models|Models\\][H:Model][L:7][ID:74]';


-- -----------------------------------------------------
-- Table `produtos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `produtos` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Código do produto[G:o]',
  `codigo` VARCHAR(100) NOT NULL COMMENT 'Código do produto podendo ser de barras ou aleatório, deve ser único entre todos os produtos[N:Código][G:o]',
  `categoria_id` INT NOT NULL COMMENT 'Categoria do produto, permite a rápida localização ao utilizar tablets[N:Categoria][G:a][S:S]',
  `unidade_id` INT NOT NULL COMMENT 'Informa a unidade do produtos, Ex.: Grama, Litro.[N:Unidade][G:a]',
  `setor_estoque_id` INT NULL DEFAULT NULL COMMENT 'Informa de qual setor o produto será retirado após a venda[N:Setor de estoque][G:o]',
  `setor_preparo_id` INT NULL DEFAULT NULL COMMENT 'Informa em qual setor de preparo será enviado o ticket de preparo ou autorização, se nenhum for informado nada será impresso[N:Setor de preparo][G:o]',
  `tributacao_id` INT NULL DEFAULT NULL COMMENT 'Informações de tributação do produto[G:a][N:Tributação][S:S]',
  `descricao` VARCHAR(75) NOT NULL COMMENT 'Descrição do produto, Ex.: Refri. Coca Cola 2L.[N:Descrição][G:a][S]',
  `abreviacao` VARCHAR(100) NULL DEFAULT NULL COMMENT 'Nome abreviado do produto, Ex.: Cebola, Tomate, Queijo[N:Abreviação][G:a]',
  `detalhes` VARCHAR(255) NULL DEFAULT NULL COMMENT 'Informa detalhes do produto, Ex: Com Cebola, Pimenta, Orégano[N:Detalhes][G:o]',
  `quantidade_minima` DOUBLE NOT NULL DEFAULT 0 COMMENT 'Informa a quantidade limite para que o sistema avise que o produto já está acabando[N:Quantidade limite][G:a][F:0]',
  `quantidade_maxima` DOUBLE NOT NULL DEFAULT 0 COMMENT 'Informa a quantidade máxima do produto no estoque, não proibe, apenas avisa[N:Quantidade máxima][G:a][F:0]',
  `preco_venda` DECIMAL(19,4) NOT NULL DEFAULT 0 COMMENT 'Preço de venda base desse produto para todos os cardápios[N:Preço de venda][G:o][F:0]',
  `custo_medio` DECIMAL(19,4) NULL DEFAULT NULL COMMENT 'Informa o preço médio de compra desse produto[G:o][N:Custo médio]',
  `custo_producao` DECIMAL(19,4) NULL DEFAULT NULL COMMENT 'Informa qual o valor para o custo de produção do produto, utilizado quando não há formação de composição do produto[N:Custo de produção][G:o]',
  `tipo` ENUM('produto', 'composicao', 'pacote') NOT NULL DEFAULT 'produto' COMMENT 'Informa qual é o tipo de produto. Produto: Produto normal que possui estoque, Composição: Produto que não possui estoque diretamente, pois é composto de outros produtos ou composições, Pacote: Permite a composição no momento da venda, não possui estoque diretamente[N:Tipo][G:o][E:Produto|Composição|Pacote][F:self::TIPO_PRODUTO]',
  `cobrar_servico` ENUM('Y', 'N') NOT NULL DEFAULT 'Y' COMMENT 'Informa se deve ser cobrado a taxa de serviço dos garçons sobre este produto[N:Cobrança de serviço][G:a][F:true]',
  `divisivel` ENUM('Y', 'N') NOT NULL DEFAULT 'N' COMMENT 'Informa se o produto pode ser vendido fracionado[N:Divisível][G:o][F:false]',
  `pesavel` ENUM('Y', 'N') NOT NULL DEFAULT 'N' COMMENT 'Informa se o peso do produto deve ser obtido de uma balança, obrigatoriamente o produto deve ser divisível[N:Pesável][G:o][F:false]',
  `tempo_preparo` INT NOT NULL DEFAULT 0 COMMENT 'Tempo de preparo em minutos para preparar uma composição, 0 para não informado[N:Tempo de preparo][G:o][F:0]',
  `disponivel` ENUM('Y', 'N') NOT NULL DEFAULT 'Y' COMMENT 'Informa se o produto estará disponível para venda em todos os cardápios[N:Disponível][G:a][F:true]',
  `insumo` ENUM('Y', 'N') NOT NULL DEFAULT 'N' COMMENT 'Informa se o produto é de uso interno e não está disponível para venda[N:Insumo][G:o][F:false]',
  `avaliacao` DOUBLE NULL DEFAULT NULL COMMENT 'Média das avaliações do último período[G:a][N:Avaliação]',
  `estoque` DOUBLE NULL DEFAULT 0 COMMENT 'Estoque geral do produto[G:o][N:Estoque][F:0]',
  `imagem_url` VARCHAR(100) NULL DEFAULT NULL COMMENT 'Imagem do produto[N:Imagem][G:a][I:256x256|produto|produto.png]',
  `data_atualizacao` DATETIME NULL DEFAULT NULL COMMENT 'Data de atualização das informações do produto[N:Data de atualização][G:a][D]',
  `data_arquivado` DATETIME NULL DEFAULT NULL COMMENT 'Data em que o produto foi arquivado e não será mais usado[G:a][N:Data de arquivação]',
  PRIMARY KEY (`id`),
  UNIQUE INDEX `descricao_UNIQUE` (`descricao` ASC),
  UNIQUE INDEX `codigo_UNIQUE` (`codigo` ASC),
  INDEX `FK_produtos_categoria_id_idx` (`categoria_id` ASC),
  INDEX `FK_produtos_unidade_id_idx` (`unidade_id` ASC),
  INDEX `FK_produtos_setor_preparo_id_idx` (`setor_preparo_id` ASC),
  INDEX `FK_produtos_setor_estoque_id_idx` (`setor_estoque_id` ASC),
  INDEX `FK_produtos_tributacao_id_idx` (`tributacao_id` ASC),
  CONSTRAINT `FK_produtos_categoria_id`
    FOREIGN KEY (`categoria_id`)
    REFERENCES `categorias` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `FK_produtos_unidade_id`
    FOREIGN KEY (`unidade_id`)
    REFERENCES `unidades` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `FK_produtos_setor_preparo_id`
    FOREIGN KEY (`setor_preparo_id`)
    REFERENCES `setores` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `FK_produtos_setor_estoque_id`
    FOREIGN KEY (`setor_estoque_id`)
    REFERENCES `setores` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `FK_produtos_tributacao_id`
    FOREIGN KEY (`tributacao_id`)
    REFERENCES `tributacoes` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Informações sobre o produto, composição ou pacote[N:Produto|Produtos][G:o][K:App\\Models|Models\\][H:Model][L:null][ID:63]';


-- -----------------------------------------------------
-- Table `servicos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `servicos` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador do serviço[G:o]',
  `nome` VARCHAR(50) NOT NULL COMMENT 'Nome do serviço, Ex.: Comissão, Entrega, Couvert[N:Nome][G:o]',
  `descricao` VARCHAR(100) NOT NULL COMMENT 'Descrição do serviço, Ex.: Show de fulano[N:Descrição][G:a][S]',
  `detalhes` VARCHAR(200) NULL DEFAULT NULL COMMENT 'Detalhes do serviço, Ex.: Com participação especial de fulano[N:Detalhes][G:o]',
  `tipo` ENUM('evento', 'taxa') NOT NULL COMMENT 'Tipo de serviço, Evento: Eventos como show no estabelecimento[N:Tipo][G:o]',
  `obrigatorio` ENUM('Y', 'N') NOT NULL DEFAULT 'Y' COMMENT 'Informa se a taxa é obrigatória[N:Obrigatório][G:o][F:true]',
  `data_inicio` DATETIME NULL DEFAULT NULL COMMENT 'Data de início do evento[N:Data de início][G:a]',
  `data_fim` DATETIME NULL DEFAULT NULL COMMENT 'Data final do evento[N:Data final][G:a]',
  `tempo_limite` INT NULL DEFAULT NULL COMMENT 'Tempo de participação máxima que não será obrigatório adicionar o serviço ao pedido[N:Tempo limite][G:o]',
  `valor` DECIMAL(19,4) NOT NULL DEFAULT 0 COMMENT 'Valor do serviço[N:Valor][G:o][F:0]',
  `individual` ENUM('Y', 'N') NOT NULL DEFAULT 'N' COMMENT 'Informa se a taxa ou serviço é individual para cada pessoa[N:Individual][G:o][F:false]',
  `imagem_url` VARCHAR(100) NULL DEFAULT NULL COMMENT 'Banner do evento[N:Imagem][G:a][I:512x256|servico|servico.png]',
  `ativo` ENUM('Y', 'N') NOT NULL DEFAULT 'Y' COMMENT 'Informa se o serviço está ativo[N:Ativo][G:o][F:true]',
  PRIMARY KEY (`id`))
ENGINE = InnoDB
COMMENT = 'Taxas, eventos e serviço cobrado nos pedidos[N:Serviço|Serviços][G:o][K:App\\Models|Models\\][H:Model][L:null][ID:69]';


-- -----------------------------------------------------
-- Table `classificacoes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `classificacoes` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador da classificação[G:o]',
  `classificacao_id` INT NULL DEFAULT NULL COMMENT 'Classificação superior, quando informado, esta classificação será uma subclassificação[N:Classificação superior][G:a][S:S]',
  `descricao` VARCHAR(100) NOT NULL COMMENT 'Descrição da classificação[N:Descrição][G:a][S]',
  `icone_url` VARCHAR(100) NULL DEFAULT NULL COMMENT 'Ícone da categoria da conta[N:Ícone][G:o][I:256x256|classificacao|classificacao.png]',
  PRIMARY KEY (`id`),
  UNIQUE INDEX `descricao_UNIQUE` (`descricao` ASC),
  INDEX `FK_classificacoes_classificacao_id_idx` (`classificacao_id` ASC),
  CONSTRAINT `FK_classificacoes_classificacao_id`
    FOREIGN KEY (`classificacao_id`)
    REFERENCES `classificacoes` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Classificação se contas, permite atribuir um grupo de contas[N:Classificação|Classificações][G:a][K:App\\Models|Models\\][H:Model][L:null][ID:15]';


-- -----------------------------------------------------
-- Table `contas`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `contas` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Código da conta[G:o]',
  `classificacao_id` INT NOT NULL COMMENT 'Classificação da conta[N:Classificação][G:a][S:S]',
  `funcionario_id` INT NOT NULL COMMENT 'Funcionário que lançou a conta[N:Funcionário][G:o][S:S]',
  `conta_id` INT NULL DEFAULT NULL COMMENT 'Informa a conta principal[G:a][N:Conta principal]',
  `agrupamento_id` INT NULL DEFAULT NULL COMMENT 'Informa se esta conta foi agrupada e não precisa ser mais paga individualmente, uma conta agrupada é tratada internamente como desativada[G:o][N:Agrupamento]',
  `carteira_id` INT NULL DEFAULT NULL COMMENT 'Informa a carteira que essa conta será paga automaticamente ou para informar as contas a pagar dessa carteira[G:a][N:Carteira]',
  `cliente_id` INT NULL DEFAULT NULL COMMENT 'Cliente a qual a conta pertence[N:Cliente][G:o][S:S]',
  `pedido_id` INT NULL DEFAULT NULL COMMENT 'Pedido da qual essa conta foi gerada[N:Pedido][G:o][S:S]',
  `tipo` ENUM('receita', 'despesa') NOT NULL DEFAULT 'despesa' COMMENT 'Tipo de conta se receita ou despesa[G:o][N:Tipo][E:Receita|Despesa][F:self::TIPO_DESPESA]',
  `descricao` VARCHAR(200) NOT NULL COMMENT 'Descrição da conta[N:Descrição][G:a][S]',
  `valor` DECIMAL(19,4) NOT NULL COMMENT 'Valor da conta[N:Valor][G:o]',
  `consolidado` DECIMAL(19,4) NOT NULL DEFAULT 0 COMMENT 'Valor pago ou recebido da conta[G:a][N:Valor pago ou recebido][F:0]',
  `fonte` ENUM('fixa', 'variavel', 'comissao', 'remuneracao') NOT NULL DEFAULT 'fixa' COMMENT 'Fonte dos valores, comissão e remuneração se pagar antes do vencimento, o valor será proporcional[G:a][N:Fonte dos valores][E:Fixa|Variável|Comissão|Remuneração][F:self::FONTE_FIXA]',
  `numero_parcela` INT NOT NULL DEFAULT 1 COMMENT 'Informa qual o número da parcela para esta conta[G:o][N:Número da parcela][F:1]',
  `parcelas` INT NOT NULL DEFAULT 1 COMMENT 'Quantidade de parcelas que essa conta terá, zero para conta recorrente e será alterado para 1 quando criar a próxima conta[G:a][N:Parcelas][F:1]',
  `frequencia` INT NOT NULL DEFAULT 0 COMMENT 'Frequência da recorrência em dias ou mês, depende do modo de cobrança[G:a][N:Frequencia][F:0]',
  `modo` ENUM('diario', 'mensal') NOT NULL DEFAULT 'mensal' COMMENT 'Modo de cobrança se diário ou mensal, a quantidade é definida em frequencia[G:o][N:Modo][E:Diário|Mensal][F:self::MODO_MENSAL]',
  `automatico` ENUM('Y', 'N') NOT NULL DEFAULT 'N' COMMENT 'Informa se o pagamento será automático após o vencimento, só ocorrerá se tiver saldo na carteira, usado para débito automático[G:o][N:Automático][F:false]',
  `acrescimo` DECIMAL(19,4) NOT NULL DEFAULT 0 COMMENT 'Acréscimo de valores ao total[N:Acréscimo][G:o][F:0]',
  `multa` DECIMAL(19,4) NOT NULL DEFAULT 0 COMMENT 'Valor da multa em caso de atraso[N:Multa por atraso][G:a][F:0]',
  `juros` DOUBLE NOT NULL DEFAULT 0 COMMENT 'Juros diário em caso de atraso, valor de 0 a 1, 1 = 100%[N:Juros][G:o][F:0]',
  `formula` ENUM('simples', 'composto') NOT NULL DEFAULT 'composto' COMMENT 'Fórmula de juros que será cobrado em caso de atraso[G:o][N:Tipo de juros][E:Simples|Composto][F:self::FORMULA_COMPOSTO]',
  `vencimento` DATETIME NOT NULL COMMENT 'Data de vencimento da conta[N:Data de vencimento][G:a]',
  `numero` VARCHAR(64) NULL DEFAULT NULL COMMENT 'Número do documento que gerou a conta[N:Número do documento][G:o]',
  `anexo_url` VARCHAR(200) NULL DEFAULT NULL COMMENT 'Caminho do anexo da conta[N:Anexo][G:o][I:512x256|conta|conta.png]',
  `estado` ENUM('analise', 'ativa', 'paga', 'cancelada', 'desativada') NOT NULL DEFAULT 'ativa' COMMENT 'Informa o estado da conta[N:Estado][G:o][E:Análise|Ativa|Paga|Cancelada|Desativada][F:self::ESTADO_ATIVA]',
  `data_calculo` DATETIME NULL DEFAULT NULL COMMENT 'Data do último cálculo de acréscimo por atraso de pagamento[N:Data de cálculo][G:a]',
  `data_emissao` DATETIME NOT NULL COMMENT 'Data de emissão da conta[N:Data de emissão][G:a]',
  PRIMARY KEY (`id`),
  INDEX `FK_contas_cliente_id_idx` (`cliente_id` ASC),
  INDEX `FK_contas_funcionario_id_idx` (`funcionario_id` ASC),
  INDEX `FK_contas_pedido_id_idx` (`pedido_id` ASC),
  INDEX `FK_contas_classificacao_id_idx` (`classificacao_id` ASC),
  INDEX `FK_contas_conta_id_idx` (`conta_id` ASC),
  INDEX `FK_contas_carteira_id_idx` (`carteira_id` ASC),
  INDEX `FK_contas_agrupamento_id_idx` (`agrupamento_id` ASC),
  INDEX `vencimento_INDEX` (`vencimento` DESC),
  INDEX `data_emissao_INDEX` (`data_emissao` DESC),
  CONSTRAINT `FK_contas_cliente_id`
    FOREIGN KEY (`cliente_id`)
    REFERENCES `clientes` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `FK_contas_funcionario_id`
    FOREIGN KEY (`funcionario_id`)
    REFERENCES `prestadores` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `FK_contas_pedido_id`
    FOREIGN KEY (`pedido_id`)
    REFERENCES `pedidos` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_contas_classificacao_id`
    FOREIGN KEY (`classificacao_id`)
    REFERENCES `classificacoes` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `FK_contas_conta_id`
    FOREIGN KEY (`conta_id`)
    REFERENCES `contas` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_contas_carteira_id`
    FOREIGN KEY (`carteira_id`)
    REFERENCES `carteiras` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `FK_contas_agrupamento_id`
    FOREIGN KEY (`agrupamento_id`)
    REFERENCES `contas` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Contas a pagar e ou receber[N:Conta|Contas][G:a][K:App\\Models|Models\\][H:Model][L:null][ID:21]';


-- -----------------------------------------------------
-- Table `movimentacoes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `movimentacoes` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Código da movimentação do caixa[G:o]',
  `sessao_id` INT NOT NULL COMMENT 'Sessão do dia, permite abrir vários caixas no mesmo dia com o mesmo código da sessão[N:Sessão][G:a][S:S]',
  `caixa_id` INT NOT NULL COMMENT 'Caixa a qual pertence essa movimentação[N:Caixa][G:o][S]',
  `aberta` ENUM('Y', 'N') NOT NULL DEFAULT 'Y' COMMENT 'Informa se o caixa está aberto[N:Aberta][G:a][F:true]',
  `iniciador_id` INT NOT NULL COMMENT 'Funcionário que abriu o caixa[N:Funcionário inicializador][G:a][S:S]',
  `fechador_id` INT NULL DEFAULT NULL COMMENT 'Funcionário que fechou o caixa[N:Funcionário fechador][G:o][S:S]',
  `data_fechamento` DATETIME NULL DEFAULT NULL COMMENT 'Data de fechamento do caixa[N:Data de fechamento][G:a]',
  `data_abertura` DATETIME NOT NULL COMMENT 'Data de abertura do caixa[N:Data de abertura][G:a]',
  PRIMARY KEY (`id`),
  INDEX `FK_movimentacoes_sessao_id_idx` (`sessao_id` ASC),
  INDEX `FK_movimentacoes_caixa_id_idx` (`caixa_id` ASC),
  INDEX `FK_movimentacoes_iniciador_id_idx` (`iniciador_id` ASC),
  INDEX `FK_movimentacoes_fechador_id_idx` (`fechador_id` ASC),
  INDEX `data_abertura_INDEX` (`data_abertura` ASC),
  INDEX `data_fechamento_INDEX` (`data_fechamento` ASC),
  CONSTRAINT `FK_movimentacoes_sessao_id`
    FOREIGN KEY (`sessao_id`)
    REFERENCES `sessoes` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `FK_movimentacoes_caixa_id`
    FOREIGN KEY (`caixa_id`)
    REFERENCES `caixas` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `FK_movimentacoes_iniciador_id`
    FOREIGN KEY (`iniciador_id`)
    REFERENCES `prestadores` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `FK_movimentacoes_fechador_id`
    FOREIGN KEY (`fechador_id`)
    REFERENCES `prestadores` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Movimentação do caixa, permite abrir diversos caixas na conta de operadores[N:Movimentação|Movimentações][G:a][K:App\\Models|Models\\][H:Model][L:null][ID:50]';


-- -----------------------------------------------------
-- Table `creditos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `creditos` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador do crédito[G:o]',
  `cliente_id` INT NOT NULL COMMENT 'Cliente a qual o crédito pertence[N:Cliente][G:o][S:S]',
  `valor` DECIMAL(19,4) NOT NULL COMMENT 'Valor do crédito[N:Valor][G:o]',
  `detalhes` VARCHAR(255) NOT NULL COMMENT 'Detalhes do crédito, justificativa do crédito[N:Detalhes][G:o][S]',
  `cancelado` ENUM('Y', 'N') NOT NULL DEFAULT 'N' COMMENT 'Informa se o crédito foi cancelado[N:Cancelado][G:o][F:false]',
  `data_cadastro` DATETIME NOT NULL COMMENT 'Data de cadastro do crédito[N:Data de cadastro][G:a]',
  PRIMARY KEY (`id`),
  INDEX `FK_creditos_cliente_id_idx` (`cliente_id` ASC),
  CONSTRAINT `FK_creditos_cliente_id`
    FOREIGN KEY (`cliente_id`)
    REFERENCES `clientes` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Créditos de clientes[N:Crédito|Créditos][G:o][K:App\\Models|Models\\][H:Model][L:null][ID:23]';


-- -----------------------------------------------------
-- Table `cheques`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cheques` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador da folha de cheque[G:o]',
  `cliente_id` INT NOT NULL COMMENT 'Cliente que emitiu o cheque[N:Cliente][G:o][S:S]',
  `banco_id` INT NOT NULL COMMENT 'Banco do cheque[N:Banco][G:o][S]',
  `agencia` VARCHAR(45) NOT NULL COMMENT 'Número da agência[N:Agência][G:a]',
  `conta` VARCHAR(45) NOT NULL COMMENT 'Número da conta do banco descrito no cheque[N:Conta][G:a]',
  `numero` VARCHAR(20) NOT NULL COMMENT 'Número da folha do cheque[N:Número][G:o][S]',
  `valor` DECIMAL(19,4) NOT NULL COMMENT 'Valor na folha do cheque[N:Valor][G:o]',
  `vencimento` DATETIME NOT NULL COMMENT 'Data de vencimento do cheque[N:Vencimento][G:o]',
  `cancelado` ENUM('Y', 'N') NOT NULL DEFAULT 'N' COMMENT 'Informa se o cheque e todas as suas folhas estão cancelados[N:Cancelado][G:o][F:false]',
  `recolhimento` DATETIME NULL DEFAULT NULL COMMENT 'Data de recolhimento do cheque[N:Data de recolhimento][G:a]',
  `data_cadastro` DATETIME NOT NULL COMMENT 'Data de cadastro do cheque[N:Data de cadastro][G:a][D]',
  PRIMARY KEY (`id`),
  INDEX `vencimento_INDEX` (`vencimento` ASC),
  INDEX `FK_cheques_cliente_id_idx` (`cliente_id` ASC),
  INDEX `FK_cheques_banco_id_idx` (`banco_id` ASC),
  INDEX `recolhimento_INDEX` (`recolhimento` ASC),
  CONSTRAINT `FK_cheques_cliente_id`
    FOREIGN KEY (`cliente_id`)
    REFERENCES `clientes` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `FK_cheques_banco_id`
    FOREIGN KEY (`banco_id`)
    REFERENCES `bancos` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Folha de cheque lançado como pagamento[N:Cheque|Cheques][G:o][K:App\\Models|Models\\][H:Model][L:null][ID:13]';


-- -----------------------------------------------------
-- Table `pagamentos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `pagamentos` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador do pagamento[G:o]',
  `carteira_id` INT NOT NULL COMMENT 'Carteira de destino do valor[N:Carteira][G:a]',
  `moeda_id` INT NOT NULL COMMENT 'Informa em qual moeda está o valor informado[G:a][N:Moeda]',
  `pagamento_id` INT NULL DEFAULT NULL COMMENT 'Informa o pagamento principal ou primeira parcela, o valor lançado é zero para os pagamentos filhos, restante de antecipação e taxas são filhos do valor antecipado[G:o][N:Pagamento]',
  `agrupamento_id` INT NULL DEFAULT NULL COMMENT 'Permite antecipar recebimentos de cartões, um pagamento agrupado é internamente tratado como desativado[G:o][N:Agrupamento]',
  `movimentacao_id` INT NULL DEFAULT NULL COMMENT 'Movimentação do caixa quando for pagamento de pedido ou quando a conta for paga do caixa[N:Movimentação][G:a][S:S]',
  `funcionario_id` INT NULL DEFAULT NULL COMMENT 'Funcionário que lançou o pagamento no sistema[N:Funcionário][G:o][S:S]',
  `forma_id` INT NULL DEFAULT NULL COMMENT 'Forma da pagamento do pedido[N:Forma de pagamento][G:a][S]',
  `pedido_id` INT NULL DEFAULT NULL COMMENT 'Pedido que foi pago[N:Pedido][G:o][S:S]',
  `conta_id` INT NULL DEFAULT NULL COMMENT 'Conta que foi paga/recebida[N:Conta][G:a][S:S]',
  `cartao_id` INT NULL DEFAULT NULL COMMENT 'Cartão em que foi pago, para forma de pagamento em cartão[N:Cartão][G:o]',
  `cheque_id` INT NULL DEFAULT NULL COMMENT 'Cheque em que foi pago[N:Cheque][G:o][S:S]',
  `crediario_id` INT NULL DEFAULT NULL COMMENT 'Conta que foi utilizada como pagamento do pedido[N:Conta pedido][G:a][S:S]',
  `credito_id` INT NULL DEFAULT NULL COMMENT 'Crédito que foi utilizado para pagar o pedido[N:Crédito][G:o][S:S]',
  `valor` DECIMAL(19,4) NOT NULL COMMENT 'Valor pago ou recebido na moeda informada no momento do recebimento[N:Valor][G:o]',
  `numero_parcela` INT NOT NULL DEFAULT 1 COMMENT 'Informa qual o número da parcela para este pagamento[G:o][N:Número da parcela][F:1]',
  `parcelas` INT NOT NULL DEFAULT 1 COMMENT 'Quantidade de parcelas desse pagamento[G:a][N:Parcelas][F:1]',
  `lancado` DECIMAL(19,4) NOT NULL COMMENT 'Valor lançado para pagamento do pedido ou conta na moeda local do país[N:Lancado][G:o]',
  `codigo` VARCHAR(100) NULL DEFAULT NULL COMMENT 'Código do pagamento, usado em transações online[G:o][N:Código]',
  `detalhes` VARCHAR(200) NULL DEFAULT NULL COMMENT 'Detalhes do pagamento[N:Detalhes][G:o]',
  `estado` ENUM('aberto', 'aguardando', 'analise', 'pago', 'disputa', 'devolvido', 'cancelado') NOT NULL DEFAULT 'aberto' COMMENT 'Informa qual o andamento do processo de pagamento[N:Estado][G:o][F:self::ESTADO_ABERTO][E:Aberto|Aguardando pagamento|Pago|Em disputa|Devolvido|Cancelado][F:self::ESTADO_ABERTO]',
  `data_pagamento` DATETIME NULL DEFAULT NULL COMMENT 'Data de pagamento[N:Data de pagamento][G:a]',
  `data_compensacao` DATETIME NULL DEFAULT NULL COMMENT 'Data de compensação do pagamento[N:Data de compensação][G:a]',
  `data_lancamento` DATETIME NOT NULL COMMENT 'Data e hora do lançamento do pagamento[N:Data de lançamento][G:a]',
  PRIMARY KEY (`id`),
  INDEX `FK_pagamentos_funcionario_id_idx` (`funcionario_id` ASC),
  INDEX `FK_pagamentos_forma_id_idx` (`forma_id` ASC),
  INDEX `FK_pagamentos_pedido_id_idx` (`pedido_id` ASC),
  INDEX `FK_pagamentos_cartao_id_idx` (`cartao_id` ASC),
  INDEX `FK_pagamentos_crediario_id_idx` (`crediario_id` ASC),
  INDEX `FK_pagamentos_conta_id_idx` (`conta_id` ASC),
  INDEX `FK_pagamentos_movimentacao_id_idx` (`movimentacao_id` ASC),
  INDEX `FK_pagamentos_credito_id_idx` (`credito_id` ASC),
  INDEX `FK_pagamentos_carteira_id_idx` (`carteira_id` ASC),
  INDEX `FK_pagamentos_cheque_id_idx` (`cheque_id` ASC),
  INDEX `FK_pagamentos_pagamento_id_idx` (`pagamento_id` ASC),
  INDEX `FK_pagamentos_moeda_id_idx` (`moeda_id` ASC),
  INDEX `FK_pagamentos_agrupamento_id_idx` (`agrupamento_id` ASC),
  INDEX `data_compensacao_INDEX` (`data_compensacao` DESC),
  INDEX `data_lancamento_INDEX` (`data_lancamento` DESC),
  INDEX `data_pagamento_INDEX` (`data_pagamento` DESC),
  CONSTRAINT `FK_pagamentos_funcionario_id`
    FOREIGN KEY (`funcionario_id`)
    REFERENCES `prestadores` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `FK_pagamentos_forma_id`
    FOREIGN KEY (`forma_id`)
    REFERENCES `formas` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `FK_pagamentos_pedido_id`
    FOREIGN KEY (`pedido_id`)
    REFERENCES `pedidos` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_pagamentos_cartao_id`
    FOREIGN KEY (`cartao_id`)
    REFERENCES `cartoes` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `FK_pagamentos_crediario_id`
    FOREIGN KEY (`crediario_id`)
    REFERENCES `contas` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `FK_pagamentos_conta_id`
    FOREIGN KEY (`conta_id`)
    REFERENCES `contas` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `FK_pagamentos_movimentacao_id`
    FOREIGN KEY (`movimentacao_id`)
    REFERENCES `movimentacoes` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `FK_pagamentos_carteira_id`
    FOREIGN KEY (`carteira_id`)
    REFERENCES `carteiras` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `FK_pagamentos_credito_id`
    FOREIGN KEY (`credito_id`)
    REFERENCES `creditos` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `FK_pagamentos_cheque_id`
    FOREIGN KEY (`cheque_id`)
    REFERENCES `cheques` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `FK_pagamentos_pagamento_id`
    FOREIGN KEY (`pagamento_id`)
    REFERENCES `pagamentos` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_pagamentos_moeda_id`
    FOREIGN KEY (`moeda_id`)
    REFERENCES `moedas` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `FK_pagamentos_agrupamento_id`
    FOREIGN KEY (`agrupamento_id`)
    REFERENCES `pagamentos` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Pagamentos de contas e pedidos[N:Pagamento|Pagamentos][G:o][K:App\\Models|Models\\][H:Model][L:null][ID:56]';


-- -----------------------------------------------------
-- Table `itens`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `itens` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador do item do pedido[G:o]',
  `pedido_id` INT NOT NULL COMMENT 'Pedido a qual pertence esse item[N:Pedido][G:o][S:S]',
  `prestador_id` INT NULL DEFAULT NULL COMMENT 'Prestador que lançou esse item no pedido[N:Prestador][G:o][S:S]',
  `produto_id` INT NULL COMMENT 'Produto vendido[N:Produto][G:o][S][S:S]',
  `servico_id` INT NULL DEFAULT NULL COMMENT 'Serviço cobrado ou taxa[N:Serviço][G:o][S:S]',
  `item_id` INT NULL DEFAULT NULL COMMENT 'Pacote em que esse item faz parte[N:Pacote][G:o][S:S]',
  `pagamento_id` INT NULL DEFAULT NULL COMMENT 'Informa se esse item foi pago e qual foi o lançamento[G:o][N:Pagamento]',
  `descricao` VARCHAR(200) NULL DEFAULT NULL COMMENT 'Sobrescreve a descrição do produto na exibição[N:Descrição][G:a]',
  `composicao` TEXT NULL DEFAULT NULL COMMENT 'Informa a composição escolhida[N:Composição][G:a]',
  `preco` DECIMAL(19,4) NOT NULL COMMENT 'Preço do produto já com desconto[N:Preço][G:o]',
  `quantidade` DOUBLE NOT NULL COMMENT 'Quantidade de itens vendidos[N:Quantidade][G:a]',
  `subtotal` DECIMAL(19,4) NOT NULL COMMENT 'Subtotal do item sem comissão[G:o][N:Subtotal]',
  `comissao` DECIMAL(19,4) NOT NULL DEFAULT 0 COMMENT 'Valor total de comissão cobrada nesse item da venda[N:Porcentagem][G:a][F:0]',
  `total` DECIMAL(19,4) NOT NULL COMMENT 'Total a pagar do item com a comissão[G:o][N:Total]',
  `preco_venda` DECIMAL(19,4) NOT NULL COMMENT 'Preço de normal do produto no momento da venda[N:Preço de venda][G:o]',
  `preco_compra` DECIMAL(19,4) NOT NULL DEFAULT 0 COMMENT 'Preço de compra do produto calculado automaticamente na hora da venda[N:Preço de compra][G:o][F:0]',
  `detalhes` VARCHAR(255) NULL DEFAULT NULL COMMENT 'Observações do item pedido, Ex.: bem gelado, mal passado[N:Observações][G:o]',
  `estado` ENUM('adicionado', 'enviado', 'processado', 'pronto', 'disponivel', 'entregue') NOT NULL DEFAULT 'adicionado' COMMENT 'Estado de preparo e envio do produto[N:Estado][G:o][E:Adicionado|Enviado|Processado|Pronto|Disponível|Entregue][F:self::ESTADO_ADICIONADO]',
  `cancelado` ENUM('Y', 'N') NOT NULL DEFAULT 'N' COMMENT 'Informa se o item foi cancelado[N:Cancelado][G:o][F:false]',
  `motivo` VARCHAR(200) NULL DEFAULT NULL COMMENT 'Informa o motivo do item ser cancelado[N:Motivo][G:o]',
  `desperdicado` ENUM('Y', 'N') NOT NULL DEFAULT 'N' COMMENT 'Informa se o item foi cancelado por conta de desperdício[N:Desperdiçado][G:o][F:false]',
  `reservado` ENUM('Y', 'N') NOT NULL DEFAULT 'N' COMMENT 'Informa se o produto foi reservado no estoque[G:o][N:Reservado][F:false]',
  `data_processamento` DATETIME NULL DEFAULT NULL COMMENT 'Data do processamento do item[N:Data do processamento][G:a]',
  `data_atualizacao` DATETIME NULL DEFAULT NULL COMMENT 'Data de atualização do estado do item[N:Data de atualização][G:a]',
  `data_lancamento` DATETIME NOT NULL COMMENT 'Data e hora da realização do pedido do item[N:Data de lançamento][G:a][D]',
  INDEX `FK_itens_pedido_id_idx` (`pedido_id` ASC),
  INDEX `FK_itens_produto_id_idx` (`produto_id` ASC),
  INDEX `FK_itens_prestador_id_idx` (`prestador_id` ASC),
  PRIMARY KEY (`id`),
  INDEX `FK_itens_item_id_idx` (`item_id` ASC),
  INDEX `FK_itens_servico_id_idx` (`servico_id` ASC),
  INDEX `FK_itens_pagamento_id_idx` (`pagamento_id` ASC),
  CONSTRAINT `FK_itens_pedido_id`
    FOREIGN KEY (`pedido_id`)
    REFERENCES `pedidos` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_itens_produto_id`
    FOREIGN KEY (`produto_id`)
    REFERENCES `produtos` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `FK_itens_prestador_id`
    FOREIGN KEY (`prestador_id`)
    REFERENCES `prestadores` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `FK_itens_item_id`
    FOREIGN KEY (`item_id`)
    REFERENCES `itens` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_itens_servico_id`
    FOREIGN KEY (`servico_id`)
    REFERENCES `servicos` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `FK_itens_pagamento_id`
    FOREIGN KEY (`pagamento_id`)
    REFERENCES `pagamentos` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Produtos, taxas e serviços do pedido, a alteração do estado permite o controle de produção[N:Item do pedido|Itens do pedido][G:o][U:Item|Itens][K:App\\Models|Models\\][H:Model][L:null][ID:42]';


-- -----------------------------------------------------
-- Table `modulos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `modulos` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador do módulo[G:o]',
  `nome` VARCHAR(50) NOT NULL COMMENT 'Nome do módulo, unico em todo o sistema[N:Nome][G:o][S]',
  `descricao` VARCHAR(200) NOT NULL COMMENT 'Descrição do módulo, informa detalhes sobre a funcionalidade do módulo no sistema[N:Descrição][G:a]',
  `habilitado` ENUM('Y', 'N') NOT NULL DEFAULT 'Y' COMMENT 'Informa se o módulo do sistema está habilitado[N:Habilitado][G:o][F:true]',
  PRIMARY KEY (`id`),
  UNIQUE INDEX `nome_UNIQUE` (`nome` ASC))
ENGINE = InnoDB
COMMENT = 'Módulos do sistema que podem ser desativados/ativados[N:Módulo|Módulos][G:o][K:App\\Models|Models\\][H:Model][L:null][ID:48]';


-- -----------------------------------------------------
-- Table `funcionalidades`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `funcionalidades` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador da funcionalidade[G:o]',
  `modulo_id` INT NULL DEFAULT NULL COMMENT 'Módulo que essa funcionalidade pertence[G:o][N:Módulo]',
  `funcionalidade_id` INT NULL DEFAULT NULL COMMENT 'Funcionalidade principal[G:a][N:Funcionalidade principal]',
  `nome` VARCHAR(64) NOT NULL COMMENT 'Nome da funcionalidade, único em todo o sistema[N:Nome][G:o]',
  `descricao` VARCHAR(200) NOT NULL COMMENT 'Descrição da funcionalidade[N:Descrição][G:a][S]',
  PRIMARY KEY (`id`),
  UNIQUE INDEX `nome_UNIQUE` (`nome` ASC),
  INDEX `FK_funcionalidades_funcionalidade_id_idx` (`funcionalidade_id` ASC),
  INDEX `FK_funcionalidades_modulo_id_idx` (`modulo_id` ASC),
  CONSTRAINT `FK_funcionalidades_funcionalidade_id`
    FOREIGN KEY (`funcionalidade_id`)
    REFERENCES `funcionalidades` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_funcionalidades_modulo_id`
    FOREIGN KEY (`modulo_id`)
    REFERENCES `modulos` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Grupo de funcionalidades do sistema[N:Funcionalidade|Funcionalidades][G:a][K:App\\Models|Models\\][H:Model][L:null][ID:35]';


-- -----------------------------------------------------
-- Table `permissoes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `permissoes` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador da permissão[G:o]',
  `funcionalidade_id` INT NOT NULL COMMENT 'Categoriza um grupo de permissões[N:Funcionalidade][G:a][S:S]',
  `nome` VARCHAR(45) NOT NULL COMMENT 'Nome da permissão, único no sistema[N:Nome][G:a]',
  `descricao` VARCHAR(100) NOT NULL COMMENT 'Descreve a permissão[N:Descrição][G:a][S]',
  PRIMARY KEY (`id`),
  UNIQUE INDEX `nome_UNIQUE` (`nome` ASC),
  INDEX `FK_permissoes_funcionalidade_id_idx` (`funcionalidade_id` ASC),
  CONSTRAINT `FK_permissoes_funcionalidade_id`
    FOREIGN KEY (`funcionalidade_id`)
    REFERENCES `funcionalidades` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Informa a listagem de todas as funções do sistema [N:Permissão|Permissões][G:a][K:App\\Models|Models\\][H:Model][L:null][ID:60]';


-- -----------------------------------------------------
-- Table `auditorias`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `auditorias` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador da auditoria[G:o]',
  `permissao_id` INT NULL DEFAULT NULL COMMENT 'Informa a permissão concedida ou utilizada que permitiu a realização da operação[G:a][N:Permissão]',
  `prestador_id` INT NOT NULL COMMENT 'Prestador que exerceu a atividade[N:Prestador][G:o][S:S]',
  `autorizador_id` INT NOT NULL COMMENT 'Prestador que autorizou o acesso ao recurso descrito[N:Autorizador][G:o][S:S]',
  `tipo` ENUM('financeiro', 'administrativo', 'operacional') NOT NULL COMMENT 'Tipo de atividade exercida[N:Tipo][G:o][S:S]',
  `prioridade` ENUM('baixa', 'media', 'alta') NOT NULL COMMENT 'Prioridade de acesso do recurso[N:Prioridade][G:a][E:Baixa|Média|Alta][S:S]',
  `descricao` VARCHAR(255) NOT NULL COMMENT 'Descrição da atividade exercida[N:Descrição][G:a][S]',
  `autorizacao` VARCHAR(255) NULL DEFAULT NULL COMMENT 'Código de autorização necessário para permitir realizar a função descrita[G:a][N:Autorização]',
  `data_registro` DATETIME NOT NULL COMMENT 'Data e hora do ocorrido[N:Data e hora][G:a]',
  PRIMARY KEY (`id`),
  INDEX `FK_auditorias_prestador_id_idx` (`prestador_id` ASC),
  INDEX `data_registro_INDEX` (`data_registro` DESC),
  INDEX `FK_auditorias_autorizador_id_idx` (`autorizador_id` ASC),
  INDEX `FK_auditorias_permissao_id_idx` (`permissao_id` ASC),
  CONSTRAINT `FK_auditorias_prestador_id`
    FOREIGN KEY (`prestador_id`)
    REFERENCES `prestadores` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_auditorias_autorizador_id`
    FOREIGN KEY (`autorizador_id`)
    REFERENCES `prestadores` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `FK_auditorias_permissao_id`
    FOREIGN KEY (`permissao_id`)
    REFERENCES `permissoes` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Registra todas as atividades importantes do sistema[N:Auditoria|Auditorias][G:a][K:App\\Models|Models\\][H:Model][L:null][ID:3]';


-- -----------------------------------------------------
-- Table `composicoes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `composicoes` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador da composição[G:o]',
  `composicao_id` INT NOT NULL COMMENT 'Informa a qual produto pertence essa composição, deve sempre ser um produto do tipo Composição[N:Composição][G:a][S:S]',
  `produto_id` INT NOT NULL COMMENT 'Produto ou composição que faz parte dessa composição, Obs: Não pode ser um pacote[N:Produto da composição][G:o][S]',
  `tipo` ENUM('composicao', 'opcional', 'adicional') NOT NULL DEFAULT 'composicao' COMMENT 'Tipo de composição, Composicao: sempre retira do estoque, Opcional: permite desmarcar na venda, Adicional: permite adicionar na venda[N:Tipo][G:o][E:Composição|Opcional|Adicional][F:self::TIPO_COMPOSICAO]',
  `quantidade` DOUBLE NOT NULL COMMENT 'Quantidade que será consumida desse produto para cada composição formada[N:Quantidade][G:a]',
  `valor` DECIMAL(19,4) NOT NULL DEFAULT 0 COMMENT 'Desconto que será realizado ao retirar esse produto da composição no  momento da venda[N:Valor][G:o][F:0]',
  `quantidade_maxima` INT NOT NULL DEFAULT 1 COMMENT 'Define a quantidade máxima que essa composição pode ser vendida repetidamente[N:Quantidade máxima][G:a][F:1]',
  `ativa` ENUM('Y', 'N') NOT NULL DEFAULT 'Y' COMMENT 'Indica se a composição está sendo usada atualmente na composição do produto[N:Ativa][G:a][F:true]',
  `data_remocao` DATETIME NULL DEFAULT NULL COMMENT 'Data em que a composição foi removida e não será mais exibida por padrão[G:a][N:Data de remoção]',
  PRIMARY KEY (`id`),
  INDEX `FK_composicoes_produto_id_idx` (`produto_id` ASC),
  UNIQUE INDEX `composicao_id_produto_id_tipo_UNIQUE` (`composicao_id` ASC, `produto_id` ASC, `tipo` ASC),
  CONSTRAINT `FK_composicoes_composicao_id`
    FOREIGN KEY (`composicao_id`)
    REFERENCES `produtos` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_composicoes_produto_id`
    FOREIGN KEY (`produto_id`)
    REFERENCES `produtos` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Informa as propriedades da composição de um produto composto[N:Composição|Composições][G:a][K:App\\Models|Models\\][H:Model][L:null][ID:18]';


-- -----------------------------------------------------
-- Table `fornecedores`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fornecedores` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador do fornecedor[G:o]',
  `empresa_id` INT NOT NULL COMMENT 'Empresa do fornecedor[N:Empresa][G:a][S]',
  `prazo_pagamento` INT NOT NULL DEFAULT 0 COMMENT 'Prazo em dias para pagamento do fornecedor[N:Prazo de pagamento][G:o][F:0]',
  `data_cadastro` DATETIME NOT NULL COMMENT 'Data de cadastro do fornecedor[N:Data de cadastro][G:a]',
  PRIMARY KEY (`id`),
  UNIQUE INDEX `empresa_id_UNIQUE` (`empresa_id` ASC),
  CONSTRAINT `FK_fornecedores_empresa_id`
    FOREIGN KEY (`empresa_id`)
    REFERENCES `clientes` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Fornecedores de produtos[N:Fornecedor|Fornecedores][G:o][K:App\\Models|Models\\][H:Model][L:null][ID:34]';


-- -----------------------------------------------------
-- Table `listas`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `listas` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador da lista de compras[G:o]',
  `descricao` VARCHAR(100) NOT NULL COMMENT 'Nome da lista, pode ser uma data[N:Descrição][G:a][S]',
  `estado` ENUM('analise', 'fechada', 'comprada') NOT NULL DEFAULT 'analise' COMMENT 'Estado da lista de compra. Análise: Ainda estão sendo adicionado produtos na lista, Fechada: Está pronto para compra, Comprada: Todos os itens foram comprados[N:Estado][G:o][E:Análise|Fechada|Comprada][F:self::ESTADO_ANALISE]',
  `encarregado_id` INT NOT NULL COMMENT 'Informa o funcionário encarregado de fazer as compras[N:Encarregado][G:o][S:S]',
  `viagem_id` INT NULL DEFAULT NULL COMMENT 'Informações da viagem para realizar as compras[G:a][N:Viagem]',
  `data_viagem` DATETIME NOT NULL COMMENT 'Data e hora para o encarregado ir fazer as compras[N:Data de viagem][G:a]',
  `data_cadastro` DATETIME NOT NULL COMMENT 'Data de cadastro da lista[N:Data de cadastro][G:a]',
  PRIMARY KEY (`id`),
  INDEX `FK_listas_encarregado_id_idx` (`encarregado_id` ASC),
  INDEX `FK_listas_viagem_id_idx` (`viagem_id` ASC),
  CONSTRAINT `FK_listas_encarregado_id`
    FOREIGN KEY (`encarregado_id`)
    REFERENCES `prestadores` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `FK_listas_viagem_id`
    FOREIGN KEY (`viagem_id`)
    REFERENCES `viagens` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Lista de compras de produtos[N:Lista de compra|Listas de compras][G:a][K:App\\Models|Models\\][H:Model][L:null][ID:44]';


-- -----------------------------------------------------
-- Table `compras`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `compras` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador da compra',
  `numero` VARCHAR(64) NULL DEFAULT NULL COMMENT 'Informa o número fiscal da compra[N:Número da compra][G:o]',
  `comprador_id` INT NOT NULL COMMENT 'Informa o funcionário que comprou os produtos da lista[N:Comprador][G:o][S:S]',
  `fornecedor_id` INT NOT NULL COMMENT 'Fornecedor em que os produtos foram compras[N:Fornecedor][G:o][S:S]',
  `documento_url` VARCHAR(150) NULL DEFAULT NULL COMMENT 'Informa o nome do documento no servidor do sistema[N:Documento][G:o][I:256x256|compra|compra.png]',
  `data_compra` DATETIME NOT NULL COMMENT 'Informa da data de finalização da compra[N:Data da compra][G:a]',
  PRIMARY KEY (`id`),
  INDEX `FK_compras_fornecedor_id_idx` (`fornecedor_id` ASC),
  INDEX `FK_compras_comprador_id_idx` (`comprador_id` ASC),
  UNIQUE INDEX `numero_UNIQUE` (`numero` ASC),
  CONSTRAINT `FK_compras_fornecedor_id`
    FOREIGN KEY (`fornecedor_id`)
    REFERENCES `fornecedores` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `FK_compras_comprador_id`
    FOREIGN KEY (`comprador_id`)
    REFERENCES `prestadores` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Compras realizadas em uma lista num determinado fornecedor[N:Compra|Compras][G:a][K:App\\Models|Models\\][H:Model][L:null][ID:19]';


-- -----------------------------------------------------
-- Table `requisitos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `requisitos` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador do produto da lista[G:o]',
  `lista_id` INT NOT NULL COMMENT 'Lista de compra desse produto[N:Lista de compra][G:a]',
  `produto_id` INT NOT NULL COMMENT 'Produto que deve ser comprado[N:Produto][G:o][S]',
  `compra_id` INT NULL DEFAULT NULL COMMENT 'Informa em qual fornecedor foi realizado a compra desse produto[G:a][N:Compra]',
  `fornecedor_id` INT NULL DEFAULT NULL COMMENT 'Fornecedor em que deve ser consultado ou realizado as compras dos produtos, pode ser alterado no momento da compra[N:Fornecedor][G:o]',
  `quantidade` DOUBLE NOT NULL DEFAULT 0 COMMENT 'Quantidade de produtos que deve ser comprado[N:Quantidade][G:a][F:0]',
  `comprado` DOUBLE NOT NULL DEFAULT 0 COMMENT 'Informa quantos produtos já foram comprados[N:Comprado][G:o][F:0]',
  `preco_maximo` DECIMAL(19,4) NOT NULL DEFAULT 0 COMMENT 'Preço máximo que deve ser pago na compra desse produto[N:Preço máximo][G:o][F:0]',
  `preco` DECIMAL(19,4) NOT NULL DEFAULT 0 COMMENT 'Preço em que o produto foi comprado da última vez ou o novo preço[N:Preço][G:o][F:0]',
  `observacoes` VARCHAR(100) NULL DEFAULT NULL COMMENT 'Detalhes na compra desse produto[N:Observações][G:a]',
  `data_recolhimento` DATETIME NULL DEFAULT NULL COMMENT 'Informa o momento do recolhimento da mercadoria na pratileira[N:Data de recolhimento][G:a]',
  PRIMARY KEY (`id`),
  INDEX `FK_requisitos_lista_id_idx` (`lista_id` ASC),
  INDEX `FK_requisitos_produto_id_idx` (`produto_id` ASC),
  INDEX `FK_requisitos_fornecedor_id_idx` (`fornecedor_id` ASC),
  INDEX `FK_requisitos_compra_id_idx` (`compra_id` ASC),
  CONSTRAINT `FK_requisitos_lista_id`
    FOREIGN KEY (`lista_id`)
    REFERENCES `listas` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_requisitos_produto_id`
    FOREIGN KEY (`produto_id`)
    REFERENCES `produtos` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_requisitos_fornecedor_id`
    FOREIGN KEY (`fornecedor_id`)
    REFERENCES `fornecedores` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `FK_requisitos_compra_id`
    FOREIGN KEY (`compra_id`)
    REFERENCES `compras` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Informa os produtos da lista de compras[N:Produtos da lista|Produtos das listas][G:o][K:App\\Models|Models\\][H:Model][L:null][ID:67]';


-- -----------------------------------------------------
-- Table `estoques`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `estoques` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador da entrada no estoque[G:o]',
  `produto_id` INT NOT NULL COMMENT 'Produto que entrou no estoque[N:Produto][G:o][S][S:S]',
  `requisito_id` INT NULL DEFAULT NULL COMMENT 'Informa de qual compra originou essa entrada em estoque[G:o][N:Requisição de Compra]',
  `transacao_id` INT NULL DEFAULT NULL COMMENT 'Identificador do item que gerou a saída desse produto do estoque[N:Transação][G:a][S:S]',
  `fornecedor_id` INT NULL DEFAULT NULL COMMENT 'Fornecedor do produto[N:Fornecedor][G:o][S:S]',
  `setor_id` INT NOT NULL COMMENT 'Setor de onde o produto foi inserido ou retirado[N:Setor][G:o]',
  `prestador_id` INT NULL DEFAULT NULL COMMENT 'Prestador que inseriu/retirou o produto do estoque[N:Prestador][G:o][S:S]',
  `quantidade` DOUBLE NOT NULL COMMENT 'Quantidade do mesmo produto inserido no estoque[N:Quantidade][G:a]',
  `preco_compra` DECIMAL(19,4) NOT NULL DEFAULT 0 COMMENT 'Preço de compra do produto[N:Preço de compra][G:o][F:0]',
  `lote` VARCHAR(45) NULL DEFAULT NULL COMMENT 'Lote de produção do produto comprado[N:Lote][G:o]',
  `fabricacao` DATETIME NULL DEFAULT NULL COMMENT 'Data de fabricação do produto[N:Data de fabricação][G:a]',
  `vencimento` DATETIME NULL DEFAULT NULL COMMENT 'Data de vencimento do produto[N:Data de vencimento][G:a]',
  `detalhes` VARCHAR(100) NULL DEFAULT NULL COMMENT 'Detalhes da inserção ou retirada do estoque[N:Detalhes][G:o]',
  `reservado` ENUM('Y', 'N') NOT NULL DEFAULT 'N' COMMENT 'Informa se os produtos foram retirados do estoque ou se estão apenas reservados[G:o][N:Reservado][F:false]',
  `cancelado` ENUM('Y', 'N') NOT NULL DEFAULT 'N' COMMENT 'Informa a entrada ou saída do estoque foi cancelada[N:Cancelado][G:o][F:false]',
  `data_movimento` DATETIME NOT NULL COMMENT 'Data de entrada ou saída do produto do estoque[N:Data de movimento][G:a][D]',
  PRIMARY KEY (`id`),
  INDEX `FK_estoques_produto_id_idx` (`produto_id` ASC),
  INDEX `FK_estoques_transacao_id_idx` (`transacao_id` ASC),
  INDEX `FK_estoques_fornecedor_id_idx` (`fornecedor_id` ASC),
  INDEX `FK_estoques_prestador_id_idx` (`prestador_id` ASC),
  INDEX `FK_estoques_setor_id_idx` (`setor_id` ASC),
  INDEX `FK_estoques_requisito_id_idx` (`requisito_id` ASC),
  INDEX `data_movimento_INDEX` (`data_movimento` ASC),
  CONSTRAINT `FK_estoques_produto_id`
    FOREIGN KEY (`produto_id`)
    REFERENCES `produtos` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_estoques_transacao_id`
    FOREIGN KEY (`transacao_id`)
    REFERENCES `itens` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_estoques_fornecedor_id`
    FOREIGN KEY (`fornecedor_id`)
    REFERENCES `fornecedores` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `FK_estoques_prestador_id`
    FOREIGN KEY (`prestador_id`)
    REFERENCES `prestadores` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `FK_estoques_setor_id`
    FOREIGN KEY (`setor_id`)
    REFERENCES `setores` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `FK_estoques_requisito_id`
    FOREIGN KEY (`requisito_id`)
    REFERENCES `requisitos` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Estoque de produtos por setor[N:Estoque|Estoques][G:o][K:App\\Models|Models\\][H:Model][L:null][ID:30]';


-- -----------------------------------------------------
-- Table `grupos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `grupos` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador do grupo[G:o]',
  `produto_id` INT NOT NULL COMMENT 'Informa o pacote base da formação[N:Pacote][G:o][S:S]',
  `nome` VARCHAR(100) NOT NULL COMMENT 'Nome resumido do grupo da formação, Exemplo: Tamanho, Sabores[N:Nome][G:o][S:S]',
  `descricao` VARCHAR(100) NOT NULL COMMENT 'Descrição do grupo da formação, Exemplo: Escolha o tamanho, Escolha os sabores[N:Descrição][G:a][S]',
  `tipo` ENUM('inteiro', 'fracionado') NOT NULL DEFAULT 'inteiro' COMMENT ' Informa se a formação final será apenas uma unidade ou vários itens[N:Tipo][G:o][F:self::TIPO_INTEIRO]',
  `quantidade_minima` INT NOT NULL DEFAULT 1 COMMENT 'Permite definir uma quantidade mínima obrigatória para continuar com a venda[N:Quantidade mínima][G:a][F:1]',
  `quantidade_maxima` INT NOT NULL DEFAULT 0 COMMENT 'Define a quantidade máxima de itens que podem ser escolhidos[N:Quantidade máxima][G:a][F:0]',
  `funcao` ENUM('minimo', 'media', 'maximo', 'soma') NOT NULL DEFAULT 'soma' COMMENT 'Informa qual será a fórmula de cálculo do preço, Mínimo: obtém o menor preço, Média:  define o preço do produto como a média dos itens selecionados, Máximo: Obtém o preço do item mais caro do grupo, Soma: Soma todos os preços dos produtos selecionados[N:Função de preço][G:a][E:Mínimo|Média|Máximo|Soma][F:self::FUNCAO_SOMA]',
  `ordem` INT NOT NULL DEFAULT 0 COMMENT 'Informa a ordem de exibição dos grupos[G:a][N:Ordem][F:0]',
  `data_arquivado` DATETIME NULL DEFAULT NULL COMMENT 'Data em que o grupo foi arquivado e não será mais usado[G:a][N:Data de arquivação]',
  PRIMARY KEY (`id`),
  INDEX `FK_grupos_produto_id_idx` (`produto_id` ASC),
  CONSTRAINT `FK_grupos_produto_id`
    FOREIGN KEY (`produto_id`)
    REFERENCES `produtos` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Grupos de pacotes, permite criar grupos como Tamanho, Sabores para formações de produtos[N:Grupo|Grupos][G:o][K:App\\Models|Models\\][H:Model][L:null][ID:37]';


-- -----------------------------------------------------
-- Table `propriedades`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `propriedades` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador da propriedade[G:o]',
  `grupo_id` INT NOT NULL COMMENT 'Grupo que possui essa propriedade como item de um pacote[N:Grupo][G:o][S:S]',
  `nome` VARCHAR(100) NOT NULL COMMENT 'Nome da propriedade, Ex.: Grande, Pequena[N:Nome][G:o][S]',
  `abreviacao` VARCHAR(100) NULL DEFAULT NULL COMMENT 'Abreviação do nome da propriedade, Ex.: G para Grande, P para Pequena, essa abreviação fará parte do nome do produto[N:Abreviação][G:a]',
  `imagem_url` VARCHAR(100) NULL DEFAULT NULL COMMENT 'Imagem que representa a propriedade[N:Imagem][G:a][I:256x256|propriedade|propriedade.png]',
  `data_atualizacao` DATETIME NULL DEFAULT NULL COMMENT 'Data de atualização dos dados ou da imagem da propriedade[N:Data de atualização][G:a]',
  PRIMARY KEY (`id`),
  UNIQUE INDEX `grupo_id_nome_UNIQUE` (`grupo_id` ASC, `nome` ASC),
  CONSTRAINT `FK_propriedades_grupo_id`
    FOREIGN KEY (`grupo_id`)
    REFERENCES `grupos` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Informa tamanhos de pizzas e opções de peso do produto[N:Propriedade|Propriedades][G:a][K:App\\Models|Models\\][H:Model][L:null][ID:65]';


-- -----------------------------------------------------
-- Table `pacotes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `pacotes` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador do pacote[G:o]',
  `pacote_id` INT NOT NULL COMMENT 'Pacote a qual pertence as informações de formação do produto final[N:Pacote][G:o][S:S]',
  `grupo_id` INT NOT NULL COMMENT 'Grupo de formação, Ex.: Tamanho, Sabores e Complementos.[N:Grupo][G:o][S:S]',
  `produto_id` INT NULL DEFAULT NULL COMMENT 'Produto selecionável do grupo. Não pode conter propriedade.[N:Produto][G:o][S][S:S]',
  `propriedade_id` INT NULL DEFAULT NULL COMMENT 'Propriedade selecionável do grupo. Não pode conter produto.[N:Propriedade][G:a]',
  `associacao_id` INT NULL DEFAULT NULL COMMENT 'Informa a propriedade pai de um complemento, permite atribuir preços diferentes dependendo da propriedade, Ex.: Tamanho -> Sabor, onde Tamanho é pai de Sabor[N:Associação][G:a]',
  `quantidade_minima` INT NOT NULL DEFAULT 0 COMMENT 'Permite definir uma quantidade mínima obrigatória para a venda desse item[N:Quantidade mínima][G:a][F:0]',
  `quantidade_maxima` INT NOT NULL DEFAULT 1 COMMENT 'Define a quantidade máxima que pode ser vendido esse item repetidamente[N:Quantidade máxima][G:a][F:1]',
  `acrescimo` DECIMAL(19,4) NOT NULL COMMENT 'Valor acrescentado ao produto quando o item é selecionado[N:Acréscimo][G:o]',
  `selecionado` ENUM('Y', 'N') NOT NULL DEFAULT 'N' COMMENT 'Informa se o complemento está selecionado por padrão, recomendado apenas para produtos[N:Selecionado][G:o][F:false]',
  `disponivel` ENUM('Y', 'N') NOT NULL DEFAULT 'Y' COMMENT 'Indica se o pacote estará disponível para venda[N:Disponível][G:o][F:true]',
  `data_arquivado` DATETIME NULL DEFAULT NULL COMMENT 'Data em que o pacote foi arquivado e não será mais usado[G:a][N:Data de arquivação]',
  PRIMARY KEY (`id`),
  INDEX `FK_pacotes_pacote_id_idx` (`pacote_id` ASC),
  INDEX `FK_pacotes_produto_id_idx` (`produto_id` ASC),
  INDEX `FK_pacotes_grupo_id_idx` (`grupo_id` ASC),
  INDEX `FK_pacotes_associacao_id_idx` (`associacao_id` ASC),
  INDEX `FK_pacotes_propriedade_id_idx` (`propriedade_id` ASC),
  CONSTRAINT `FK_pacotes_pacote_id`
    FOREIGN KEY (`pacote_id`)
    REFERENCES `produtos` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_pacotes_produto_id`
    FOREIGN KEY (`produto_id`)
    REFERENCES `produtos` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `FK_pacotes_grupo_id`
    FOREIGN KEY (`grupo_id`)
    REFERENCES `grupos` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_pacotes_associacao_id`
    FOREIGN KEY (`associacao_id`)
    REFERENCES `pacotes` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_pacotes_propriedade_id`
    FOREIGN KEY (`propriedade_id`)
    REFERENCES `propriedades` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Contém todos as opções para a formação do produto final[N:Pacote|Pacotes][G:o][K:App\\Models|Models\\][H:Model][L:null][ID:55]';


-- -----------------------------------------------------
-- Table `dispositivos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `dispositivos` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador do dispositivo[G:o]',
  `setor_id` INT NULL DEFAULT NULL COMMENT 'Setor em que o dispositivo está instalado/será usado[N:Setor][G:o]',
  `caixa_id` INT NULL DEFAULT NULL COMMENT 'Finalidade do dispositivo, caixa ou terminal, o caixa é único entre os dispositivos[N:Caixa][G:o]',
  `nome` VARCHAR(100) NOT NULL COMMENT 'Nome do computador ou tablet em rede, único entre os dispositivos[N:Nome][G:o][S]',
  `tipo` ENUM('computador', 'tablet', 'navegador') NOT NULL DEFAULT 'computador' COMMENT 'Tipo de dispositivo[N:Tipo][G:o][S:S][F:self::TIPO_COMPUTADOR]',
  `descricao` VARCHAR(45) NULL DEFAULT NULL COMMENT 'Descrição do dispositivo[N:Descrição][G:a]',
  `opcoes` TEXT NULL DEFAULT NULL COMMENT 'Opções do dispositivo, Ex.: Balança, identificador de chamadas e outros[N:Opções][G:a]',
  `serial` VARCHAR(45) NOT NULL COMMENT 'Serial do tablet para validação, único entre os dispositivos[N:Serial][G:o]',
  `validacao` VARCHAR(40) NULL DEFAULT NULL COMMENT 'Validação do dispositivo[N:Validação][G:a]',
  PRIMARY KEY (`id`),
  INDEX `FK_dispositivos_setor_id_idx` (`setor_id` ASC),
  UNIQUE INDEX `caixa_id_UNIQUE` (`caixa_id` ASC),
  UNIQUE INDEX `serial_UNIQUE` (`serial` ASC),
  CONSTRAINT `FK_dispositivos_setor_id`
    FOREIGN KEY (`setor_id`)
    REFERENCES `setores` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `FK_dispositivos_caixa_id`
    FOREIGN KEY (`caixa_id`)
    REFERENCES `caixas` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Computadores e tablets com opções de acesso[N:Dispositivo|Dispositivos][G:o][K:App\\Models|Models\\][H:Model][L:null][ID:25]';


-- -----------------------------------------------------
-- Table `impressoras`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `impressoras` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador da impressora[G:o]',
  `dispositivo_id` INT NOT NULL COMMENT 'Dispositivo que contém a impressora[N:Dispositivo][G:o]',
  `setor_id` INT NOT NULL COMMENT 'Setor de impressão[N:Setor de impressão][G:o]',
  `nome` VARCHAR(100) NOT NULL COMMENT 'Nome da impressora instalada no sistema operacional[N:Nome][G:o]',
  `modelo` VARCHAR(45) NOT NULL COMMENT 'Informa qual conjunto de comandos deve ser utilizado[N:Driver][G:o]',
  `modo` ENUM('terminal', 'caixa', 'servico', 'estoque') NOT NULL DEFAULT 'terminal' COMMENT 'Modo de impressão[N:Modo][G:o][E:Terminal|Caixa|Serviço|Estoque][F:self::MODO_TERMINAL]',
  `opcoes` TEXT NULL DEFAULT NULL COMMENT 'Opções da impressora, Ex.: Cortar papel, Acionar gaveta e outros[N:Opções][G:a]',
  `colunas` INT NOT NULL DEFAULT 48 COMMENT 'Quantidade de colunas do cupom[N:Quantidade de colunas][G:a][F:48]',
  `avanco` INT NOT NULL DEFAULT 6 COMMENT 'Quantidade de linhas para avanço do papel[N:Avanço de papel][G:o][F:6]',
  PRIMARY KEY (`id`),
  INDEX `FK_impressoras_dispositivo_id_idx` (`dispositivo_id` ASC),
  UNIQUE INDEX `dispositivo_id_setor_id_modo_UNIQUE` (`dispositivo_id` ASC, `setor_id` ASC, `modo` ASC),
  CONSTRAINT `FK_impressoras_dispositivo_id`
    FOREIGN KEY (`dispositivo_id`)
    REFERENCES `dispositivos` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_impressoras_setor_id`
    FOREIGN KEY (`setor_id`)
    REFERENCES `setores` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Impressora para impressão de serviços e contas[N:Impressora|Impressoras][G:a][K:App\\Models|Models\\][H:Model][L:null][ID:40]';


-- -----------------------------------------------------
-- Table `promocoes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `promocoes` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador da promoção[G:o]',
  `promocao_id` INT NULL DEFAULT NULL COMMENT 'Promoção que originou os pontos do cliente/pedido, se informado a promoção será o resgate e somente pontos gerados por ela poderão ser usados[G:a][N:Promoção geradora]',
  `categoria_id` INT NULL DEFAULT NULL COMMENT 'Permite fazer promoção para qualquer produto dessa categoria[G:a][N:Categoria]',
  `produto_id` INT NULL DEFAULT NULL COMMENT 'Informa qual o produto participará da promoção de desconto ou terá acréscimo[N:Produto][G:o][S]',
  `servico_id` INT NULL DEFAULT NULL COMMENT 'Informa se essa promoção será aplicada nesse serviço[G:o][N:Serviço]',
  `bairro_id` INT NULL DEFAULT NULL COMMENT 'Bairro que essa promoção se aplica, somente serviços[G:o][N:Bairro]',
  `zona_id` INT NULL DEFAULT NULL COMMENT 'Zona que essa promoção se aplica, somente serviços[G:o][N:Zona]',
  `integracao_id` INT NULL DEFAULT NULL COMMENT 'Permite alterar o preço do produto para cada integração[G:a][N:Integração]',
  `local` ENUM('local', 'mesa', 'comanda', 'balcao', 'entrega', 'online') NULL DEFAULT NULL COMMENT 'Local onde o preço será aplicado[N:Local][G:o][E:Venda local|Mesa|Comanda|Balcão|Entrega|Delivery online][F:self::LOCAL_LOCAL]',
  `inicio` INT NOT NULL COMMENT 'Momento inicial da semana em minutos que o produto começa a sofrer alteração de preço, em evento será o unix timestamp[N:Momento inicial][G:o]',
  `fim` INT NOT NULL COMMENT 'Momento final da semana em minutos que o produto volta ao preço normal, em evento será o unix timestamp[N:Momento final][G:o]',
  `valor` DECIMAL(19,4) NOT NULL COMMENT 'Acréscimo ou desconto aplicado ao produto ou serviço[N:Valor][G:o]',
  `pontos` INT NOT NULL DEFAULT 0 COMMENT 'Informa quantos pontos será ganho (Positivo) ou descontado (Negativo) na compra desse produto[G:o][N:Pontos][F:0]',
  `parcial` ENUM('Y', 'N') NOT NULL DEFAULT 'N' COMMENT 'Informa se o resgate dos produtos podem ser feitos de forma parcial[G:o][N:Resgate parcial][F:false]',
  `proibir` ENUM('Y', 'N') NOT NULL DEFAULT 'N' COMMENT 'Informa se deve proibir a venda desse produto no período informado[N:Proibir a venda][G:a][F:false]',
  `evento` ENUM('Y', 'N') NOT NULL DEFAULT 'N' COMMENT 'Informa se a promoção será aplicada apenas no intervalo de data informado[G:o][N:Evento][F:false]',
  `agendamento` ENUM('Y', 'N') NOT NULL DEFAULT 'N' COMMENT 'Informa se essa promoção é um agendamento de preço, na data inicial o preço será aplicado, assim como a visibilidade do produto ou serviço será ativada ou desativada de acordo com o proibir[G:o][N:Agendamento][F:false]',
  `limitar_vendas` ENUM('Y', 'N') NOT NULL DEFAULT 'N' COMMENT 'Informa se deve limitar a quantidade de vendas dessa categoria, produto ou serviço[G:o][N:Limitar vendas][F:false]',
  `funcao_vendas` ENUM('menor', 'igual', 'maior') NOT NULL DEFAULT 'maior' COMMENT 'Informa a regra para decidir se ainda pode vender com essa promoção[G:a][N:Função de limite por vendas][E:Menor|Igual|Maior][F:self::FUNCAO_VENDAS_MAIOR]',
  `vendas_limite` INT NOT NULL DEFAULT 0 COMMENT 'Quantidade de vendas que essa promoção será programada[G:a][N:Limite de vendas][F:0]',
  `limitar_cliente` ENUM('Y', 'N') NOT NULL DEFAULT 'N' COMMENT 'Informa se deve limitar a venda desse produto por cliente[G:o][N:Limitar por cliente][F:false]',
  `funcao_cliente` ENUM('menor', 'igual', 'maior') NOT NULL DEFAULT 'maior' COMMENT 'Informa a regra para decidir se o cliente consegue comprar mais nessa promoção[G:a][N:Função de limite por cliente][E:Menor|Igual|Maior][F:self::FUNCAO_CLIENTE_MAIOR]',
  `cliente_limite` DECIMAL(19,4) NOT NULL DEFAULT 0 COMMENT 'Quantidade de compras que o cliente será limitado a comprar[G:a][N:Limite de compras por cliente][F:0]',
  `ativa` ENUM('Y', 'N') NOT NULL DEFAULT 'Y' COMMENT 'Informa se a promoção está ativa[G:a][N:Ativa][F:true]',
  `chamada` VARCHAR(200) NULL DEFAULT NULL COMMENT 'Chamada para a promoção[G:a][N:Chamada]',
  `banner_url` VARCHAR(100) NULL DEFAULT NULL COMMENT 'Imagem promocional[N:Banner][G:o][I:512x256|promocao|promocao.png]',
  `data_arquivado` DATETIME NULL DEFAULT NULL COMMENT 'Data em que a promoção foi arquivada[G:a][N:Data de arquivamento]',
  PRIMARY KEY (`id`),
  INDEX `FK_promocoes_produto_id_idx` (`produto_id` ASC),
  INDEX `FK_promocoes_servico_id_idx` (`servico_id` ASC),
  INDEX `FK_promocoes_bairro_id_idx` (`bairro_id` ASC),
  INDEX `FK_promocoes_zona_id_idx` (`zona_id` ASC),
  INDEX `FK_promocoes_integracao_id_idx` (`integracao_id` ASC),
  INDEX `FK_promocoes_categoria_id_idx` (`categoria_id` ASC),
  INDEX `FK_promocoes_promocao_id_idx` (`promocao_id` ASC),
  CONSTRAINT `FK_promocoes_produto_id`
    FOREIGN KEY (`produto_id`)
    REFERENCES `produtos` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_promocoes_servico_id`
    FOREIGN KEY (`servico_id`)
    REFERENCES `servicos` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_promocoes_bairro_id`
    FOREIGN KEY (`bairro_id`)
    REFERENCES `bairros` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_promocoes_zona_id`
    FOREIGN KEY (`zona_id`)
    REFERENCES `zonas` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_promocoes_integracao_id`
    FOREIGN KEY (`integracao_id`)
    REFERENCES `integracoes` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_promocoes_categoria_id`
    FOREIGN KEY (`categoria_id`)
    REFERENCES `categorias` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_promocoes_promocao_id`
    FOREIGN KEY (`promocao_id`)
    REFERENCES `promocoes` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Informa se há descontos nos produtos em determinados dias da semana, o preço pode subir ou descer e ser agendado para ser aplicado[N:Promoção|Promoções][G:a][K:App\\Models|Models\\][H:Model][L:null][ID:64]';


-- -----------------------------------------------------
-- Table `acessos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `acessos` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador do acesso[G:o]',
  `funcao_id` INT NOT NULL COMMENT 'Função a que a permissão se aplica[N:Função][G:a][S:S]',
  `permissao_id` INT NOT NULL COMMENT 'Permissão liberada para a função[N:Permissão][G:a][S]',
  PRIMARY KEY (`id`),
  INDEX `FK_acessos_permissao_id_idx` (`permissao_id` ASC),
  UNIQUE INDEX `funcao_id_permissao_id_UNIQUE` (`funcao_id` ASC, `permissao_id` ASC),
  CONSTRAINT `FK_acessos_funcao_id`
    FOREIGN KEY (`funcao_id`)
    REFERENCES `funcoes` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_acessos_permissao_id`
    FOREIGN KEY (`permissao_id`)
    REFERENCES `permissoes` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Permite acesso à uma determinada funcionalidade da lista de permissões[N:Acesso|Acessos][G:o][K:App\\Models|Models\\][H:Model][L:null][ID:1]';


-- -----------------------------------------------------
-- Table `catalogos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `catalogos` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador do catálogo[G:o]',
  `produto_id` INT NOT NULL COMMENT 'Produto consultado[N:Produto][G:o][S]',
  `fornecedor_id` INT NOT NULL COMMENT 'Fornecedor que possui o produto à venda[N:Fornecedor][G:o][S:S]',
  `preco_compra` DECIMAL(19,4) NOT NULL COMMENT 'Preço a qual o produto foi comprado da última vez[N:Preço de compra][G:o]',
  `preco_venda` DECIMAL(19,4) NOT NULL DEFAULT 0 COMMENT 'Preço de venda do produto pelo fornecedor na última consulta[N:Preço de venda][G:o][F:0]',
  `quantidade_minima` DOUBLE NOT NULL DEFAULT 1 COMMENT 'Quantidade mínima que o fornecedor vende[N:Quantidade mínima][G:a][F:1]',
  `estoque` DOUBLE NOT NULL DEFAULT 0 COMMENT 'Quantidade em estoque do produto no fornecedor[N:Estoque][G:o][F:0]',
  `limitado` ENUM('Y', 'N') NOT NULL DEFAULT 'N' COMMENT 'Informa se a quantidade de estoque é limitada[N:Limitado][G:o][F:false]',
  `conteudo` DOUBLE NOT NULL DEFAULT 1 COMMENT 'Informa o conteúdo do produto como é comprado, Ex.: 5UN no mesmo pacote[N:Conteúdo][G:o][F:1]',
  `data_consulta` DATETIME NULL DEFAULT NULL COMMENT 'Última data de consulta do preço do produto[N:Data de consulta][G:a]',
  `data_parada` DATETIME NULL DEFAULT NULL COMMENT 'Data em que o produto deixou de ser vendido pelo fornecedor[G:a][N:Data de parada]',
  PRIMARY KEY (`id`),
  INDEX `FK_catalogos_produto_id_idx` (`produto_id` ASC),
  UNIQUE INDEX `fornecedor_id_produto_id_UNIQUE` (`fornecedor_id` ASC, `produto_id` ASC),
  CONSTRAINT `FK_catalogos_produto_id`
    FOREIGN KEY (`produto_id`)
    REFERENCES `produtos` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_catalogos_fornecedor_id`
    FOREIGN KEY (`fornecedor_id`)
    REFERENCES `fornecedores` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Informa a lista de produtos disponíveis nos fornecedores[N:Catálogo de produtos|Catálogos de produtos][G:o][K:App\\Models|Models\\][H:Model][L:null][ID:11]';


-- -----------------------------------------------------
-- Table `sistemas`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sistemas` (
  `id` ENUM('1') NOT NULL DEFAULT '1' COMMENT 'Identificador único do sistema, valor 1[G:o][F:\'1\']',
  `fuso_horario` VARCHAR(100) NULL DEFAULT NULL COMMENT 'Informa qual o fuso horário[G:o][N:Fuso horário]',
  `opcoes` TEXT NULL DEFAULT NULL COMMENT 'Opções gerais do sistema[G:a][N:Opções]',
  PRIMARY KEY (`id`))
ENGINE = InnoDB
COMMENT = 'Classe que informa detalhes da empresa, parceiro e opções do sistema como a versão do banco de dados e a licença de uso[N:Sistema|Sistemas][G:o][K:App\\Models|Models\\][H:Model][L:null][ID:72]';


-- -----------------------------------------------------
-- Table `resumos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `resumos` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador do resumo[G:o]',
  `movimentacao_id` INT NOT NULL COMMENT 'Movimentação do caixa referente ao resumo[N:Movimentação][G:a][S]',
  `forma_id` INT NOT NULL COMMENT 'Tipo de pagamento do resumo[N:Tipo][G:o][E:Dinheiro|Cartão de credito|Cartão de débito|Vale|Cheque|Crediário|Saldo][S:S]',
  `cartao_id` INT NULL DEFAULT NULL COMMENT 'Cartão da forma de pagamento[N:Cartão][G:o]',
  `valor` DECIMAL(19,4) NOT NULL COMMENT 'Valor que foi contado ao fechar o caixa[N:Valor][G:o]',
  PRIMARY KEY (`id`),
  INDEX `FK_resumos_cartao_id_idx` (`cartao_id` ASC),
  UNIQUE INDEX `movimentacao_id_forma_id_cartao_id_UNIQUE` (`movimentacao_id` ASC, `forma_id` ASC, `cartao_id` ASC),
  INDEX `FK_resumos_forma_id_idx` (`forma_id` ASC),
  CONSTRAINT `FK_resumos_movimentacao_id`
    FOREIGN KEY (`movimentacao_id`)
    REFERENCES `movimentacoes` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_resumos_cartao_id`
    FOREIGN KEY (`cartao_id`)
    REFERENCES `cartoes` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `FK_resumos_forma_id`
    FOREIGN KEY (`forma_id`)
    REFERENCES `formas` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Resumo de fechamento de caixa, informa o valor contado no fechamento do caixa para cada forma de pagamento[N:Resumo|Resumos][G:o][K:App\\Models|Models\\][H:Model][L:null][ID:68]';


-- -----------------------------------------------------
-- Table `formacoes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `formacoes` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador da formação[G:o]',
  `item_id` INT NOT NULL COMMENT 'Informa qual foi o produto vendido para essa formação[N:Item do pedido][G:o][S:S]',
  `pacote_id` INT NULL DEFAULT NULL COMMENT 'Informa qual pacote foi selecionado no momento da venda[N:Pacote][G:o][S]',
  `composicao_id` INT NULL DEFAULT NULL COMMENT 'Informa qual composição foi retirada ou adicionada no momento da venda[N:Composição][G:a]',
  `quantidade` DOUBLE NOT NULL DEFAULT 1 COMMENT 'Quantidade de itens selecionados[N:Quantidade][G:a][F:1]',
  PRIMARY KEY (`id`),
  INDEX `FK_formacoes_pacote_id_idx` (`pacote_id` ASC),
  UNIQUE INDEX `item_id_pacote_id_composicao_id_UNIQUE` (`item_id` ASC, `pacote_id` ASC, `composicao_id` ASC),
  INDEX `FK_formacoes_composicao_id_idx` (`composicao_id` ASC),
  CONSTRAINT `FK_formacoes_item_id`
    FOREIGN KEY (`item_id`)
    REFERENCES `itens` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_formacoes_pacote_id`
    FOREIGN KEY (`pacote_id`)
    REFERENCES `pacotes` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `FK_formacoes_composicao_id`
    FOREIGN KEY (`composicao_id`)
    REFERENCES `composicoes` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Informa qual foi a formação que gerou esse produto, assim como quais item foram retirados/adicionados da composição[N:Formação|Formações][G:a][K:App\\Models|Models\\][H:Model][L:null][ID:32]';


-- -----------------------------------------------------
-- Table `enderecos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `enderecos` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador do endereço[G:o]',
  `cidade_id` INT NOT NULL COMMENT 'Cidade a qual o endereço pertence[N:Cidade][G:a][S:S]',
  `bairro_id` INT NOT NULL COMMENT 'Bairro a qual o endereço está localizado[N:Bairro][G:o][S:S]',
  `logradouro` VARCHAR(200) NOT NULL COMMENT 'Nome da rua ou avenida[N:Logradouro][G:o][S]',
  `cep` VARCHAR(8) NOT NULL COMMENT 'Código dos correios para identificar a rua ou avenida[N:CEP][G:o][M:99999-999]',
  PRIMARY KEY (`id`),
  UNIQUE INDEX `cep_UNIQUE` (`cep` ASC),
  INDEX `FK_enderecos_cidade_id_idx` (`cidade_id` ASC),
  UNIQUE INDEX `bairro_id_logradouro_UNIQUE` (`bairro_id` ASC, `logradouro` ASC),
  CONSTRAINT `FK_enderecos_cidade_id`
    FOREIGN KEY (`cidade_id`)
    REFERENCES `cidades` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_enderecos_bairro_id`
    FOREIGN KEY (`bairro_id`)
    REFERENCES `bairros` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Endereços de ruas e avenidas com informação de CEP[N:Endereço|Endereços][G:o][K:App\\Models|Models\\][H:Model][L:null][ID:28]';


-- -----------------------------------------------------
-- Table `horarios`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `horarios` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador do horário[G:o]',
  `modo` ENUM('funcionamento', 'operacao', 'entrega') NOT NULL DEFAULT 'funcionamento' COMMENT 'Modo de trabalho disponível nesse horário, Funcionamento: horário em que o estabelecimento estará aberto, Operação: quando aceitar novos pedidos locais, Entrega: quando aceita ainda pedidos para entrega[G:o][N:Modo][F:self::MODO_FUNCIONAMENTO][E:Funcionamento|Operação|Entrega]',
  `funcao_id` INT NULL DEFAULT NULL COMMENT 'Permite informar o horário de acesso ao sistema para realizar essa função[G:a][N:Função]',
  `prestador_id` INT NULL DEFAULT NULL COMMENT 'Permite informar o horário de prestação de serviço para esse prestador[G:o][N:Prestador]',
  `inicio` INT NOT NULL COMMENT 'Início do horário de funcionamento em minutos contando a partir de domingo até sábado[N:Início][G:o]',
  `fim` INT NOT NULL COMMENT 'Horário final de funcionamento do estabelecimento contando em minutos a partir de domingo[N:Fim][G:o]',
  `mensagem` VARCHAR(200) NULL DEFAULT NULL COMMENT 'Mensagem que será mostrada quando o estabelecimento estiver fechado por algum motivo[G:o][N:Mensagem]',
  `entrega_minima` INT NULL DEFAULT NULL COMMENT 'Tempo mínimo que leva para entregar nesse horário[G:o][N:Tempo de entrega mínimo]',
  `entrega_maxima` INT NOT NULL DEFAULT 0 COMMENT 'Tempo máximo que leva para entregar nesse horário[G:o][N:Tempo de entrega máximo][F:0]',
  `fechado` ENUM('Y', 'N') NOT NULL DEFAULT 'N' COMMENT 'Informa se o estabelecimento estará fechado nesse horário programado, o início e fim será tempo no formato unix, quando verdadeiro tem prioridade sobre todos os horários[G:o][N:Fechado][F:false]',
  PRIMARY KEY (`id`),
  INDEX `FK_horarios_prestador_id_idx` (`prestador_id` ASC),
  INDEX `FK_horarios_funcao_id_idx` (`funcao_id` ASC),
  CONSTRAINT `FK_horarios_prestador_id`
    FOREIGN KEY (`prestador_id`)
    REFERENCES `prestadores` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_horarios_funcao_id`
    FOREIGN KEY (`funcao_id`)
    REFERENCES `funcoes` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Informa o horário de funcionamento do estabelecimento[N:Horário|Horários][G:o][K:App\\Models|Models\\][H:Model][L:null][ID:38]';


-- -----------------------------------------------------
-- Table `patrimonios`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `patrimonios` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador do bem[G:o]',
  `empresa_id` INT NOT NULL COMMENT 'Empresa a que esse bem pertence[N:Empresa][G:a][S:S]',
  `fornecedor_id` INT NULL DEFAULT NULL COMMENT 'Fornecedor do bem[N:Fornecedor][G:o][S:S]',
  `numero` VARCHAR(45) NOT NULL COMMENT 'Número que identifica o bem[N:Número][G:o]',
  `descricao` VARCHAR(200) NOT NULL COMMENT 'Descrição ou nome do bem[N:Descrição][G:a][S]',
  `quantidade` DOUBLE NOT NULL COMMENT 'Quantidade do bem com as mesmas características[N:Quantidade][G:a]',
  `altura` DOUBLE NOT NULL DEFAULT 0 COMMENT 'Altura do bem em metros[N:Altura][G:a][F:0]',
  `largura` DOUBLE NOT NULL DEFAULT 0 COMMENT 'Largura do bem em metros[N:Largura][G:a][F:0]',
  `comprimento` DOUBLE NOT NULL DEFAULT 0 COMMENT 'Comprimento do bem em metros[N:Comprimento][G:o][F:0]',
  `estado` ENUM('novo', 'conservado', 'ruim') NOT NULL DEFAULT 'novo' COMMENT 'Estado de conservação do bem[N:Estado][G:o][F:self::ESTADO_NOVO]',
  `custo` DECIMAL(19,4) NOT NULL DEFAULT 0 COMMENT 'Valor de custo do bem[N:Custo][G:o][F:0]',
  `valor` DECIMAL(19,4) NOT NULL DEFAULT 0 COMMENT 'Valor que o bem vale atualmente[N:Valor][G:o][F:0]',
  `ativo` ENUM('Y', 'N') NOT NULL DEFAULT 'Y' COMMENT 'Informa se o bem está ativo e em uso[N:Ativo][G:o][F:true]',
  `imagem_url` VARCHAR(200) NULL DEFAULT NULL COMMENT 'Caminho relativo da foto do bem[N:Foto do bem][G:a][I:512x512|patrimonio|patrimonio.png]',
  `data_atualizacao` DATETIME NULL DEFAULT NULL COMMENT 'Data de atualização das informações do bem[N:Data de atualização][G:a][D]',
  PRIMARY KEY (`id`),
  UNIQUE INDEX `numero_UNIQUE` (`numero` ASC),
  INDEX `FK_patrimonios_fornecedor_id_idx` (`fornecedor_id` ASC),
  INDEX `FK_patrimonios_empresa_id_idx` (`empresa_id` ASC),
  CONSTRAINT `FK_patrimonios_fornecedor_id`
    FOREIGN KEY (`fornecedor_id`)
    REFERENCES `fornecedores` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `FK_patrimonios_empresa_id`
    FOREIGN KEY (`empresa_id`)
    REFERENCES `clientes` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Informa detalhadamente um bem da empresa[N:Patrimônio|Patrimônios][G:o][K:App\\Models|Models\\][H:Model][L:null][ID:58]';


-- -----------------------------------------------------
-- Table `juncoes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `juncoes` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador da junção[G:o]',
  `mesa_id` INT NOT NULL COMMENT 'Mesa que está junta ao pedido[N:Mesa][G:a][S]',
  `pedido_id` INT NOT NULL COMMENT 'Pedido a qual a mesa está junta, o pedido deve ser de uma mesa[N:Pedido][G:o][S:S]',
  `estado` ENUM('associado', 'liberado', 'cancelado') NOT NULL DEFAULT 'associado' COMMENT 'Estado a junção da mesa. Associado: a mesa está junta ao pedido, Liberado: A mesa está livre, Cancelado: A mesa está liberada [N:Estado][G:o][F:self::ESTADO_ASSOCIADO]',
  `data_movimento` DATETIME NOT NULL COMMENT 'Data e hora da junção das mesas[N:Data do movimento][G:a]',
  PRIMARY KEY (`id`),
  INDEX `FK_juncoes_pedido_id_idx` (`pedido_id` ASC),
  INDEX `mesa_id_estado_INDEX` (`mesa_id` ASC, `estado` ASC),
  CONSTRAINT `FK_juncoes_mesa_id`
    FOREIGN KEY (`mesa_id`)
    REFERENCES `mesas` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `FK_juncoes_pedido_id`
    FOREIGN KEY (`pedido_id`)
    REFERENCES `pedidos` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Junções de mesas, informa quais mesas estão juntas ao pedido[N:Junção|Junções][G:a][K:App\\Models|Models\\][H:Model][L:1][ID:43]';


-- -----------------------------------------------------
-- Table `regimes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `regimes` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador do regime tributário[G:o]',
  `codigo` INT NOT NULL COMMENT 'Código do regime tributário[G:o][N:Código]',
  `descricao` VARCHAR(200) NOT NULL COMMENT 'Descrição do regime tributário[G:a][N:Descrição]',
  PRIMARY KEY (`id`),
  UNIQUE INDEX `codigo_UNIQUE` (`codigo` ASC))
ENGINE = InnoDB
COMMENT = 'Regimes tributários[N:Regime|Regimes][G:o][K:App\\Models|Models\\][H:Model][L:7][ID:66]';


-- -----------------------------------------------------
-- Table `emitentes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `emitentes` (
  `id` ENUM('1') NOT NULL DEFAULT '1' COMMENT 'Identificador do emitente, sempre 1[G:o][F:\'1\']',
  `contador_id` INT NULL DEFAULT NULL COMMENT 'Contador responsável pela contabilidade da empresa[N:Contador][G:o][S:S]',
  `regime_id` INT NOT NULL COMMENT 'Regime tributário da empresa[N:Regime tributário][G:o]',
  `ambiente` ENUM('homologacao', 'producao') NOT NULL DEFAULT 'homologacao' COMMENT 'Ambiente de emissão das notas[N:Ambiente][G:o][E:Homologação|Produção][F:self::AMBIENTE_HOMOLOGACAO]',
  `csc_teste` VARCHAR(100) NULL DEFAULT NULL COMMENT 'Código de segurança do contribuinte[G:o]',
  `csc` VARCHAR(100) NULL DEFAULT NULL COMMENT 'Código de segurança do contribuinte[G:o]',
  `token_teste` VARCHAR(10) NULL DEFAULT NULL COMMENT 'Token do código de segurança do contribuinte[N:Token][G:o]',
  `token` VARCHAR(10) NULL DEFAULT NULL COMMENT 'Token do código de segurança do contribuinte[N:Token][G:o]',
  `ibpt` VARCHAR(100) NULL DEFAULT NULL COMMENT 'Token da API do IBPT[N:Token IBPT][G:o]',
  `data_expiracao` DATETIME NULL DEFAULT NULL COMMENT 'Data de expiração do certificado[N:Data de expiração][G:a]',
  PRIMARY KEY (`id`),
  INDEX `FK_emitentes_contador_id_idx` (`contador_id` ASC),
  INDEX `FK_emitentes_regime_id_idx` (`regime_id` ASC),
  CONSTRAINT `FK_emitentes_contador_id`
    FOREIGN KEY (`contador_id`)
    REFERENCES `clientes` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `FK_emitentes_regime_id`
    FOREIGN KEY (`regime_id`)
    REFERENCES `regimes` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Dados do emitente das notas fiscais[N:Emitente|Emitentes][G:o][K:App\\Models|Models\\][H:Model][L:7][ID:26]';


-- -----------------------------------------------------
-- Table `notas`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `notas` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador da nota[G:o]',
  `tipo` ENUM('nota', 'inutilizacao') NOT NULL COMMENT 'Tipo de registro se nota ou inutilização[G:o][E:Nota|Inutilização][N:Tipo]',
  `ambiente` ENUM('homologacao', 'producao') NOT NULL COMMENT 'Ambiente em que a nota foi gerada[G:o][N:Ambiente][E:Homologação|Produção]',
  `acao` ENUM('autorizar', 'cancelar', 'inutilizar') NOT NULL COMMENT 'Ação que deve ser tomada sobre a nota fiscal[N:Ação][E:Autorizar|Cancelar|Inutilizar]',
  `estado` ENUM('aberto', 'assinado', 'pendente', 'processamento', 'denegado', 'rejeitado', 'cancelado', 'inutilizado', 'autorizado') NOT NULL COMMENT 'Estado da nota[G:o][N:Estado][E:Aberto|Assinado|Pendente|Em processamento|Denegado|Rejeitado|Cancelado|Inutilizado|Autorizado]',
  `ultimo_evento_id` INT NULL DEFAULT NULL COMMENT 'Último evento da nota[G:o][N:Último evento]',
  `serie` INT NOT NULL COMMENT 'Série da nota[G:a][N:Série]',
  `numero_inicial` INT NOT NULL COMMENT 'Número inicial da nota[G:o][N:Número]',
  `numero_final` INT NOT NULL COMMENT 'Número final da nota, igual ao número inicial quando for a nota de um pedido[G:o][N:Número final]',
  `sequencia` INT NOT NULL COMMENT 'Permite iniciar o número da nota quando alcançar 999.999.999, deve ser incrementado sempre que alcançar[G:a][N:Sequência]',
  `chave` VARCHAR(50) NULL DEFAULT NULL COMMENT 'Chave da nota fiscal[G:a][N:Chave]',
  `recibo` VARCHAR(50) NULL DEFAULT NULL COMMENT 'Recibo de envio para consulta posterior[G:o][N:Recibo]',
  `protocolo` VARCHAR(80) NULL DEFAULT NULL COMMENT 'Protocolo de autorização da nota fiscal[G:o][N:Protocolo]',
  `pedido_id` INT NULL DEFAULT NULL COMMENT 'Pedido da nota[N:Pedido][S:S]',
  `motivo` VARCHAR(255) NULL DEFAULT NULL COMMENT 'Motivo do cancelamento, contingência ou inutilização[G:o][N:Motivo]',
  `contingencia` ENUM('Y', 'N') NOT NULL COMMENT 'Informa se a nota está em contingência[G:a][N:Contingência]',
  `consulta_url` VARCHAR(255) NULL DEFAULT NULL COMMENT 'URL de consulta da nota fiscal[G:o][N:URL de consulta]',
  `qrcode` TEXT NULL DEFAULT NULL COMMENT 'Dados do QRCode da nota[G:o][N:QRCode]',
  `tributos` DECIMAL(19,4) NULL DEFAULT NULL COMMENT 'Tributos totais da nota[G:o][N:Tributos]',
  `detalhes` VARCHAR(255) NULL DEFAULT NULL COMMENT 'Informações de interesse do contribuinte[G:a][N:Informações de interesse do contribuinte]',
  `corrigido` ENUM('Y', 'N') NOT NULL DEFAULT 'Y' COMMENT 'Informa se os erros já foram corrigidos para retomada do processamento[G:o][N:Corrigido][F:true]',
  `concluido` ENUM('Y', 'N') NOT NULL DEFAULT 'N' COMMENT 'Informa se todos os processamentos da nota já foram realizados[G:o][N:Concluído][F:false]',
  `data_autorizacao` DATETIME NULL DEFAULT NULL COMMENT 'Data de autorização da nota fiscal[G:a][N:Data de autorização]',
  `data_emissao` DATETIME NOT NULL COMMENT 'Data de emissão da nota[G:a][N:Data de emissão]',
  `data_lancamento` DATETIME NOT NULL COMMENT 'Data de lançamento da nota no sistema[G:a][N:Data de lançamento]',
  `data_arquivado` DATETIME NULL DEFAULT NULL COMMENT 'Data em que a nota foi arquivada[G:a][N:Data de arquivamento]',
  PRIMARY KEY (`id`),
  INDEX `FK_notas_pedido_id_idx` (`pedido_id` ASC),
  INDEX `chave_INDEX` (`chave` ASC),
  INDEX `FK_notas_ultimo_evento_id_idx` (`ultimo_evento_id` ASC),
  CONSTRAINT `FK_notas_pedido_id`
    FOREIGN KEY (`pedido_id`)
    REFERENCES `pedidos` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `FK_notas_ultimo_evento_id`
    FOREIGN KEY (`ultimo_evento_id`)
    REFERENCES `eventos` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Notas fiscais e inutilizações[N:Nota|Notas][G:a][K:App\\Models|Models\\][H:Model][L:7][ID:51]';


-- -----------------------------------------------------
-- Table `eventos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `eventos` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador do evento[G:o]',
  `nota_id` INT NOT NULL COMMENT 'Nota a qual o evento foi criado[G:a][N:Nota][S:S]',
  `estado` ENUM('aberto', 'assinado', 'validado', 'pendente', 'processamento', 'denegado', 'cancelado', 'rejeitado', 'contingencia', 'inutilizado', 'autorizado') NOT NULL COMMENT 'Estado do evento[G:o][N:Estado][E:Aberto|Assinado|Validado|Pendente|Em processamento|Denegado|Cancelado|Rejeitado|Contingência|Inutilizado|Autorizado]',
  `mensagem` TEXT NOT NULL COMMENT 'Mensagem do evento, descreve que aconteceu[G:a][N:Mensagem]',
  `codigo` VARCHAR(20) NOT NULL COMMENT 'Código de status do evento, geralmente código de erro de uma exceção[G:o][N:Código]',
  `data_criacao` DATETIME NOT NULL COMMENT 'Data de criação do evento[G:a][N:Data de criação]',
  PRIMARY KEY (`id`),
  INDEX `FK_eventos_nota_id_idx` (`nota_id` ASC),
  CONSTRAINT `FK_eventos_nota_id`
    FOREIGN KEY (`nota_id`)
    REFERENCES `notas` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Eventos de envio das notas[N:Evento|Eventos][G:o][K:App\\Models|Models\\][H:Model][L:7][ID:31]';


-- -----------------------------------------------------
-- Table `empresas`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `empresas` (
  `id` ENUM('1') NOT NULL DEFAULT '1' COMMENT 'Identificador único da empresa, valor 1[G:o][F:\'1\']',
  `pais_id` INT NULL DEFAULT NULL COMMENT 'País em que a empresa está situada[N:País][G:o]',
  `empresa_id` INT NULL DEFAULT NULL COMMENT 'Informa a empresa do cadastro de clientes, a empresa deve ser um cliente do tipo pessoa jurídica[N:Empresa][G:a][S:S]',
  `parceiro_id` INT NULL DEFAULT NULL COMMENT 'Informa quem realiza o suporte do sistema, deve ser um cliente do tipo empresa que possua um acionista como representante[N:Parceiro][G:o][S:S]',
  `opcoes` TEXT NULL DEFAULT NULL COMMENT 'Opções gerais do sistema como opções de impressão e comportamento[N:Opções do sistema][G:a]',
  PRIMARY KEY (`id`),
  INDEX `FK_empresas_empresa_id_idx` (`empresa_id` ASC),
  INDEX `FK_empresas_parceiro_id_idx` (`parceiro_id` ASC),
  INDEX `FK_empresas_pais_id_idx` (`pais_id` ASC),
  CONSTRAINT `FK_empresas_empresa_id`
    FOREIGN KEY (`empresa_id`)
    REFERENCES `clientes` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `FK_empresas_parceiro_id`
    FOREIGN KEY (`parceiro_id`)
    REFERENCES `clientes` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `FK_empresas_pais_id`
    FOREIGN KEY (`pais_id`)
    REFERENCES `paises` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Informações da empresa[N:Empresa|Empresas][G:a][K:App\\Models|Models\\][H:Model][L:null][ID:27]';


-- -----------------------------------------------------
-- Table `pontuacoes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `pontuacoes` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador da pontuação[G:o]',
  `promocao_id` INT NOT NULL COMMENT 'Informa a promoção que originou os pontos ou que descontou os pontos[G:a][N:Promoção]',
  `cliente_id` INT NULL DEFAULT NULL COMMENT 'Cliente que possui esses pontos, não informar quando tiver travado por pedido[G:o][N:Cliente]',
  `pedido_id` INT NULL DEFAULT NULL COMMENT 'Informa se essa pontuação será usada apenas nesse pedido[G:o][N:Pedido]',
  `item_id` INT NULL DEFAULT NULL COMMENT 'Informa qual venda originou esses pontos, tanto saída como entrada[G:o][N:Item]',
  `quantidade` INT NOT NULL COMMENT 'Quantidade de pontos ganhos ou gastos[G:a][N:Quantidade]',
  `data_cadastro` DATETIME NOT NULL COMMENT 'Data de cadastro dos pontos[G:a][N:Data de cadastro]',
  PRIMARY KEY (`id`),
  INDEX `FK_pontuacoes_pedido_id_idx` (`pedido_id` ASC),
  INDEX `FK_pontuacoes_item_id_idx` (`item_id` ASC),
  INDEX `FK_pontuacoes_cliente_id_idx` (`cliente_id` ASC),
  INDEX `FK_pontuacoes_promocao_id_idx` (`promocao_id` ASC),
  CONSTRAINT `FK_pontuacoes_pedido_id`
    FOREIGN KEY (`pedido_id`)
    REFERENCES `pedidos` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_pontuacoes_item_id`
    FOREIGN KEY (`item_id`)
    REFERENCES `itens` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_pontuacoes_cliente_id`
    FOREIGN KEY (`cliente_id`)
    REFERENCES `clientes` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `FK_pontuacoes_promocao_id`
    FOREIGN KEY (`promocao_id`)
    REFERENCES `promocoes` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Informa os pontos ganhos e gastos por compras de produtos promocionais[N:Pontuação|Pontuações][G:a][K:App\\Models|Models\\][H:Model][L:null][ID:61]';


-- -----------------------------------------------------
-- Table `telefones`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `telefones` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador do telefone[G:o]',
  `cliente_id` INT NOT NULL COMMENT 'Informa o cliente que possui esse número de telefone[G:o][N:Cliente]',
  `pais_id` INT NOT NULL COMMENT 'Informa o país desse número de telefone[G:o][N:País]',
  `numero` VARCHAR(12) NOT NULL COMMENT 'Número de telefone com DDD[M:(99) 9999-9999?9][N:Número][G:o]',
  `operadora` VARCHAR(45) NULL DEFAULT NULL COMMENT 'Informa qual a operadora desse telefone[G:a][N:Operadora]',
  `servico` VARCHAR(45) NULL DEFAULT NULL COMMENT 'Informa qual serviço está associado à esse número, Ex: WhatsApp[G:o][N:Serviço]',
  `principal` ENUM('Y', 'N') NOT NULL DEFAULT 'N' COMMENT 'Informa se o telefone é principal e exclusivo do cliente[G:o][N:Principal][F:false]',
  `codigo_verificacao` VARCHAR(10) NULL DEFAULT NULL COMMENT 'Código de verificação a ser enviado para o cliente afim de validar o telefone[G:o][N:Código de verificação]',
  `tentativas` INT NULL DEFAULT NULL COMMENT 'Quantidade de tentativas mal sucedidas de validação, gerar outro código após 3[G:a][N:Tentativas]',
  `data_geracao` DATETIME NULL DEFAULT NULL COMMENT 'Data em que o código de verificação foi gerado, usado para expirar o código enviado para o telefone[G:]a[N:Data de geração]',
  `data_envio` DATETIME NULL DEFAULT NULL COMMENT 'Data do último envio do código de verificação, usado para evitar enviar SMS seguidos[G:a][N:Data de envio]',
  `data_validacao` DATETIME NULL DEFAULT NULL COMMENT 'Informa da data em que o número do telefone foi validado[G:a][N:Data de validação]',
  PRIMARY KEY (`id`),
  INDEX `FK_telefones_cliente_id_idx` (`cliente_id` ASC),
  INDEX `numero_INDEX` (`numero` ASC),
  INDEX `FK_telefones_pais_id_idx` (`pais_id` ASC),
  UNIQUE INDEX `codigo_verificacao_UNIQUE` (`codigo_verificacao` ASC),
  CONSTRAINT `FK_telefones_cliente_id`
    FOREIGN KEY (`cliente_id`)
    REFERENCES `clientes` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_telefones_pais_id`
    FOREIGN KEY (`pais_id`)
    REFERENCES `paises` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Telefones dos clientes, apenas o telefone principal deve ser único por cliente[N:Telefone|Telefones][G:o][K:App\\Models|Models\\][H:Model][L:null][ID:73]';


-- -----------------------------------------------------
-- Table `observacoes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `observacoes` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador da observação[G:o]',
  `produto_id` INT NOT NULL COMMENT 'Informa o produto que pode conter essa observação[G:o][N:Produto]',
  `grupo` INT NOT NULL DEFAULT 0 COMMENT 'Informa o grupo de observações obrigatórias, se maior que zero, é obrigatório escolher pelo menos uma opção[F:0][G:o][N:Grupo]',
  `descricao` VARCHAR(100) NOT NULL COMMENT 'Descrição da observação do produto[G:a][N:Descrição]',
  PRIMARY KEY (`id`),
  UNIQUE INDEX `produto_id_descricao_UNIQUE` (`produto_id` ASC, `descricao` ASC),
  CONSTRAINT `FK_observacoes_produto_id`
    FOREIGN KEY (`produto_id`)
    REFERENCES `produtos` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Observações e instruções de preparo de produto[N:Observação|Observações][G:a][K:App\\Models|Models\\][H:Model][L:null][ID:52]';


-- -----------------------------------------------------
-- Table `cupons`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cupons` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador do cupom[G:o]',
  `cupom_id` INT NULL DEFAULT NULL COMMENT 'Informa de qual cupom foi usado[G:o][N:Cupom]',
  `pedido_id` INT NULL DEFAULT NULL COMMENT 'Informa qual pedido usou este cupom[G:o][N:Pedido]',
  `cliente_id` INT NULL DEFAULT NULL COMMENT 'Informa o cliente que possui e pode usar esse cupom[G:o][N:Cliente]',
  `codigo` VARCHAR(20) NOT NULL COMMENT 'Código para uso do cupom[G:o][N:Código]',
  `quantidade` INT NOT NULL COMMENT 'Quantidade de cupons disponíveis ou usados[G:a][N:Quantidade]',
  `tipo_desconto` ENUM('valor', 'porcentagem') NOT NULL COMMENT 'Informa se o desconto será por valor ou porcentagem[G:o][N:Tipo de desconto][E:Valor|Porcentagem]',
  `valor` DECIMAL(19,4) NOT NULL DEFAULT 0 COMMENT 'Valor do desconto que será aplicado no pedido[G:o][N:Valor do desconto][F:0]',
  `porcentagem` DOUBLE NOT NULL DEFAULT 0 COMMENT 'Porcentagem de desconto do pedido[G:a][N:Porcentagem][F:0]',
  `incluir_servicos` ENUM('Y', 'N') NOT NULL COMMENT 'Informa se o cupom também se aplica nos serviços[G:o][N:Contemplar serviços]',
  `limitar_pedidos` ENUM('Y', 'N') NOT NULL DEFAULT 'N' COMMENT 'Informa se deve limitar o cupom pela quantidade de pedidos válidos do cliente[G:o][N:Limitar por pedidos][F:false]',
  `funcao_pedidos` ENUM('menor', 'igual', 'maior') NOT NULL DEFAULT 'maior' COMMENT 'Informa a regra para decidir se a quantidade de pedidos permite usar esse cupom[G:a][N:Função de limite por pedidos][E:Menor|Igual|Maior][F:self::FUNCAO_PEDIDOS_MAIOR]',
  `pedidos_limite` INT NOT NULL DEFAULT 0 COMMENT 'Quantidade de pedidos válidos que permite usar esse cupom[G:a][N:Limite de pedidos][F:0]',
  `limitar_valor` ENUM('Y', 'N') NOT NULL DEFAULT 'N' COMMENT 'Informa se deve limitar o uso do cupom pelo valor do pedido[G:o][N:Limitar pelo valor][F:false]',
  `funcao_valor` ENUM('menor', 'igual', 'maior') NOT NULL DEFAULT 'maior' COMMENT 'Informa a regra para decidir se o valor do pedido permite usar esse cupom[G:a][N:Função de limite por valor][E:Menor|Igual|Maior][F:self::FUNCAO_VALOR_MAIOR]',
  `valor_limite` DECIMAL(19,4) NOT NULL DEFAULT 0 COMMENT 'Valor do pedido com os serviços que permite usar esse cupom[G:a][N:Limite de valor][F:0]',
  `validade` DATETIME NOT NULL COMMENT 'Validade do cupom[G:a][N:Validade]',
  `data_registro` DATETIME NOT NULL COMMENT 'Data de registro do cupom ou do uso[G:a][N:Data de registro]',
  PRIMARY KEY (`id`),
  INDEX `FK_cupons_cupom_id_idx` (`cupom_id` ASC),
  INDEX `FK_cupons_pedido_id_idx` (`pedido_id` ASC),
  INDEX `FK_cupons_cliente_id_idx` (`cliente_id` ASC),
  CONSTRAINT `FK_cupons_cupom_id`
    FOREIGN KEY (`cupom_id`)
    REFERENCES `cupons` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_cupons_pedido_id`
    FOREIGN KEY (`pedido_id`)
    REFERENCES `pedidos` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_cupons_cliente_id`
    FOREIGN KEY (`cliente_id`)
    REFERENCES `clientes` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Informa os cupons de descontos e seus usos[N:Cupom|Cupons][G:o][K:App\\Models|Models\\][H:Model][L:null][ID:24]';


-- -----------------------------------------------------
-- Table `metricas`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `metricas` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador da métrica[G:o]',
  `nome` VARCHAR(100) NOT NULL COMMENT 'Nome da métrica[G:o][N:Nome]',
  `descricao` VARCHAR(200) NULL DEFAULT NULL COMMENT 'Descreve o que deve ser avaliado pelo cliente[G:a][N:Descrição]',
  `tipo` ENUM('entrega', 'atendimento', 'producao', 'apresentacao') NOT NULL COMMENT 'Tipo de métrica que pode ser velocidade de entrega, quantidade no atendimento, sabor da comida e apresentação do prato[G:o][N:Tipo de métrica][E:Entrega|Atendimento|Produção|Apresentação]',
  `quantidade` INT NOT NULL COMMENT 'Quantidade das últimas avaliações para reavaliação da métrica[G:o][N:Quantidade][F:100]',
  `avaliacao` DOUBLE NULL DEFAULT NULL COMMENT 'Média das avaliações para o período informado[G:a][N:Avaliação]',
  `data_processamento` DATETIME NULL DEFAULT NULL COMMENT 'Data do último processamento da avaliação[G:a][N:Data de processamento]',
  `data_arquivado` DATETIME NULL DEFAULT NULL COMMENT 'Data em que essa métrica foi arquivada[G:a][N:Data de arquivamento]',
  PRIMARY KEY (`id`),
  UNIQUE INDEX `nome_UNIQUE` (`nome` ASC))
ENGINE = InnoDB
COMMENT = 'Métricas de avaliação do atendimento e outros serviços do estabelecimento[N:Métrica|Métricas][G:a][K:App\\Models|Models\\][H:Model][L:null][ID:47]';


-- -----------------------------------------------------
-- Table `avaliacoes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `avaliacoes` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador da avaliação[G:o]',
  `metrica_id` INT NOT NULL COMMENT 'Métrica de avaliação[G:a][N:Métrica]',
  `cliente_id` INT NULL DEFAULT NULL COMMENT 'Informa o cliente que avaliou esse pedido ou produto, obrigatório quando for avaliação de produto[G:o][N:Cliente]',
  `pedido_id` INT NULL DEFAULT NULL COMMENT 'Pedido que foi avaliado, quando nulo o produto deve ser informado[G:o][N:Pedido]',
  `produto_id` INT NULL DEFAULT NULL COMMENT 'Produto que foi avaliado[G:o][N:Produto]',
  `estrelas` INT NOT NULL COMMENT 'Quantidade de estrelas de 1 a 5[G:a][N:Estrelas]',
  `comentario` VARCHAR(255) NULL DEFAULT NULL COMMENT 'Comentário da avaliação[G:o][N:Comentário]',
  `data_avaliacao` DATETIME NOT NULL COMMENT 'Data da avaliação[G:a][N:Data da avaliação]',
  PRIMARY KEY (`id`),
  INDEX `FK_avaliacoes_cliente_id_idx` (`cliente_id` ASC),
  INDEX `FK_avaliacoes_metrica_id_idx` (`metrica_id` ASC),
  INDEX `FK_avaliacoes_pedido_id_idx` (`pedido_id` ASC),
  INDEX `FK_avaliacoes_produto_id_idx` (`produto_id` ASC),
  CONSTRAINT `FK_avaliacoes_cliente_id`
    FOREIGN KEY (`cliente_id`)
    REFERENCES `clientes` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_avaliacoes_metrica_id`
    FOREIGN KEY (`metrica_id`)
    REFERENCES `metricas` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_avaliacoes_pedido_id`
    FOREIGN KEY (`pedido_id`)
    REFERENCES `pedidos` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_avaliacoes_produto_id`
    FOREIGN KEY (`produto_id`)
    REFERENCES `produtos` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Avaliação de atendimento e outros serviços do estabelecimento[N:Avaliação|Avaliações][G:a][K:App\\Models|Models\\][H:Model][L:5][ID:4]';


-- -----------------------------------------------------
-- Table `cozinhas`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cozinhas` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador da cozinha[G:o]',
  `nome` VARCHAR(50) NOT NULL COMMENT 'Nome da cozinha, Ex. Japonesa, Brasileira, Italiana, Pizza[G:o][N:Nome]',
  `descricao` VARCHAR(255) NULL DEFAULT NULL COMMENT 'Descrição da cozinha, o que é servido[G:a][N:Descrição]',
  PRIMARY KEY (`id`),
  UNIQUE INDEX `nome_UNIQUE` (`nome` ASC))
ENGINE = InnoDB
COMMENT = 'Categoria de comida servida pelo estabelecimento[G:a][N:Cozinha|Cozinhas][K:App\\Models|Models\\][H:Model][L:null][ID:22]';


-- -----------------------------------------------------
-- Table `cardapios`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cardapios` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador do cardápio[G:o]',
  `produto_id` INT NULL DEFAULT NULL COMMENT 'Produto que faz parte desse cardápio[G:o][N:Produto]',
  `composicao_id` INT NULL DEFAULT NULL COMMENT 'Composição que faz parte desse cardápio[G:a][N:Composição]',
  `pacote_id` INT NULL DEFAULT NULL COMMENT 'Pacote que faz parte desse cardápio[G:o][N:Pacote]',
  `cliente_id` INT NULL DEFAULT NULL COMMENT 'Permite exibir um cardápio diferenciado somente para esse cliente[G:o][N:Cliente]',
  `integracao_id` INT NULL DEFAULT NULL COMMENT 'Permite exibir o cardápio somente nessa integração[G:a][N:Integração]',
  `local` ENUM('local', 'mesa', 'comanda', 'balcao', 'entrega', 'online') NULL DEFAULT NULL COMMENT 'O cardápio será exibido para vendas nesse local[N:Local][G:o][E:Venda local|Mesa|Comanda|Balcão|Entrega|Delivery online][F:self::LOCAL_LOCAL]',
  `acrescimo` DECIMAL(19,4) NOT NULL DEFAULT 0 COMMENT 'Acréscimo ao preço de venda do produto nesse cardápio[N:Acréscimo][G:o][F:0]',
  `disponivel` ENUM('Y', 'N') NOT NULL DEFAULT 'Y' COMMENT 'Informa se o produto estará disponível para venda nesse cardápio[N:Disponível][G:a][F:true]',
  PRIMARY KEY (`id`),
  UNIQUE INDEX `item_destino_UNIQUE` (`produto_id` ASC, `composicao_id` ASC, `pacote_id` ASC, `cliente_id` ASC, `integracao_id` ASC, `local` ASC),
  INDEX `FK_cardapios_integracao_id_idx` (`integracao_id` ASC),
  INDEX `FK_cardapios_composicao_id_idx` (`composicao_id` ASC),
  INDEX `FK_cardapios_pacote_id_idx` (`pacote_id` ASC),
  INDEX `FK_cardapios_cliente_id_idx` (`cliente_id` ASC),
  CONSTRAINT `FK_cardapios_integracao_id`
    FOREIGN KEY (`integracao_id`)
    REFERENCES `integracoes` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_cardapios_produto_id`
    FOREIGN KEY (`produto_id`)
    REFERENCES `produtos` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_cardapios_composicao_id`
    FOREIGN KEY (`composicao_id`)
    REFERENCES `composicoes` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_cardapios_pacote_id`
    FOREIGN KEY (`pacote_id`)
    REFERENCES `pacotes` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_cardapios_cliente_id`
    FOREIGN KEY (`cliente_id`)
    REFERENCES `clientes` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Cardápios para cada integração ou local de venda[G:o][N:Cardápio|Cardápios][K:App\\Models|Models\\][H:Model][L:null][ID:8]';


-- -----------------------------------------------------
-- Table `contagens`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `contagens` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador da contagem[G:o]',
  `produto_id` INT NOT NULL COMMENT 'Produto que possui o estoque acumulado nesse setor[G:o][N:Produto]',
  `setor_id` INT NOT NULL COMMENT 'Setor em que o produto está localizado[G:o][N:Setor]',
  `quantidade` DOUBLE NOT NULL COMMENT 'Quantidade do produto nesse setor[G:a][N:Quantidade]',
  `data_atualizacao` DATETIME NULL DEFAULT NULL COMMENT 'Data em que a contagem foi atualizada[G:a][N:Data de atualização]',
  PRIMARY KEY (`id`),
  UNIQUE INDEX `produto_id_setor_id_UNIQUE` (`produto_id` ASC, `setor_id` ASC),
  INDEX `FK_contagens_setor_id_idx` (`setor_id` ASC),
  CONSTRAINT `FK_contagens_produto_id`
    FOREIGN KEY (`produto_id`)
    REFERENCES `produtos` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_contagens_setor_id`
    FOREIGN KEY (`setor_id`)
    REFERENCES `setores` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Guarda a soma do estoque de cada produto por setor[N:Contagem|Contagens][G:a][K:App\\Models|Models\\][H:Model][L:null][ID:20]';


-- -----------------------------------------------------
-- Table `notificacoes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `notificacoes` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador da notificação[G:o]',
  `destinatario_id` INT NOT NULL COMMENT 'Informa quem deverá receber a notificação[N:Destinatário][G:o]',
  `remetente_id` INT NULL DEFAULT NULL COMMENT 'Cliente que enviou a notificação, nulo quando for enviado pelo sistema[N:Remetente][G:o]',
  `mensagem` TEXT NOT NULL COMMENT 'Mensagem da notificação[S][N:Descrição]',
  `categoria` VARCHAR(50) NULL DEFAULT NULL COMMENT 'Tag que identifica a origem da notificação[N:Categoria][G:a]',
  `redirecionar` VARCHAR(255) NULL DEFAULT NULL COMMENT 'Redirecionar para essa url ou local[G:o][N:Redirecionar]',
  `data_visualizacao` DATETIME NULL DEFAULT NULL COMMENT 'Data em que a notificação foi visualizada[N:Data de visualização][G:a]',
  `data_notificacao` DATETIME NOT NULL COMMENT 'Data de criação da notificação[N:Data de notificação][G:a]',
  PRIMARY KEY (`id`),
  INDEX `FK_notificacoes_cliente_id_idx` (`destinatario_id` ASC),
  INDEX `FK_notificacoes_remetente_id_idx` (`remetente_id` ASC),
  CONSTRAINT `FK_notificacoes_destinatario_id`
    FOREIGN KEY (`destinatario_id`)
    REFERENCES `clientes` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_notificacoes_remetente_id`
    FOREIGN KEY (`remetente_id`)
    REFERENCES `clientes` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Notificações e avisos para os clientes, funcionários e administradores[N:Notificação|Notificações][G:a][K:App\\Models|Models\\][H:Model][L:null][ID:78]';


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
